{
  "title": "HTML/CSS",
  "chapters": [
    {
      "title": "Introduction aux balises",
      "description": "Découverte du HTML, le langage de base des pages web, et des balises principales qui le constituent.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vT-yctmKbXxKrLaLxbQwOdvmIFTGM_iXgmopeakGyAuC5MWbXa3dd5DaP6ATM6RDBRrL5myUkhyZpEH/pub?start=true&loop=false&delayms=60000000",
      "puzzle": {
        "word": "semantic",
        "text": "La sémantique (<i>semantic</i> en anglais) est la pratique visant à donner le maximum de signification au code constituant notre page web. On ne se soucie pas seulement de ce que l'utilisateur verra au final, mais aussi de ce que le navigateur reçoit comme code. Plus la sémantique du code est précise, mieux le code pourra être interprété dans différents contextes : navigation classique, référencement par les moteurs de recherche, navigation à l'aide d'une technologie d'assistance..."
      },
      "correctionVideoYoutubeId": "e1_r2MWtAIs",
      "concepts": [
        {
          "title": "Notre première balise",
          "theory": "Le contenu d'une page web est organisé dans des balises. La plupart des balises sont constituées d'un tag ouvrant, de leur contenu, puis du tag fermant correspondant.",
          "codes": {
            "html": "<p>Texte dans un paragraphe. Un paragraphe est représenté par la balise p en HTML.</p>"
          },
          "warning": "Ne laissez pas du contenu en dehors d'une balise. Il s'affichera quand même, mais sera difficilement manipulable par la suite.",
          "links": [
            {
              "label": "Liste de tous les éléments HTML existant",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element"
            }
          ],
          "codepen": "Pdreva",
          "question": {
            "text": "Le monde du code est très largement dominé par l'anglais, et votre code devrait toujours être écrit dans cette langue, par convention (et pour partager une langue universelle avec vos collègues de toutes les contrées). D'ailleurs, quel est le mot pour <em>balise</em> en anglais ?",
            "answer": "tag",
            "clue": "t"
          }
        },
        {
          "title": "Les titres",
          "theory": "Du <code>h1</code> au <code>h6</code>, les titres permettent d'introduire de manière hiérarchisée les différentes parties d'une page. <code>h1</code> représente le titre principal du document, puis les <code>h2</code> les titres de second niveau, et ainsi de suite...",
          "codes": {
            "html": "<h1>Je suis le titre de ce document</h1><h2>Première partie</h2><p>Contenu de la première partie</p><h2>Deuxième partie</h2><h3>Sous-partie 1</h3><p>Etc...</p>"
          },
          "info": "La convention veut que l'on utilise qu'un seul <code>h1</code> par page, principalement pour des raisons historiques de référencement. Pas de limite sur les autres !",
          "links": [
            {
              "label": "Documentation approfondie sur les titres",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/Heading_Elements"
            }
          ],
          "codepen": "XxWxOJ",
          "question": {
            "text": "Jetez un oeil en haut de cette page. Ici, le titre principal (\"HTML/CSS\") est contenu dans un <code>h1</code>, et le sous-titre (\"Introduction aux balises\") dans un <code>h2</code>. C'est bien joli tout ça, mais que signifie le h ?",
            "answer": "heading",
            "clue": "n"
          },
          "figure": {
            "src": "https://s3-ap-southeast-1.amazonaws.com/openeschool-uploads/Open_2/Open5013f58a-77e3-45ad-b4b0-09aa1d34a9dc.png",
            "alt": "6 balises de titres allant du h1 au h6",
            "caption": "Vous l'avez remarqué : les navigateurs appliquent automatiquement un style (taille) différent selon l'importance du titre."
          }
        },
        {
          "title": "Structurer un document",
          "theory": "Bien d'autres éléments concourent à la structuration d'un document. 99% des sites comportent au moins un <code>header</code> (en-tête, dans lequel on trouve au moins un titre) et un <code>footer</code> (pied-de-page). La balise <code>main</code> quant à elle permet de désigner le contenu principal du document.",
          "codes": {
            "html": "<header><h1>Bienvenue sur mon site !</h1></header><main>Le contenu principal...</main><footer>Merci d'être passé !</footer>"
          },
          "info": "Vous avez sans doute remarqué en passant qu'on peut imbriquer une balise dans une autre. Ici, un titre de niveau 1 au sein du <code>header</code>.",
          "links": [
            {
              "label": "Les balises structurelles",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element#Sectionnement_du_contenu"
            }
          ],
          "codepen": "yRLwra",
          "question": {
            "text": "Sur cette page, chaque concept (par exemple \"Structurer un document\") se trouve dans une balise <code>article</code>. En effet, ce sont des contenus indépendants, qui ont du sens à eux seul. Dans quel balise est-il logique d'avoir placé les encarts \"À noter\" ?",
            "answer": "aside",
            "clue": "i"
          },
          "figure": {
            "src": "https://uploads.siteduzero.com/files/343001_344000/343677.png",
            "alt": "La structure HTML5 d'un site",
            "caption": "Exemple de représentation d'un site et des balises HTML5 qui le composent. Un schéma à réaliser chaque fois que abordez un projet ou analysez un site existant."
          }
        },
        {
          "title": "L'indentation : elle peut sauver des vies",
          "theory": "Ce n'est pas drôle, mais c'est vital pour n'importe quel type de code : l'indentation, soit le fait d'espacer vers la droite les balises qui sont incluses dans une autre balise. Astuce : une balise fermante se trouve verticalement \"en face\" de sa balise ouvrante correspondante (sauf pour les balises qui tiennent sur une seule ligne).",
          "codes": {
            "html": "<section><h2>2 espaces d'indentation</h2><article><p>Puis 4, etc...</p></article></section>"
          },
          "warning": "Indentez avec des caractères \"espace\" et pas des vraies tabulations. C'est un vieux débat, mais les espaces produiront un code plus robuste. Heureusement, la plupart des éditeurs de code vous simplifieront la tâche.",
          "codepen": "qJBzpP",
          "figure": {
            "src": "/img/indentation.jpg",
            "alt": "Comparaison d'un code mal indenté et d'un code bien indenté",
            "caption": "Lire un code mal indenté peut nuire à votre santé et à celle de votre entourage."
          }
        },
        {
          "title": "Les balises auto-fermantes",
          "theory": "Jusqu'ici, toutes nos balises contiennent soit du texte, soit d'autres balises. Mais certaines balises ne contiennent rien. C'est par exemple le cas de la balise de retour à la ligne, <code>br</code>, qui se ferme à l'instant même où elle s'ouvre. Le slash de fermeture est optionnel.",
          "codes": {
            "html": "<p>Un vieil étang,<br/>Une grenouille qui plonge,<br/>Le bruit de l'eau.</p><p>Haïku de Bashō</p>"
          },
          "info": "La balise <code>br</code> est utile lorsqu'un retour à la ligne a du sens au sein d'un même paragraphe (ici, un poème). Elle est nécessaire car un retour à la ligne dans le code source sera ignoré par le navigateur.",
          "codepen": "yRygbL",
          "question": {
            "text": "Les navigateurs implémentent une spécification précise d'HTML, si possible la plus récente, qui nous dit quelles balises existent et comment les utiliser. Quelle est la version présentée en 2014 est encore utilisée aujourd'hui ?",
            "answer": "html5",
            "clue": "m"
          }
        },
        {
          "title": "Les listes",
          "theory": "Les listes sont un des éléments les plus courants dans un site. Elles sont constituées d'une balise <code>ul</code> (<i>unordered list</i>) ou <code>ol</code> (<i>ordered list</i>) et d'autant de balises <code>li</code> qu'il y a d'items.",
          "codes": {
            "html": "<nav><ul><li>Présentation</li><li>Compétences</li><li>Expériences</li></ul></nav>"
          },
          "warning": "Les listes servent souvent à déclarer un menu. Il faut alors placer la liste dans une balise <code>nav</code>, une autre balise structurelle qui permet au navigateur de savoir qu'il s'agit d'un moyen de naviguer sur le site.",
          "links": [
            {
              "label": "Exemples variés de listes",
              "url": "https://html.com/lists/"
            }
          ],
          "codepen": "NOPgQW",
          "question": {
            "text": "Vrai ou faux ? On peut inclure une liste dans une autre, mais il faut qu'elle soit du même type (<code>ul</code> au sein d'une <code>ul</code>, <code>ol</code> au sein d'une <code>ol</code>)",
            "answer": "faux",
            "clue": "a"
          },
          "figure": {
            "src": "https://webdesy.com/webdesy-wp/wp-content/uploads/2012/02/html-list-3.jpg",
            "alt": "Une liste d'action à effectuer",
            "caption": "Un autre exemple de liste dont l'ordre des items est important : une liste d'actions à effectuer en respectant un processus."
          }
        },
        {
          "title": "Créons du lien",
          "theory": "Les <em>attributs</em> procurent de nouveaux pouvoirs aux éléments HTML. On les place au sein de la balise d'ouverture. Une balise <code>a</code> seule n'a aucun effet, mais avec un attribut <code>href</code>, elle permet de créer un lien !",
          "codes": {
            "html": "<p>Voici un lien externe vers <a href=\"https://www.w3.org/\">le site du W3C</a>. En cliquant, vous sortirez de la page.</p><p>Et voici un lien vers une <a href=\"#hello\">section interne à ce document</a>. En cliquant, vous descendrez sur la page.</p><article id=\"hello\">Hello World!</a>"
          },
          "info": "Analysez bien la différence entre les deux liens de l'exemple. Dans le premier, <code>href</code> contient une adresse complète (autre page web). Dans le second, grâce au <code>#</code>, il redirige vers l'élément <em>de la même page</em> possédant l'attribut <code>id</code> correspondant.",
          "links": [
            {
              "label": "Documentation sur les liens",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/a"
            }
          ],
          "codepen": "dgPZYW",
          "question": {
            "text": "Il est possible de contrôler si l'ouverture du lien remplacera l'onglet actuel (on perd donc la page courante, c'est le comportement par défaut) ou si elle s'ouvrira dans un nouvel onglet. Quel est l'attribut à utiliser dans ce but ?",
            "answer": "target",
            "clue": "e"
          },
          "figure": {
            "src": "https://www.computerhope.com/jargon/h/html-tag.gif",
            "alt": "Schéma d'un tag HTML",
            "caption": "<code>href</code> est un des attributs de la balise <code>a</code>. Vous savez désormais écrire une balise HTML entière."
          }
        },
        {
          "title": "Les balises de texte",
          "theory": "HTML nous permet d'enrichir les textes avec des balises ayant chacune un sens spécifique. Les utiliser aide le navigateur à comprendre le contenu et nous permettra ensuite de styliser certains passages pour les faire ressortir.",
          "codes": {
            "html": "Ce mot est placé en <em>emphase</em>, pour qu'on le remarque. Et celui-ci est super <strong>important !!!</strong>"
          },
          "warning": "Le navigateur met par défaut les <code>em</code> en italique et les <code>strong</code> en gras. Mais ce n'est pas une fatalité, on peut très bien décider de présenter notre texte autrement. Il ne faut pas confondre le sens, qu'on donne avec les balises, et l'apparence.",
          "links": [
            {
              "label": "Sémantique du texte en ligne",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element#S%C3%A9mantique_du_texte_en_ligne"
            }
          ],
          "codepen": "bmNXPB",
          "question": {
            "text": "Quelle est la balise dans laquelle ont été logiquement placés les exemples de HTML sur cette page ?",
            "answer": "code",
            "clue": "c"
          }
        },
        {
          "title": "Ça manque d'images...",
          "theory": "Les pages web regorgent de médias, et les images (jpeg, png, gif, svg...) en représentent une grande partie. Elles sont insérées facilement avec une balise <code>img</code> (auto-fermante) contenant un attribut <code>src</code>. Pour la gestion de la taille, ce sera plus tard !",
          "codes": {
            "html": "<img src=\"https://www.placecage.com/300/200\" alt=\"Nicolas Cage avec une moustache\" />"
          },
          "warning": "N'oubliez pas l'attribut <code>alt</code> à chaque fois que vous insérez une image. Comme vous pouvez le voir dans l'exemple, il décrit l'image afin de présenter un texte aux utilisateurs qui ne pourront pas la voir (problème de connexion, lecteur d'écran...)",
          "links": [
            {
              "label": "Documentation sur la balise img",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/img"
            }
          ],
          "codepen": "vVOBQy",
          "question": {
            "text": "Quel format d'image vectoriel est adapté à la présentation d'icônes, logo et formes simples ? Ce format a l'avantage de produire des fichiers légers et des images pouvant être agrandies à l'infini sans en altérer la qualité.",
            "answer": "svg",
            "clue": "s"
          },
          "figure": {
            "src": "https://wprocket-eb2.kxcdn.com/wp-content/uploads/1/3-pie-graph-page-size.png",
            "alt": "Répartition du poids des ressources sur le web",
            "caption": "Les images représentent une portion considérable du poids du web (derrière les vidéos, loin devant). Attention à utiliser des images optimisées."
          }
        },
        {
          "title": "Block VS Inline",
          "theory": "Toutes ces balises sont regroupables en deux catégories : les <em>block</em>, qui provoquent un retour à la ligne et prennent toute la largeur disponible, et les <em>inline</em>, qui s'intrègrent au flux courant, en prenant juste la largeur de leur contenu. <code>div</code> et <code>span</code> sont les éléments génériques (sans signification particulière) respectifs de ces deux catégories.",
          "codes": {
            "html": "<p>Ce paragraphe est un bloc.</p><header>Ce header est un autre bloc. Mais ce <span>span</span> à l'intérieur du header est un élément inline.</header>"
          },
          "info": "Quand vous cherchez quelle balise utiliser, vérifiez s'il en existe une qui répond au sens que vous souhaitez donner à votre contenu. Si aucune ne correspond, utilisez <code>div</code> ou <code>span</code> selon que votre élement est un bloc ou en-ligne. Voyez ces dernières comme le dernier recours !",
          "links": [
            {
              "label": "Éléments en-ligne",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/%C3%89l%C3%A9ments_en_ligne"
            },
            {
              "label": "Éléments inline",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/%C3%89l%C3%A9ments_en_bloc"
            }
          ],
          "codepen": "yRNyWz",
          "figure": {
            "src": "https://www.webdesignerdepot.com/cdn-origin/uploads/2012/08/boxmodel-block-vs-inline.png",
            "alt": "Comparaison entre les éléments de bloc et les éléments en-ligne"
          }
        }
      ]
    },
    {
      "title": "Sélecteurs CSS et règles simples",
      "description": "Comment cibler des éléments du HTML et leur appliquer des règles stylistiques simples.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vRgG8_pKVmbQ4lwXqDZEEFoRd_VzKazQB5-ldieXUnmvl1g3k8n817osNqjACUPdPF0W-BstefwmMEd/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "cascade",
        "text": "La <em>cascade</em> est le processus par lequel un document est stylisé en combinant les différentes sources CSS disponibles : le CSS du navigateur, celui du site, parfois-même celui de l'utilisateur s'il a fait des réglages spéciaux. La <em>spécificité CSS</em> fait partie de ce processsus : elle arbitre sur la règle qui sera finalement appliquée."
      },
      "correctionVideoYoutubeId": "zOsq09gNwz0",
      "concepts": [
        {
          "title": "Notre première règle CSS",
          "theory": "Un fichier CSS est une suite de règles. Une règle est composée d'un sélecteur, puis des propriétés qui s'appliqueront aux éléments correspondant à ce sélecteur.",
          "codes": {
            "html": "<a>Je suis un lien et j'aimerais être affiché sur un fond vert, avec une taille de typo de 18px</a>",
            "css": "a { background-color: green; font-size: 18px; }"
          },
          "info": "Vous avez pu remarquer que les navigateurs appliquent des styles par défaut : par exemple, les titres sont affichés plus grand que le texte courant. C'est parce qu'ils incluent par défaut une feuille de style ciblant les h1, h2... et beaucoup d'autres éléments !",
          "links": [
            {
              "label": "Les bases des CSS",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/Commencer_avec_le_web/Les_bases_CSS"
            }
          ],
          "codepen": "ePEaBR",
          "question": {
            "text": "Quelle est la propriété CSS permettant de définir si le texte doit être aligné à gauche/droite, centré ou justifié ?",
            "answer": "text-align",
            "clue": "a"
          },
          "figure": {
            "src": "https://downloads.intercomcdn.com/i/o/45715097/cd89fe546a2d16cdc76dc30f/CSS+selectors.png",
            "alt": "Un extrait de code CSS",
            "caption": "Dissection d'un extrait de CSS, permettant ici que tout le texte du body soit en rouge."
          }
        },
        {
          "title": "Les sélecteurs de classe",
          "theory": "Les classes permettent de cibler des éléments de manière plus précise, car cibler tous les tags de même type devient rapidement dangereux sur des projets de plus grande envergure. N'importe quel élément HTML peut avoir l'attribut <code>class</code>. Le sélecteur correspondant est défini par un point suivi du nom de la classe.",
          "codes": {
            "html": "<p class=\"product\">Je possède la classe product et j'aimerai être affiché en bleu et en gras !</p>",
            "css": ".product { color: blue; font-weight: bold; }"
          },
          "warning": "Choisir le nom des classes n'est pas facile mais la sémantique est tout aussi importante qu'en HTML. Utilisez toujours des noms qui reflètent le rôle de l'élément (<code>product</code>, <code>movie</code>, <code>author</code>), plutôt que leur apparence. Évitez donc des classes comme <code>red</code>, <code>big</code>... En effet, l'apparence de ces éléments pourra changer, alors que leur rôle jamais !",
          "links": [
            {
              "label": "Les sélecteurs de classe",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/S%C3%A9lecteurs_de_classe"
            }
          ],
          "codepen": "yRodQG",
          "figure": {
            "src": "http://4.bp.blogspot.com/-FkRmNVMoQY8/UJaVl24cpMI/AAAAAAAAAHo/iOXlDHEd9PU/s1600/inlinecss.jpg",
            "alt": "Règles CSS dans le HTML",
            "caption": "Écrire du CSS directement dans le HTML est possible grâce à l'attribut style, mais strictement prohibé ! Ce serait mélanger la présentation avec le style, ce qui serait beaucoup moins clair et maintenable."
          }
        },
        {
          "title": "Les pseudos-classes",
          "theory": "Les sélecteurs de pseudo-classes permettent de cibler encore plus précisément certains éléments. Ils ne se basent pas sur des attributs <code>class</code> ajoutés aux éléments, mais sur l'état de ces derniers ou leur position dans le document. On reconnaît ces sélecteurs aux deux points qui les précédent.",
          "codes": {
            "html": "<p>Ce paragraphe sera vert mais deviendra rouge lorsqu'on le survolera.</p>",
            "css": "p { color: green; } p:hover { color: red; }"
          },
          "info": "Dans le contexte de cet exemple, <code>:hover</code> signifie \"au survol\" (hover = flotter en anglais). Vous voyez le lien pour accéder à la présentation, en haut à droite de la page ? C'est grâce à un tel sélecteur qu'il grossit au survol.",
          "links": [
            {
              "label": "Les pseudo-classes",
              "url": "https://www.w3schools.com/css/css_pseudo_classes.asp"
            },
            {
              "label": "Sélections par position",
              "url": "https://css-tricks.com/useful-nth-child-recipies/"
            }
          ],
          "codepen": "aRyeaJ",
          "question": {
            "text": "Quelle règle CSS permet de faire apparaître une petite main au survol d'un lien (et d'autres symboles dans d'autres contextes)&nbsp;?",
            "answer": "cursor",
            "clue": "c"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/csstricks-uploads/relationalpseudos2.png",
            "alt": "Ciblage d'élement HTML selon leur position",
            "caption": "Il est fréquent de devoir cibler des éléments en fonction de leur position/environnement, et beaucoup de pseudo-classes nous le permettent (<code>nth-child</code> est la plus courante et utile !)."
          }
        },
        {
          "title": "Combiner les sélecteurs",
          "theory": "Ici réside toute la puissance et la complexité du CSS. Toujours dans l'optique d'affiner nos sélections, on va combiner les sélecteurs, en les mettant les uns à la suite des autres. L'exemple montre comment cibler le <code>h2</code> qui se trouve au sein de la section de classe <code>contact</code>, et pas les autres.",
          "codes": {
            "html": "<section class=\"skills\"><h2>My skills</h2></section><section class=\"contact\"><h2>Contact me</h2></section>",
            "css": ".contact&nbsp;h2 { color: green; }"
          },
          "warning": "Pour garder un code maintenable, on prendra garde à ne pas abuser de cette pratique. Une bonne règle de base est de limiter le chaînage des sélecteurs à trois (ex: <code>.movie p:first-child</code>), et d'en utiliser moins dès que possible.",
          "links": [
            {
              "label": "Les combinaisons possibles",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/CSS/Introduction_%C3%A0_CSS/Combinators_and_multiple_selectors"
            },
            {
              "label": "L'importance des espaces",
              "url": "https://stackoverflow.com/questions/1126338/what-does-a-space-mean-in-a-css-selector-i-e-what-is-the-difference-between-c/1126354"
            }
          ],
          "codepen": "vVeBwB",
          "question": {
            "text": "Quel symbole permet de sélectionner tout élément de classe B, à condition que l'élément précédent soit de classe A ?",
            "answer": "plus",
            "clue": "s"
          },
          "figure": {
            "src": "http://www.cssinhtml.com/wp-content/uploads/2016/08/Descendant-selector_example_div-div-p.png",
            "alt": "Le ciblage des éléments dans le DOM",
            "caption": "Le navigateur se représente votre document sous forme d'un arbre appelé DOM et trouve ainsi à quel(s) élément(s) appliquer chaque règle."
          }
        },
        {
          "title": "La spécificité CSS",
          "theory": "La <em>spécificité</em> est le mécanisme qui détermine ce qu'il se passe quand deux sélecteurs déclarent des propriétés qui rentrent en conflit : c'est le sélecteur qui a le plus de <em>poids</em> qui l'emporte. Par exemple, un sélecteur de classe a plus de poids qu'un sélecteur de tag. Et un sélecteur basé sur deux classes (<code>.movie.new</code>) a plus de poids qu'un sélecteur basé sur une seule (<code>.movie</code>). À poids égal, c'est le dernier à avoir été déclaré qui prend le dessus.",
          "codes": {
            "html": "<p>Je serai bleu, car la première règle est écrasée.</p><p class=\"special\">Je serai vert, car la règle de classe est plus forte !</p>",
            "css": "p { color: red; } p { color: blue; } .special { color: green; }"
          },
          "warning": "Vous trouverez que l'on peut aussi utiliser des <code>id</code> pour cibler des éléments, mais on évite de le faire car leur spécificité est trop forte. La spécificité CSS introduit une complexité non négligeable dans le CSS et c'est une autre raison pour laquelle on essaie de limiter les combinaisons de sélecteurs : plus la spécificité globale est basse, plus le code est maintenable. Nous verrons des techniques pour aider à cela.",
          "links": [
            {
              "label": "Calculateur de spécificité",
              "url": "https://specificity.keegan.st/"
            }
          ],
          "codepen": "oaGNmx",
          "question": {
            "text": "Quelle expression, pouvant être placée à la fin d'une déclaration pour surpasser toutes les autres règles de spécificité, ne faut-il utiliser que dans les cas extrêmes ?",
            "answer": "!important",
            "clue": "a"
          },
          "figure": {
            "src": "http://submit.xlauz.net/upload/css-specificity.png",
            "alt": "Un calcul de spécificité CSS",
            "caption": "La spécificité pose des problèmes même aux développeurs expérimentés. Un sélecteur aussi complexe que celui-ci n'est pas agréable à manipuler !"
          }
        },
        {
          "title": "Les conventions d'écriture",
          "theory": "Comme celle du HTML, l'écriture du CSS est soumise à des conventions partagées par une majorité de développeurs pour faciliter sa lecture et sa maintenance. En plus des retours à la ligne et des espacements où cela est nécessaire, nommez vos classes en anglais et en <em>kebab-case</em> (tout en minuscule, avec des tirets pour séparer les mots). N'oubliez pas que les projets sur lesquels vous travaillerez seuls seront des exceptions.",
          "codes": {
            "css": ".product { color: red; font-size: 18px; } .product-title { font-weight: bold; }"
          },
          "info": "L'installation d'un linter tel que <em>Prettier</em> sur votre IDE est fortement recommandée. Un linter est une extension qui reformatte votre code (et pas seulement le CSS) automatiquement quand vous sauvegardez. Dans certaines organisations, il est même impossible de pusher du code ne respectant pas les conventions définies.",
          "links": [
            {
              "label": "Écrire un CSS lisible",
              "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Syntax#Beyond_syntax_make_CSS_readable"
            },
            {
              "label": "L'extension Prettier pour VSCode",
              "url": "https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"
            }
          ],
          "codepen": "oaGpKp",
          "question": {
            "text": "Nous avons parlé ci-dessus du <em>kebab-case</em>, une convention de nommage. Quelle est celle utilisée en JavaScript, où les variables ressemblent à <code>userInput</code>, <code>projectName</code>, etc ?",
            "answer": "camelcase",
            "clue": "c"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2017/10/stylelint.gif",
            "alt": "Un extrait de code dont les erreurs de syntaxe sont relevées par Prettier",
            "caption": "Les outils tels que <em>Prettier</em> vous aideront à éviter les erreurs de syntaxe."
          }
        },
        {
          "title": "Les propriétés de texte",
          "theory": "On dit souvent que le texte est roi sur le web, sans doute car c'est lui qui véhicule votre contenu. De nombreuses règles sont disponibles pour gérer son apparence.",
          "codes": {
            "html": "<p>J'aimerai être affiché en gras, rouge et être aligné à droite !</p>",
            "css": "p { font-weight: bold; color: red; text-align: right; }"
          },
          "warning": "Utilisez au maximum du vrai texte plutôt que des images, même pour les éléments complexes comme les logos ou gros titres stylisés. Une image pèse lourd, pixellise, est moins bien référencée et moins accessible.",
          "links": [
            {
              "label": "Mise en forme du texte",
              "url": "https://developer.mozilla.org/fr/docs/Learn/CSS/Styling_text/initiation-mise-en-forme-du-texte"
            },
            {
              "label": "Exemples d'effets avancés",
              "url": "https://freefrontend.com/css-text-effects/"
            }
          ],
          "codepen": "zmERoz",
          "question": {
            "text": "L'arabe et l'Hébreu, entre autres, se distinguent par une particularité assez forte. Quelle propriété CSS nous sera utile pour gérer l'affichage de ces langues ?",
            "answer": "direction",
            "clue": "d"
          },
          "figure": {
            "src": "https://speckyboy.com/wp-content/uploads/2017/05/css-text-amimation-thumb.gif",
            "alt": "Une texte animé en JavaScript",
            "caption": "Avec un peu de JavaScript, les possibilités deviennent quasiment infinies."
          }
        },
        {
          "title": "Importer une typo avec @font-face",
          "theory": "Il y a plusieurs moyens d'utiliser une typographie non standard pour un site, et la déclaration CSS <code>@font-face</code> est sans doute la plus efficace. Beaucoup de formats de fichier existent, mais étant donnés la performance et le support navigateur de chacun, le consensus préconise une utilisation combinée des format <code>woff</code> et <code>woff2</code>. Chaque navigateur choisira ce qu'il est en mesure de comprendre, <code>woff2</code> étant plus optimisé mais pas aussi largement supporté. Il faut déclarer un <code>@font-face</code> par typographie et par graisse (normal, bold, italic, bold & italic...).",
          "codes": {
            "css": "@font-face { font-family: \"Roboto\"; src: url(\"fonts/Roboto.woff2\")&nbsp;format(\"woff2\"),&nbsp;url(\"fonts/Roboto.woff\")&nbsp;format(\"woff\"); font-weight: normal; font-style: normal; } @font-face { font-family: \"Roboto\"; src: url(\"fonts/Roboto-Italic.woff2\")&nbsp;format(\"woff2\"),&nbsp;url(\"fonts/Roboto-Italic.woff\")&nbsp;format(\"woff\"); font-weight: normal; font-style: italic; } body { font-family: \"Roboto\", sans-serif; } em { font-style: italic; }"
          },
          "warning": "Attention à bien regarder l'exemple : les deux déclarations utilisent la même <code>font-family</code>. Les seules choses qui changent, ce sont les chemins des fichiers et le <code>font-style</code> auquel les fichiers correspondent. Cela permet au navigateur de savoir qu'il faut styler le <code>body</code> avec <code>Roboto.woff2</code>, mais qu'il pourra utiliser <code>Roboto-Italic.woff2</code> pour faire ressortir les balises <code>em</code>. On pourrait également importer <code>Roboto-Bold.woff2</code>, en faisant varier <code>font-weight</code> cette fois-ci. Enfin, notez dans le sélecteur <code>body</code> la déclaration d'une police de secours (n'importe quelle <code>sans-serif</code>), au cas où la première ne peut pas être chargée.",
          "links": [
            {
              "label": "Les formats et leur support",
              "url": "https://www.w3schools.com/css/css3_fonts.asp"
            }
          ],
          "codepen": "PyJRwZ",
          "question": {
            "text": "Par quel mot désigne-t-on, en anglais, l'espacement entre les caractères ?",
            "answer": "kerning",
            "clue": "e"
          },
          "figure": {
            "src": "http://www.font-face.com/images/compare.png",
            "alt": "Les différentes graisses d'une typographie",
            "caption": "Une seule typographie peut contenir des dizaines de graisses et styles. Essayer de limiter à 3 ou 4 le nombre de typographies / graisses que vous utilisez par site, pour en optimiser les performances."
          }
        },
        {
          "title": "Les propriétés de blocs",
          "theory": "Le texte est souvent organisé dans des blocs qui structurent la page : il est possible d'en modifier l'apparence et la taille grâce à de nombreuses propriétés (le positionnement des blocs les uns par rapport aux autres sera un sujet à part entière).",
          "codes": {
            "html": "<section>Je suis un rectangle de 200px de côté, avec une image de montagne en fond et 20px de marge en dessous de moi. Ma hauteur n'étant pas spécifiée, je prendrai la hauteur nécessaire automatiquement.</section>",
            "css": "* { box-sizing: border-box; } section { width: 200px; background: url(\"img/moutain.jpg\")&nbsp;no-repeat&nbsp;center; background-size: cover; margin-bottom: 20px; }"
          },
          "warning": "La première règle de cet exemple est inhabituelle. Le sélécteur astérisque cible <em>tous</em> les éléments de la page et modifie avec la propriété <code>box-sizing</code> leur modèle de boîte. Cela est nécessaire pour que les dimensions soient correctement interprétées sur notre page, à toujours inclure dans votre code donc !",
          "links": [
            {
              "label": "Propriété des blocs",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/CSS/styliser_boites/Box_model_recap#Propri%C3%A9t%C3%A9s_des_bo%C3%AEtes"
            }
          ],
          "codepen": "QZqrWB",
          "figure": {
            "src": "http://csscreator.com/files/Boxsizing.png",
            "alt": "Comparaison de content-box et border-box",
            "caption": "Si on ne changeait pas le modèle de boîte en <code>border-box</code>, les bordures et le padding \"dépasseraient\" de notre conteneur, rendant le styling de notre page beaucoup plus difficile."
          }
        }
      ]
    },
    {
      "title": "Mise en page, flexbox & grid",
      "description": "Manipuler des blocs avec flexbox, grid et d'autres techniques pour parvenir à une mise en page complexe.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vSdS_UrGr6ofEmQY-DhJRLMJr7G_qXx0XRn7-Ame2nCfz36CmIB4okg_qkvul0g8-rr7YiA8vE2oUtj/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "flexible",
        "text": "Un mot simple mais qui doit piloter toutes nos réflexions sur le web. Flexbox et Grid sont des premiers (grands) pas vers un design flexible, et par là même résilient, c'est à dire résistant aux changement de taille, ce à quoi nous ferons face très prochainement en parlant d'intégration responsive."
      },
      "correctionVideoYoutubeId": "0i_Fgcu-MjE",
      "concepts": [
        {
          "title": "Le comportement inline-block",
          "theory": "Tous les éléments se comportent en block ou en inline, mais on peut réunir le meilleur des deux mondes en CSS, avec <code>display: inline-block</code>. Les éléments ciblés seront des blocks (et pourront donc avoir des dimensions définies en CSS, et des marges verticales), mais suivront le flux de texte de la page, sans causer de retour à la ligne.",
          "codes": {
            "html": "<ul><li>Nous devrions être des blocks...</li><li>...mais nous sommes désormais...</li><li>...sur la même ligne.</li></ul>",
            "css": "li { display: inline-block; }"
          },
          "info": "C'est une des techniques les plus simples et les mieux supportées pour mettre des éléments en ligne, si on ne se soucie pas trop de leur placement (pas d'alignements complexes à gérer). On peut par exemple la voir en action en haut de cette page : le numéro du chapitre et son titre sont dans deux balises séparées. Pour que le <code>h2</code> dans lequel se trouve le titre ne revienne pas à la ligne, il a été modifié en <code>inline-block</code>.",
          "links": [
            {
              "label": "block VS inline VS inline-block",
              "url": "https://stackoverflow.com/a/9189873"
            }
          ],
          "codepen": "JmBjOK",
          "question": {
            "text": "<code>opacity: 0</code> permettrait de cacher un élément, mais il prendrait toujours de la place. Quelle valeur donner à la propriété <code>display</code> pour le faire disparaître complètement ?",
            "answer": "none",
            "clue": "e"
          },
          "figure": {
            "src": "https://i.stack.imgur.com/mGTYI.png",
            "alt": "Comparaison des comportement inline, block et inline-block",
            "caption": "<code>inline-block</code> permet de positionner des blocks en inline, ou, dans l'autre sens, de faire se comporter les inline comme des blocks."
          }
        },
        {
          "title": "Faire flotter des éléments avec float",
          "theory": "La propriété <code>float</code> permet de faire flotter (sans blague) un élément. Un élément flottant à gauche, par exemple, se rangera en haut à gauche de son parent et les autres éléments viendront s'aligner à sa droite. Cette propriété à été mise en place pour permettre à du texte de s'adapter aux contours d'une image.",
          "codes": {
            "html": "<img src=\"cat.jpg\" alt=\"Un chat\" /><p>Je suis le texte de description du chat, j'aimerai que l'image soit flottante à ma gauche.</p>",
            "css": "img { float: left; }"
          },
          "warning": "La propriété <code>float</code> est encore souvent utilisée pour des mises en page complexes, particulièrement lorsque les navigateurs à prendre en compte sont trop vieux pour <code>flexbox</code> et <code>grid</code>, que nous aborderons plus loin. Mais si vous n'êtes pas dans ce cas, passez-vous en ! À part pour adapter le texte aux contours d'une image ou d'un bloc, son utilisation est souvent abusive (et source de bugs fréquents).",
          "links": [
            {
              "label": "Float & clear",
              "url": "https://www.w3schools.com/css/css_float.asp"
            }
          ],
          "codepen": "bmjNdy",
          "question": {
            "text": "<code>float</code> peut malheureusement causer beaucoup de problèmes. Si vous raccourcissez un des synopsis de l'exercice, de sorte à ce que le texte soit moins haut que l'image, vous verrez que cette dernière flotte en dehors de son parent. Comment s'appelle la technique que l'on est alors obligé d'utiliser pour rétablir le flux normal après le synopsis ? (la complexité de cette technique est une des raisons pour laquelle l'usage de float doit être limité au strict minimum)",
            "answer": "clearfix",
            "clue": "f"
          },
          "figure": {
            "src": "https://d3h6k4kfl8m9p0.cloudfront.net/uploads/2014/07/roland-f.-99v.jpg",
            "alt": "Une image flottante dans un très vieux livre",
            "caption": "Cette idée ne date pas d'hier : le monde du print a souvent influencé celui du web."
          }
        },
        {
          "title": "La position absolute",
          "theory": "Même si on modifie leur comportement, les éléments en <code>inline-block</code> et <code>float: left/right</code> restent dans le flux du document : ils se situent logiquement par rapport aux autres (en ligne, en flottant...). Mais il est possible de sortir complètement un élément du flux de la page avec la propriété <code>position: absolute</code>. Cela permet ensuite, avec les propriétés <code>top</code>, <code>bottom</code>, <code>left</code> et <code>right</code>, de positionner l'élément de manière absolue dans l'espace. Pratique pour les petits éléments décoratifs.",
          "codes": {
            "html": "<aside>Je suis une petite boîte qui s'affichera en haut à droite du document, à 10px du bord, en dehors du flux.</aside>",
            "css": "aside { position: absolute; top: 10px; right: 10px; }"
          },
          "info": "Un élément positionné de manière absolue se positionne par rapport à son <em>contexte de positionnement</em>, par défaut le <code>body</code>. Mais si on veut le positionner par rapport à un de ses parents (pour le mettre dans le coin d'une boîte, par exemple), on peut créer un nouveau contexte de positionnement en appliquant au parent <code>position: relative</code>. La technique du positionnement absolue est également à utiliser avec parcimonie.",
          "links": [
            {
              "label": "Exemple d'utilisation simple",
              "url": "http://www.partage-it.com/jai-enfin-compris-comment-utiliser-position-absolute-css/"
            }
          ],
          "codepen": "WaKvop",
          "figure": {
            "src": "http://anything.codes/gdi-intro-html-css/img/positioning-banner-concept.png",
            "alt": "Le positionnement absolu en CSS",
            "caption": "L'élément en position absolute se place par rapport à son plus proche parent en position relative (et le body s'il n'y en a pas)."
          }
        },
        {
          "title": "Flexbox : un modèle de positionnement puissant",
          "theory": "Si toutes les options présentées précédemment pouvaient dépanner dans des circonstances particulières, <code>flexbox</code>, pour peu que l'on ait pas à supporter de navigateurs trop anciens, est la première méthode de positionnement des éléments suffisament solide pour être utilisée à grande échelle. Pour utiliser <code>flexbox</code>, il faut simplement un élément parent et un ou plusieurs éléments enfants : on pourra alors manipuler facilement la position et la taille de ces derniers au sein du parent.",
          "codes": {
            "html": "<ul><li>Accueil</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "ul { display: flex; }"
          },
          "info": "Dans le code d'exemple, <code>ul</code> est le <em>flex container</em>, tandis que chaque <code>li</code> est un <em>flex item</em>.",
          "links": [
            {
              "label": "Support navigateur",
              "url": "https://caniuse.com/#feat=flexbox"
            }
          ],
          "codepen": "wYxaNq",
          "question": {
            "text": "Tout élément auquel on applique la propriété <code>display: flex</code> se comporte alors comme un block (suivi d'un retour à la ligne, donc). Avec quelle valeur peut-on garder combiner les comportements <code>inline-block</code> et <code>flex</code>, pour avoir des flexbox insérées dans le flux ?",
            "answer": "inline-flex",
            "clue": "l"
          },
          "figure": {
            "src": "https://cdn-images-1.medium.com/max/1250/1*ifusEqwI87nBKXgK9oZ_7A.gif",
            "alt": "La différence entre display: block et display: flex",
            "caption": "Un simple changement de display sur le parent de ces éléments créé un comportement similaire à <code>inline-block</code> sur chacun d'entre-eux, mais permettra par la suite beaucoup d'autres choses..."
          }
        },
        {
          "title": "Flexbox : les propriétés du conteneur",
          "theory": "Les propriétés <code>flexbox</code> s'appliquent soit au conteneur, soit aux items. En utilisant les propriétés de conteneur (et donc en ciblant l'élément qui est en <code>display: flex</code>), on peut définir le comportement global : dans quel sens et direction les items sont disposés, comment sont-ils répartis dans l'espace disponible, si les items peuvent être disposés sur plusieurs lignes ou non...",
          "codes": {
            "html": "<ul><li>Accueil</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "ul { display: flex; flex-wrap: wrap; justify-content: center; }"
          },
          "info": "Dans l'exemple, la propriété <code>flex-wrap</code> autorise les éléments à revenir à la ligne si le conteneur devient trop petit (sinon, ils diminueront automatiquement en largeur, ce qui n'est pas toujours souhaitable). La propriété <code>justify-content</code> permet elle de centrer les éléments sur l'axe. Ce ne sont pas les seules propriétés appliquables au conteneur !",
          "links": [
            {
              "label": "Propriétés flexbox",
              "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
            }
          ],
          "codepen": "yRqvKv",
          "question": {
            "text": "Quelle valeur donner à <code>flex-direction</code> pour répartir les éléments non pas horizontalement, mais verticalement ?",
            "answer": "column",
            "clue": "l"
          },
          "figure": {
            "src": "/img/menu-lemonde.png",
            "alt": "Le menu du site Le Monde",
            "caption": "Les menus utilisent très fréquemment <code>flexbox</code> pour présenter leurs liens élégamment."
          }
        },
        {
          "title": "Flexbox : les propriétés des items",
          "theory": "Pour affiner le tout, il est possible de définir des propriétés spécifiques pour chaque item. Il est par exemple possible de ré-ordonner les éléments sans changer le HTML, ce qui est particulièrement pratique pour le responsive (mais c'est un autre sujet). On peut aussi donner à certains éléments plus d'espace, ou les aligner différement des autres.",
          "codes": {
            "html": "<ul><li>Accueil</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "ul { display: flex; } li { flex-grow: 1; }"
          },
          "info": "Le code de l'exemple est très répandu : il permet de dire à chaque item de grandir en prenant une part de l'espace disponible. Ainsi, les 3 items vont chacun prendre un tiers de la largeur du parent. Vous trouverez souvent utilisée la propriété <code>flex</code>, qui est un raccourci pour définir en une seule ligne <code>flex-grow</code>, <code>flex-shrink</code> et <code>flex-basis</code>.",
          "links": [
            {
              "label": "Propriétés flexbox",
              "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
            }
          ],
          "codepen": "QZBryX",
          "question": {
            "text": "Quelle propriété utiliser à la place de <code>flex-grow</code> si on ne souhaite pas que les items prennent toute la largeur, mais aient une taille spécifique ? Cette propriété est donc l'équivalent de <code>width</code> en mode <code>row</code> ou de <code>height</code> en mode <code>column</code>.",
            "answer": "flex-basis",
            "clue": "b"
          },
          "figure": {
            "src": "https://designmodo.com/wp-content/uploads/2016/04/flexbox-css-social.jpg",
            "alt": "Une gallerie de photos",
            "caption": "Les galleries peuvent être réalisées grâce à <code>flexbox</code>, en faisant varier la propriété <code>flex-grow</code> pour donner plus d'espace à certains éléments."
          }
        },
        {
          "title": "Grid : flexbox au carré",
          "theory": "<code>flexbox</code> est très utile pour gérer le positionnement d'éléments sur un axe unique. Pour gérer la structure en deux dimensions d'un site, la spécification <code>grid</code> va nous prêter main forte. Elle permet de définir en CSS, une grille (sans utiliser des béquilles bientôt obsolètes telles que bootstrap), et de placer les éléments qu'elle contient à l'intérieur de cette grille. Comme <code>flexbox</code>, il faut pour l'utiliser structurer votre html avec un parent et plusieurs enfants.",
          "codes": {
            "html": "<body><div class=\"a\"></div><div class=\"b\"></div><div class=\"c\"></div><div class=\"d\"></div></body>",
            "css": "body { display: grid; grid-template-columns: 100px&nbsp;200px; grid-template-rows: 200px&nbsp;300px; } .a { grid-column: 1; grid-row: 1; } .b { grid-column: 2; grid-row: 1; } .c { grid-column: 1; grid-row: 2; } .d { grid-column: 2; grid-row: 2; }"
          },
          "info": "L'exemple de code ici présenté est inhabituel mais lisible si on le découpe bien. On définit d'abord que le <code>body</code> sera une grille avec deux colonnes (de 100px et 200px) et deux lignes (de 200px et 300px). Ensuite, on positionne chaque enfant dans la grille. Par exemple, l'élément de classe <code>.a</code> sera dans la première colonne, première ligne.",
          "links": [
            {
              "label": "Support navigateur",
              "url": "https://caniuse.com/#feat=css-grid"
            },
            {
              "label": "Tutoriel pas à pas",
              "url": "https://www.alsacreations.com/article/lire/1388-CSS3-Grid-Layout.html"
            },
            {
              "label": "Toutes les propriétés",
              "url": "https://css-tricks.com/snippets/css/complete-guide-grid/"
            }
          ],
          "codepen": "rqrqjd",
          "question": {
            "text": "Quelle est la propriété qui permet de définir l'espacement à laisser autour de chaque colonne et de chaque ligne d'une grille ?",
            "answer": "grid-gap",
            "clue": "i"
          },
          "figure": {
            "src": "https://herchel.com/static/firefox-grid-devtools-16dad2a34be0720e0a8aedb1d563d97b-e409e.png",
            "alt": "Une grille CSS observée avec l'inspecteur d'éléments de Google Chrome",
            "caption": "L'inspecteur d'élément permet de visualiser facilement une grille CSS. Essayez sur le codepen, ou sur l'élément de classe <code>.page</code> ici-même !"
          }
        },
        {
          "title": "Grid : mesures flexibles",
          "theory": "Dans la pratique, et contrairement à l'exemple précédent, les grilles sont rarement composées uniquement de valeurs fixes, car les environnement sont de taille variable. Quand on définit une grille, on peut utiliser les <code>px</code>, mais aussi le mot-clé <code>auto</code>, qui permettra à la grille de s'adapter au contenu. On peut aussi utiliser les fragments avec <code>fr</code> : comme avec <code>flexbox</code>, les fragments permettent de distribuer l'espace restant : si les 3 colonnes ont une largeur d'<code>1fr</code>, elle prendront chacune un tiers de la taille disponible. Notez enfin le mot-clé <code>repeat</code>, qui permet de générer plusieurs colonnes ou lignes sans avoir à se répéter.",
          "codes": {
            "css": "body { display: grid; grid-template-columns: 1fr&nbsp;1000px&nbsp;1fr; grid-template-rows: 200px&nbsp;repeat(3,&nbsp;500px); }"
          },
          "info": "La déclaration <code>grid-template-columns</code> se lit ainsi : une colonne de 1000px, entourée de deux colonnes remplissant l'espace restant (<code>1fr</code> chacune). On verra souvent cela pour créer un conteneur central de contenu, c'est d'ailleurs ce qui est fait sur ce site. La déclaration <code>grid-template-rows</code> se lit : une ligne de <code>200px</code>, puis 3 lignes de <code>500px</code>.",
          "links": [
            {
              "label": "Toutes les propriétés",
              "url": "https://css-tricks.com/snippets/css/complete-guide-grid/"
            }
          ],
          "codepen": "QZBJzY",
          "question": {
            "text": "Quel mot-clé permet de définir une colonne ou une ligne dont la taille varie entre un minimum et un maximum en s'adaptant à l'espace disponible ?",
            "answer": "minmax",
            "clue": "x"
          },
          "figure": {
            "src": "https://thedaylightstudio.com/assets/images/blog/grid-grid-smaller.gif",
            "alt": "Une grille CSS s'adaptant à la largeur du viewport",
            "caption": "Nous n'y sommes pas encore, mais des grilles utilisant les mesures flexibles sont le caviar des techniques responsives."
          }
        },
        {
          "title": "Grid : les zones nommées",
          "theory": "Jusqui'ici, on assigne nos éléments à des cases en spécifiant un numéro de colonne et un numéro de ligne. Mais, bien qu'il n'y ait pas de recommendation officielle sur la meilleure méthode, on peut aussi nommer les parties avec <code>grid-template-area</code> pour placer les éléments plus facilement avec <code>grid-area</code>.",
          "codes": {
            "html": "<body><div class=\"a\"></div><div class=\"b\"></div><div class=\"c\"></div></body>",
            "css": "body { display: grid; grid-template-columns: 100px&nbsp;200px; grid-template-rows: 200px&nbsp;300px; grid-template-areas: \"a&nbsp;a\" \"b&nbsp;c\"; } .a { grid-area: a; } .b { grid-area: b; } .c { grid-area: c; }"
          },
          "info": "Quand on déclare la valeur de <code>grid-template-areas</code>, chaque chaîne entre guillemets représente une ligne. Grâce à la déclaration de l'exemple, la balise de classe <code>a</code> saura se placer sur la première ligne de la grille, en s'étalant sur deux colonnes.",
          "links": [
            {
              "label": "Documentation MDN sur les zones nommées",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout/D%C3%A9finir_des_zones_sur_une_grille"
            }
          ],
          "codepen": "EdpMdV",
          "question": {
            "text": "Quelle propriété peut-on appliquer à un item de grille pour qu'il soit centré dans sa cellule (utile dans le cas où il ne fait pas toute la taille de cette dernière) ?",
            "answer": "place-self",
            "clue": "e"
          },
          "figure": {
            "src": "https://image.slidesharecdn.com/wceu-2017-cssgridexport-170616175947/95/css-grid-changes-everything-about-web-layouts-wordcamp-europe-2017-68-638.jpg?cb=1497682800",
            "alt": "L'utilisation de grid-template-areas",
            "caption": "Cette technique peut-être la base de nombreux designs."
          }
        }
      ]
    },
    {
      "title": "Responsive & Mobile First",
      "description": "Manipulation des media queries et autres bonnes pratiques pour réaliser des intégrations à toute épreuve face à l'imprévisible variété des terminaux client.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vRlK3Z39-Tk2IMYmGtoM4MyF3Ivp-NJpno2sVT42BpqJvDQZQ2fTKs-teRJu6qEO7yX4bNcenChHPa_/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "pixels",
        "text": "Vous ne connaîtrez jamais leur nombre exact sur l'appareil de votre cible. N'essayez pas de reproduire les maquettes au pixel près : ce sont des images fixes. Le viewport lui est un environnement à géométrie (très) variable, et votre mission et de tenir compte de cette fluidité du mieux possible."
      },
      "correctionVideoYoutubeId": "f3oRKzE9o_s",
      "concepts": [
        {
          "title": "Notre première media query",
          "theory": "Une <em>media query</em> permet d'appliquer un code CSS différent selon le contexte, par exemple selon la taille de l'écran. En suivant la méthode <em>Mobile First</em>, on décidera d'appliquer par défaut les propriétés qui seront interprétées sur des petits écrans, puis de changer ces propriétés quand l'écran dépasse une certaine largeur.",
          "codes": {
            "html": "<div>Je suis en bleu normalement, mais en rouge sur les grands écrans.</div>",
            "css": "div { color: blue; } @media (min-width: 1200px) { div { color: red; }}"
          },
          "warning": "Vous croiserez souvent la soeur de <code>min-width</code>, <code>max-width</code>, dans les exemples. C'est elle qu'on utilise lorsqu'on fait du <em>Responsive Retrofitting</em> (où l'on part des grands écrans pour aller vers les petits). C'est une technique qui s'avère moins efficace car le code le plus complexe concerne généralement les grands écrans, on préfère donc aller du plus petit au plus grand (Mobile First).",
          "links": [
            {
              "label": "Doc MDN sur les media queries",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/Requ%C3%AAtes_m%C3%A9dia/Utiliser_les_Media_queries"
            }
          ],
          "codepen": "WamwPm",
          "question": {
            "text": "Il existe une contrepartie à <code>min-width</code>, pour cibler les écrans faisant moins d'une certaine hauteur, laquelle ? Non, il n'y a pas de piège, c'est bien aussi simple que ce vous pensez.",
            "answer": "min-height",
            "clue": "e"
          },
          "figure": {
            "src": "https://d31v04zdn5vmni.cloudfront.net/blog/wp-content/uploads/2014/11/definingmobile-mediaquery.jpg",
            "alt": "Une media query ciblant les écrans.",
            "caption": "Vous verrez parfois précisé <code>@media screen</code> au début des media queries. Cela permet de confiner la condition aux écrans, en opposition à <code>print</code> ou <code>speech</code>. Sauf cas particulier, vous pouvez vous en passer."
          }
        },
        {
          "title": "Media queries à sélecteurs multiples",
          "theory": "Généralement, ce n'est pas un seul élément qui sera impacté par un changement de taille, mais plusieurs. On regroupera alors les règles dans une unique media query.",
          "codes": {
            "css": "h1 { font-weight: bold; } h2 { margin-bottom: 20px; } @media (min-width: 768px) { h1 { font-weight: normal; } h2 { margin-bottom: 40px; }} @media (min-width: 1280px) { h2 { margin-bottom: 60px; }}"
          },
          "info": "C'est une autre raison d'écrire des sélecteurs les plus simples possibles (juste une classe, dans la majeure partie des cas) : cela réduit les erreurs d'une media query à une autre.",
          "links": [
            {
              "label": "Exemples de designs responsives",
              "url": "https://mediaqueri.es/"
            }
          ],
          "codepen": "JmzbyX",
          "question": {
            "text": "En analysant le code de cette page de cette page avec les outils de développement de votre navigateur, pouvez-vous dire à partir de quelle largeur les blocs de code et les blocs \"À noter\" se placent en vis-à-vis ?",
            "answer": "1280px",
            "clue": "p"
          },
          "figure": {
            "src": "/img/responsive.png",
            "alt": "Le site vu sur mobile",
            "caption": "Sans <em>media queries</em>, pas de version mobile de ce merveilleux support de cours."
          }
        },
        {
          "title": "Media queries à plusieurs conditions",
          "theory": "Bien qu'une grande partie ne soit jamais utilisée, les media queries permettent de cibler de nombreuses spécifitées autres que la taille de l'écran. On combine différentes conditions avec le mot clé <em>and</em>.",
          "codes": {
            "css": "body { background-image: url(\"small.jpg\"); } @media (min-width: 768px) { body { background-image: url(\"medium.jpg\");}} @media (min-width: 768px) and (min-resolution: 192dpi) { body { background-image: url(\"large.jpg\"); }}"
          },
          "info": "En plus de <code>width</code> et <code>height</code>, sont parfois utilisée <code>aspect-ratio</code> (pour cibler certaines formes d'écran) <code>orientation</code> (landscape ou portrait) et <code>resolution</code> (pour cibler les écran Retina / Full HD, comme dans l'exemple). Les autres sont anecdotiques.",
          "links": [
            {
              "label": "Liste des media features",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/Requ%C3%AAtes_m%C3%A9dia/Utiliser_les_Media_queries#Caract%C3%A9ristiques_m%C3%A9dia_(media_features)"
            }
          ],
          "codepen": "wYOgEv",
          "question": {
            "text": "Le mot-clé <code>and</code> exige que les différentes conditions de l'expression soient remplies. Avec quels caractères peut-on cibler plusieurs conditions séparément, pourvu que l'une d'entre elles soit remplie ?",
            "answer": "virgules",
            "clue": "s"
          },
          "figure": {
            "src": "https://www.iab.com/wp-content/uploads/2017/11/Mobile_Video_Screen_Orientation.png",
            "alt": "Statistiques d'orientation des appareils mobiles",
            "caption": "Les appareils mobiles et plus particulièrement les tablettes seront amenées à pivoter, vous obligeant parfois à adapter votre contenu (bien que souvent <code>min-width</code> suffise !)"
          }
        },
        {
          "title": "Media queries & flexbox",
          "theory": "C'est combinées aux techniques de layout que les media queries prennent tout leur intérêt. Il est très fréquent de voir des éléments disposés les uns sous les autres en mobile se placer en ligne lorsque la place leur permet. Les menus sont un exemple courant de ce comportement.",
          "codes": {
            "html": "<ul><li>Présentation</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "@media (min-width: 768px) { ul { display: flex; justify-content: space-between; }}"
          },
          "info": "Vous comprenez peut-être ici pourquoi on part d'une intégration mobile vers une intégration plus large : si on partait du desktop, il faudrait de base définir <code>display: flex</code>, et ensuite annuler ce comportement avec <code>display: block</code> pour les écrans plus petits. En codant en <em>Mobile First</em>, on tire parti du fait que le layout se complexifie généralement avec la taille de l'écran, et non l'inverse.",
          "links": [
            {
              "label": "Flexbox Cheat Sheet",
              "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
            }
          ],
          "codepen": "OBGWbB",
          "question": {
            "text": "Quelle propriété utiliser sur un conteneur flex pour permettre à ses enfants de revenir à la ligne plutôt que de s'écraser ?",
            "answer": "flex-wrap",
            "clue": "l"
          },
          "figure": {
            "src": "https://thedaylightstudio.com/assets/images/blog/flexbox-grid-smaller.gif",
            "alt": "Un conteneur flexbox réagissant à la taille du viewport",
            "caption": "Une fois que vous savez faire ça, tout devient possible !"
          }
        },
        {
          "title": "Media queries & grid",
          "theory": "De la même façon qu'avec <em>flexbox</em>, la combinaison des media queries et de <em>grid</em> va nous permettre de faire évoluer la mise en page d'une taille d'écran à une autre.",
          "codes": {
            "html": "<body><div class=\"a\"></div><div class=\"b\"></div><div class=\"c\"></div></body>",
            "css": "@media (min-width: 900px) {body { display: grid; grid-template-columns: 1fr&nbsp;2fr; grid-template-rows: repeat(2,&nbsp;auto); grid-template-areas: \"a&nbsp;a\" \"b&nbsp;c\"; } .a { grid-area: a; } .b { grid-area: b; } .c { grid-area: c; }}"
          },
          "warning": "Contrairement au code de l'exemple, nommez vos zones avec des termes sémantiques, c'est à dire qui désignent la fonction de l'élément (header, main, list, menu...). Comme pour les classes.",
          "links": [
            {
              "label": "Grid Cheat Sheet",
              "url": "https://css-tricks.com/snippets/css/complete-guide-grid/"
            }
          ],
          "codepen": "wYZpKB",
          "question": {
            "text": "Quel caractère utiliser dans la propriété <code>grid-template-areas</code> si on souhaite laisser une cellule vide ?",
            "answer": "point",
            "clue": "i"
          },
          "figure": {
            "src": "https://mdn.mozillademos.org/files/14755/11-grid-inspector-12col-layout.png",
            "alt": "Une grille analysée avec les outils de développement",
            "caption": "N'oubliez pas que vous pouvez analyser les grilles de votre page avec les outils de développement. Cela est indispensable pour mettre en évidence les erreurs possibles."
          }
        },
        {
          "title": "Trouver les bons breakpoints",
          "theory": "Un <em>breakpoint</em> (point de rupture) est une taille à laquelle le contenu du site ou une partie de ce contenu change d'apparence (autrement dit, les dimensions utilisées dans les media queries). On ne sait pas toujours quelle taille utiliser, car les appareils ont des tailles très variées. 768px, 1024px, 1280px ? Il n'y a pas de bonne réponse : laisser votre contenu dicter vos media queries, et non l'inverse. Ne vous imposez pas des breakpoints avant d'intégrer, les contraintes que vous rencontrerez les révèleront progressivement.",
          "info": "Généralement, un site compte un, deux ou trois breakpoints majeurs (ré-organisation du layout global). Mais il peut y avoir en plus des breakpoints secondaires, qui ne concernent qu'une section en particulier. L'important est l'harmonie du site à toutes les tailles.",
          "links": [
            {
              "label": "Les innombrables tailles d'écrans",
              "url": "http://screensiz.es/"
            }
          ],
          "codepen": "VENxaV",
          "figure": {
            "src": "/img/breakpoints.png",
            "alt": "Start with the small screen first, then expand until it looks like shit. Time for a breakpoint !"
          }
        },
        {
          "title": "Les unités vw & vh",
          "theory": "Au-delà des media queries, faire un site responsive c'est aussi utiliser les unités qui permettent de s'adapter à la taille du viewport. Par exemple, <code>1vw</code> et <code>1vh</code> équivalent respectivement à 1 centième de la largeur et de la hauteur du viewport. Ainsi, la mesure <code>100vh</code> représente la totalité de la hauteur du viewport.",
          "codes": {
            "html": "<div class=\"hero\">Je prends toute la taille disponible !</div>",
            "css": ".hero { width: 100vw; height: 100vh; }"
          },
          "info": "Les blocks prenant 100% de la largeur disponible par défaut, le <code>100vw</code> de l'exemple est en réalité superflu. Pour les hauteurs en revanche, c'est beaucoup moins simple et il est bien pratique d'avoir accès à cette unité.",
          "links": [
            {
              "label": "La difficulté avec height",
              "url": "https://la-cascade.io/pourquoi-height-100-ne-marche-pas/"
            }
          ],
          "codepen": "KGYeeG",
          "question": {
            "text": "Quelle unité représente 1 centième du côté le plus grand du viewport ? (par exemple, sur un écran de 800*600, un centième de 800)",
            "answer": "vmax",
            "clue": "x"
          },
          "figure": {
            "src": "https://www.yunbitsoftware.com/blog/wp-content/uploads/2017/06/imagen2-vh.png",
            "alt": "La mesure 100vh utilisée sur différents appareils",
            "caption": "La mesure <code>100vh</code> est régulièrement utilisée pour faire référence à la hauteur du viewport.S"
          }
        }
      ]
    },
    {
      "title": "Transitions & Animations CSS",
      "description": "Utiliser les fonctionnalités du CSS pour effectuer des transitions fluides et des animations plus complexes.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vQVdYR6AlPe-T8nu0FUShzORZIDPl6yGp_9hVxtY_nVy7AMkdHjou4E4Sfu7IeSxQ9Ew6VtkqhEQCYE/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "repaint",
        "text": "Un <em>repaint</em> est l'opération effectuée par un navigateur lorsqu'il doit \"repeindre\", c'est à dire rendre visuellement un élément à nouveau. C'est ce qu'il se passe de nombreuses fois par seconde lorsqu'on utilise les transitions et les animations, et cela est coûteux en performance sur certains terminaux, alors attention à ne pas en abuser !"
      },
      "correctionVideoYoutubeId": "",
      "concepts": [
        {
          "title": "Une première transition",
          "theory": "Pour chaque élément, vous pouvez définir en CSS lesquelles de ses propriétés devront transitionner avec la propriété <code>transition</code>. Dès que la propriété concernée changera, elle le fera en respectant la transition demandée. On précise d'abord quelle propriété est concernée, puis combien de temps doit prendre la transition.",
          "codes": {
            "html": "<div>Je grandis quand je suis survolée</div>",
            "css": "div { width: 200px; transition: width&nbsp;0.5s; } div:hover { width: 300px; }"
          },
          "warning": "Notez bien que la propriété <code>transition</code> se place dans le sélecteur CSS concernant l'état initial de l'élémenent concerné, pas au moment où la transition s'applique. Autrement dit, on \"prépare\" la transition à venir.",
          "links": [
            {
              "label": "Introduction aux transitions",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Transitions/Utiliser_transitions_CSS"
            }
          ],
          "codepen": "xQxPVy",
          "question": {
            "text": "La propriété <code>animation</code> est une propriété raccourcie (tout comme <code>background</code> est en fait un raccourci permettant de définir <code>background-image</code>, <code>background-color</code>...). Quel est le nom de la propriété permettant spécifiquement de définir la durée de la transition ?",
            "answer": "transition-duration",
            "clue": "i"
          },
          "figure": {
            "src": "https://cdn-images-1.medium.com/max/1000/1*0bES0_PCswamMscW-uUuYg.gif",
            "alt": "Les valeurs de transition souvent utilisées sur le web",
            "caption": "L'animation sur le web va vite : on compte souvent en dixièmes de secondes. C'est le meilleur compris entre visuel et réactivité pour les utilisateurs."
          }
        },
        {
          "title": "Le timing de la transition",
          "theory": "À ne pas confondre avec la durée de la transition, le <em>timing</em> détermine la répartition temporelle des étapes de la transition (rapide au début et lent à la fin, par exemple). Il est le troisième paramètre de la propriété <code>transition</code> et vaut par défaut <code>ease</code>, ce qui est adapté à la plupart des cas. Mais il est parfois utile de le modifier.",
          "codes": {
            "css": "div { width: 200px; transition: width&nbsp;0.5s&nbsp;cubic-bezier(.29,&nbsp1.01,&nbsp1,&nbsp-0.68); } div:hover { width: 300px; }"
          },
          "info": "L'instruction <code>cubic-bezier</code> permet de définir des timing customisés. Heureusement, les mots-clés disponibles (<code>ease</code>, <code>linear</code>...) nous évitent d'avoir à utiliser cela sauf cas particulier. Par exemple, <code>linear</code> correspond à <code>cubic-bezier(0, 0, 1, 1)</code>.",
          "links": [
            {
              "label": "Visualisation des timings possibles",
              "url": "https://cssreference.io/property/transition-timing-function/"
            },
            {
              "label": "Générateur de cubic-bezier",
              "url": "http://cubic-bezier.com"
            }
          ],
          "codepen": "dQyJYM",
          "question": {
            "text": "Quel mot clé permet d'avoir une transition non pas continue, mais s'effectuant en un nombre fini d'étapes ?",
            "answer": "steps",
            "clue": "p"
          },
          "figure": {
            "src": "https://static.commonlounge.com/fp/600w/DR4iAGakwKWanzAqAZrSE7Y091530232546_kc",
            "alt": "Comparaison de différent timing de transition",
            "caption": "<code>ease</code> est la valeur par défaut et fera souvent l'affaire, mais il est toujours intéressant d'essayer d'autres effets."
          }
        },
        {
          "title": "Décaler le départ d'une transition",
          "theory": "Par défaut, les transitions sont immédiates. Mais il est possible de leur ajouter un délai qui précédera leur déclanchement. C'est le quatrième paramètre de la propriété <code>transition.</code>",
          "codes": {
            "css": "div { width: 200px; transition: width&nbsp;0.5s&nbsp;ease&nbsp;1s; } div:hover { width: 300px; }"
          },
          "warning": "Si vous voulez simplement modifier le décalage de transition d'un élément dont la transition est déjà définie par un autre sélecteur, utilisez la propriété <code>transition-delay</code> directement, plutôt que de redéfinir les 4 paramètres à chaque fois.",
          "links": [
            {
              "label": "La propriété transition-delay",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/transition-delay"
            }
          ],
          "codepen": "bQGaKx",
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2016/08/start-stop1b.gif",
            "alt": "Des éléments animés en CSS avec un délai différent",
            "caption": "<code>transition-delay</code> est indispensable pour réaliser ce genre d'effet."
          }
        },
        {
          "title": "Animer plusieurs propriétés en même temps",
          "theory": "Comment animer l'opacité et la taille d'un élément simultanément ? Il suffit de déclarer une animation pour chaque propriété, en les séparant par des virgules.",
          "codes": {
            "html": "<div>Au survol, ma hauteur, ma largeur et mon opacité transitionnent, chacune avec leurs paramètres spécifiques.</div>",
            "css": "div { width: 200px; height: 200px; opacity: 0.5; transition: width&nbsp;0.5s,&nbsp;height&nbsp;0.5s,&nbsp;opacity&nbsp;0.3s&nbsp;linear; } div:hover { width: 300px; height: 300px; opacity: 1; }"
          },
          "info": "Si toutes les propriétés concernés ont la même durée, le même timing ou le même décalage, il peut être intéressant d'utiliser les propriétés spécifiques plutôt que de répéter ces informations pour chaque propriété.",
          "codepen": "xQxYgL",
          "question": {
            "text": "Un mot clé permet de faire transitionner toutes les propriétés d'un élément à la fois, lequel ? On évite cependant de l'utiliser pour éviter les effets secondaires et ne pas dégrader la performance de le page.",
            "answer": "all",
            "clue": "a"
          },
          "figure": {
            "src": "https://i.pinimg.com/originals/83/b9/5b/83b95b986e8d940031de5c2624da3537.gif",
            "alt": "Une transition CSS complexe",
            "caption": "Un savant mélange de transitions (certaines retardées) sur différentes propriétés de l'élément survolé et de ses enfants."
          }
        },
        {
          "title": "Transition déclenchées par JavaScript",
          "theory": "Toutes les transitions ne sont pas déclenchées par un survol, loin de là. On utilisera souvent JavaScript pour écouter un événement (scroll, click...) et manipuler des classes pour permettre au CSS de réagir en conséquence.",
          "codes": {
            "html": "<div id=\"element\">Cliquez sur moi pour que je devienne bleu</div>",
            "css": "div { background-color: yellow; transition: background-color&nbsp;0.3s; } .is-clicked { background-color: blue; }",
            "js": "document<br/>&nbsp;&nbsp;.getElementById('element')<br/>&nbsp;&nbsp;.addEventListener('click', function(e) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;e.target.classList.add('is-clicked');<br/>&nbsp;&nbsp;});"
          },
          "info": "Que fait le JavaScript de ce code ? Lorsqu'on clique sur la div ayant l'id <code>element</code>, il ajoute à l'élement en question (<code>e.target</code>) la classe <code>is-clicked</code>. Cela permet au CSS de faire une modification, avec la transition associée.",
          "links": [
            {
              "label": "Écouter des événements en JS",
              "url": "https://www.w3schools.com/jsref/met_element_addeventlistener.asp"
            }
          ],
          "codepen": "pQoLPW",
          "question": {
            "text": "Quel événement peut-on écouter en JavaScript pour produire le même effet que le sélecteur CSS <code>:hover</code> ?",
            "answer": "mouseover",
            "clue": "e"
          },
          "figure": {
            "src": "http://developer.telerik.com/wp-content/uploads/2016/09/scrollreveal_basic_opt.gif",
            "alt": "Un élément apparaissant lorsqu'il entre dans le viewport",
            "caption": "On peut mener ça loin, mais la logique de base reste toujours la même. Ici, lorsque l'entreé de l'élément dans le viewport est détéctée par le JavaScript, une classe est ajoutée qui permet au CSS d'effectuer une transition d'apparition."
          }
        },
        {
          "title": "La propriété transform ",
          "theory": "Avant de passer aux transitions, un petit aparté sur la propriété <code>transform</code>. À elle seule, elle permet de modifier l'aspect d'un élément de nombreuses façon : modification de la taille, translation, rotation, déformation... C'est <em>la</em> propriété à utiliser dès que possible, d'autant plus qu'elle est optimisée pour les performances d'affichage. Bonus : les éléments sont transformés sans impact sur le flux des éléments de la page (autrement dit, ça ne fait pas bouger les éléments alentours), ce qui serait très problématique dans le cas contraire.",
          "codes": {
            "html": "<div>Transformez-moi !</div>",
            "css": "div { transform: translateY(50px) scale(1.2) rotate(45deg); }"
          },
          "info": "Il n'y a pas de propriétés individuelles pour <code>translate</code>, <code>scale</code>... toutes les transformations doivent être chaînées dans la même déclaration <code>transform</code>.",
          "links": [
            {
              "label": "La propriété transform",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/transform"
            }
          ],
          "codepen": "eQNJOK",
          "figure": {
            "src": "http://nikpro.com.au/wp-content/uploads/2018/07/css-transform.png",
            "alt": "Un exemple de transformation CSS 3D",
            "caption": "On peut aussi gérer de la 3D avec les transformations. Quelle que soit la transformation appliquée, ce n'est qu'une modification visuelle : du point de vue du flux, l'élément n'a changé ni de taille ni de position."
          }
        },
        {
          "title": "Une animation CSS simple",
          "theory": "Les transitions CSS ne peuvent pas gérer tous les cas, notamment si on souhaite animer un élément sans qu'un événement extérieur ne vienne changer ses propriétés : autrement dit, si on souhaite qu'il soit animé par nature plutôt que par les circonstances. Comme avec les blocs <code>@font-face</code>, on peut déclarer une ou plusieurs animations en haut de notre code avec un bloc <code>@keyframes</code>. Ce bloc décrit les états successivement appliqués à l'élément qui les recevra grâce à la propriété <code>animation</code>. Comme avec les animations, le deuxième paramètre est la durée prise.",
          "codes": {
            "html": "<div>Je me déplace vers la droite en 5 secondes !</div>",
            "css": "@keyframes&nbsp;move-to-right { from { transform: translateX(0); } to { transform: translateX(500px); }} div { animation: move-to-right&nbsp;5s; }"
          },
          "warning": "<code>from</code> et <code>to</code> correspondent respectivement à l'état de début et de fin de l'animation. En réalité, <code>from</code> est inutile dans cet exemple, car l'élément a déjà une translation horizontale de 0 pixel, autrement dit son état normal. Quand on part de l'état normal pour aller vers un autre état, on peut donc simplement utiliser le bloc <code>to</code>. À l'inverse, on peut utiliser le bloc <code>from</code> uniquement si on part d'un état différent pour revenir à l'état initial.",
          "links": [
            {
              "label": "La propriété raccourcie animation",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/animation"
            }
          ],
          "codepen": "xQxYgL",
          "question": {
            "text": "Quel est le nom complet de la propriété qui permet de jouer l'animation un nombre spécifique de fois, ou bien à l'infini ?",
            "answer": "animation-iteration-count",
            "clue": "t"
          },
          "figure": {
            "src": "https://projects.lukehaas.me/css-loaders/screenshot.gif",
            "alt": "Différents indicateurs d'activité",
            "caption": "Les indicateurs d'activité (<em>throbber</em> en anglais) sont un exemple courant d'animations perpétuelles."
          }
        },
        {
          "title": "Délai et timing des animations",
          "theory": "Les animations ont beaucoup en commun avec les transitions, notamment le fait de pouvoir prendre une fonction de timing et un délai avant le déclanchement, respectivement en 3e et 4e paramètres.",
          "codes": {
            "html": "<div>Je me déplace vers la droite en 5 secondes !</div>",
            "css": "@keyframes&nbsp;move-to-right { from { transform: translateX(0); } to { transform: translateX(500px); }} div { animation: move-to-right&nbsp;5s&nbsp;cubic-bezier(.29,&nbsp1.01,&nbsp1,&nbsp-0.68)&nbsp;1s; }"
          },
          "info": "Comme toujours, vous pouvez utiliser directement des propriétés spécifiques si besoin, ici <code>animation-timing-function</code> et <code>animation-delay</code>.",
          "links": [
            {
              "label": "Visualisation des timings possibles",
              "url": "https://cssreference.io/property/transition-timing-function/"
            },
            {
              "label": "Générateur de cubic-bezier",
              "url": "http://cubic-bezier.com"
            }
          ],
          "codepen": "vQEPro",
          "question": {
            "text": "Quel <em>timing function</em> représente un départ progressif et une arrivée brusque ?",
            "answer": "ease-in",
            "clue": "n"
          },
          "figure": {
            "src": "http://www.desarrollolibre.net/public/images/example/css/letra/letras_animacion.gif",
            "alt": "Un effet CSS utilisant les délais d'animation",
            "caption": "Les délais peuvent servir à décaler les points de démarrage de différents constituants d'une animation plus vaste."
          }
        },
        {
          "title": "Ajouter des images clés",
          "theory": "Lorsqu'on utilise des transitions CSS, on contrôle le départ et l'arrivée, mais pas ce qui se passe entre les deux. Les animations nous permettent de définir des images clés, étapes par lesquelles devront passer les éléments animés, plutôt que d'effectuer une transition directe. Cela permet d'obtenir des effets beaucoup plus complexes.",
          "codes": {
            "html": "<div>Je me déplace d'abord vers la droite, puis vers le bas... Avec une transition, je me déplacerai directement en diagonale.</div>",
            "css": "@keyframes&nbsp;right-and-down { 50% { transform: translateX(300px); } to { transform: translate(300px,&nbsp;200px); }} div { animation: right-and-down&nbsp;5s; }"
          },
          "warning": "La propriété <code>transform</code> est puissante, mais elle nous oblige à combiner les différentes valeurs que l'on souhaite appliquer. Dans l'exemple, on a du préciser dans la deuxième étape <code>translate(300px, 200px)</code> pour ne pas perdre la translation préalablement effectuée sur l'axe X.",
          "links": [
            {
              "label": "Quelques exemples impressionnants",
              "url": "https://codeburst.io/html-css-and-javascript-10-awesome-codepens-to-inspire-you-420bbde87be1"
            }
          ],
          "codepen": "jQPEoQ",
          "figure": {
            "src": "https://s3.amazonaws.com/media-p.slid.es/uploads/174419/images/2582937/husky.gif",
            "alt": "Un chien animé avec les animations CSS",
            "caption": "Il y a les personnes qui font des gifs. Et puis il y a les personnes qui font tout avec des transformations CSS."
          }
        },
        {
          "title": "Animations déclenchées par JavaScript",
          "theory": "Similairement aux transitions, les animations peuvent être appliquées à un moment précis grâce à l'utilisation de JavaScript.",
          "codes": {
            "html": "<div id=\"element\">Cliquez sur moi pour que je tourne sur moi-même.</div>",
            "css": "@keyframes&nbsp;rotate { to { transform: rotate(360deg); } } .is-clicked { animation: rotate&nbsp;1s; }",
            "js": "document<br/>&nbsp;&nbsp;.getElementById('element')<br/>&nbsp;&nbsp;.addEventListener('click', function(e) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;e.target.classList.add('is-clicked');<br/>&nbsp;&nbsp;});"
          },
          "warning": "N'oubliez pas de n'utiliser les animations que si les transitions ne sont pas suffisantes, par soucis de simplicité !",
          "links": [
            {
              "label": "Écouter des événements en JS",
              "url": "https://www.w3schools.com/jsref/met_element_addeventlistener.asp"
            }
          ],
          "codepen": "KrpzaL",
          "question": {
            "text": "Quel événement observable sur l'objet <code>window</code> permet d'éxécuter une action lorsque la fenêtre du navigateur est redimensionnée ?",
            "answer": "resize",
            "clue": "r"
          }
        }
      ]
    }
  ],
  "twitterAccounts": [
    {
      "name": "CSS-Tricks",
      "id": "css",
      "avatarUrl": "https://pbs.twimg.com/profile_images/546011298627334146/MAeF2-yK_bigger.jpeg"
    },
    {
      "name": "CodyHouse",
      "id": "CodyWebHouse",
      "avatarUrl": "https://pbs.twimg.com/profile_images/972778766782140417/DzxuGyE0_bigger.jpg"
    },
    {
      "name": "A List Apart",
      "id": "alistapart",
      "avatarUrl": "https://pbs.twimg.com/profile_images/478913945475235840/Jv1mMBOA_bigger.jpeg"
    },
    {
      "name": "Friday Front-End",
      "id": "fridayfrontend",
      "avatarUrl": "https://pbs.twimg.com/profile_images/975219464823226369/eCIsZNgo_bigger.jpg"
    },
    {
      "name": "Shashing Magazine",
      "id": "smashingmag",
      "avatarUrl": "https://pbs.twimg.com/profile_images/1014194982499078145/ScpR-ujV_bigger.jpg"
    },
    {
      "name": "Luke Wroblewski",
      "id": "lukew",
      "avatarUrl": "https://pbs.twimg.com/profile_images/477610446917103616/_cjU3_ga_bigger.png"
    },
    {
      "name": "HTeuMeuLeu",
      "id": "HteuMeuLeu",
      "avatarUrl": "https://pbs.twimg.com/profile_images/876098522155712514/U5EX5vLT_bigger.jpg"
    },
    {
      "name": "Programming Wisdom",
      "id": "CodeWisdom",
      "avatarUrl": "https://pbs.twimg.com/profile_images/705003311083229184/qTBCIxpk_bigger.jpg"
    }
  ]
}
