{
  "title": "HTML/CSS",
  "chapters": [
    {
      "title": "Introduction aux balises",
      "description": "Découverte du HTML, le langage de base des pages web, et des balises principales qui le constituent.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vT-yctmKbXxKrLaLxbQwOdvmIFTGM_iXgmopeakGyAuC5MWbXa3dd5DaP6ATM6RDBRrL5myUkhyZpEH/pub?start=true&loop=false&delayms=60000000",
      "puzzle": {
        "word": "semantic",
        "text": "La sémantique (<i>semantic</i> en anglais) est la pratique visant à donner le maximum de signification au code constituant notre page web. On ne se soucie pas seulement de ce que l'utilisateur verra au final, mais aussi de ce que le navigateur reçoit comme code. Plus la sémantique du code est précise, mieux le code pourra être interprété dans différents contextes : navigation classique, référencement par les moteurs de recherche, navigation à l'aide d'une technologie d'assistance..."
      },
      "correctionVideoYoutubeId": "e1_r2MWtAIs",
      "concepts": [
        {
          "title": "Notre première balise",
          "theory": "Le contenu d'une page web est organisé dans des balises. La plupart des balises sont constituées d'un tag ouvrant, de leur contenu, puis du tag fermant correspondant.",
          "codes": {
            "html": "<p>Texte dans un paragraphe. Un paragraphe est représenté par la balise p en HTML.</p>"
          },
          "warning": "Ne laissez pas du contenu en dehors d'une balise. Il s'affichera quand même, mais sera difficilement manipulable par la suite.",
          "links": [
            {
              "label": "Liste de tous les éléments HTML existant",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element"
            }
          ],
          "codepen": "Pdreva",
          "question": {
            "text": "Le monde du code est très largement dominé par l'anglais, et votre code devrait toujours être écrit dans cette langue, par convention (et pour partager une langue universelle avec vos collègues de toutes les contrées). D'ailleurs, quel est le mot pour <em>balise</em> en anglais ?",
            "answer": "tag",
            "clue": "t"
          }
        },
        {
          "title": "Les titres",
          "theory": "Du <code>h1</code> au <code>h6</code>, les titres permettent d'introduire de manière hiérarchisée les différentes parties d'une page. <code>h1</code> représente le titre principal du document, puis les <code>h2</code> les titres de second niveau, et ainsi de suite...",
          "codes": {
            "html": "<h1>Je suis le titre de ce document</h1><h2>Première partie</h2><p>Contenu de la première partie</p><h2>Deuxième partie</h2><h3>Sous-partie 1</h3><p>Etc...</p>"
          },
          "info": "La convention veut que l'on utilise qu'un seul <code>h1</code> par page, principalement pour des raisons historiques de référencement. Pas de limite sur les autres !",
          "links": [
            {
              "label": "Documentation approfondie sur les titres",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/Heading_Elements"
            }
          ],
          "codepen": "XxWxOJ",
          "question": {
            "text": "Jetez un oeil en haut de cette page. Ici, le titre principal (\"HTML/CSS\") est contenu dans un <code>h1</code>, et le sous-titre (\"Introduction aux balises\") dans un <code>h2</code>. C'est bien joli tout ça, mais que signifie le h ?",
            "answer": "heading",
            "clue": "n"
          },
          "figure": {
            "src": "https://s3-ap-southeast-1.amazonaws.com/openeschool-uploads/Open_2/Open5013f58a-77e3-45ad-b4b0-09aa1d34a9dc.png",
            "alt": "6 balises de titres allant du h1 au h6",
            "caption": "Vous l'avez remarqué : les navigateurs appliquent automatiquement un style (taille) différent selon l'importance du titre."
          }
        },
        {
          "title": "Structurer un document",
          "theory": "Bien d'autres éléments concourent à la structuration d'un document. 99% des sites comportent au moins un <code>header</code> (en-tête, dans lequel on trouve au moins un titre) et un <code>footer</code> (pied-de-page). La balise <code>main</code> quant à elle permet de désigner le contenu principal du document.",
          "codes": {
            "html": "<header><h1>Bienvenue sur mon site !</h1></header><main>Le contenu principal...</main><footer>Merci d'être passé !</footer>"
          },
          "info": "Vous avez sans doute remarqué en passant qu'on peut imbriquer une balise dans une autre. Ici, un titre de niveau 1 au sein du <code>header</code>.",
          "links": [
            {
              "label": "Les balises structurelles",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element#Sectionnement_du_contenu"
            }
          ],
          "codepen": "yRLwra",
          "question": {
            "text": "Sur cette page, chaque concept (par exemple \"Structurer un document\") se trouve dans une balise <code>article</code>. En effet, ce sont des contenus indépendants, qui ont du sens à eux seul. Dans quel balise est-il logique d'avoir placé les encarts \"À noter\" ?",
            "answer": "aside",
            "clue": "i"
          },
          "figure": {
            "src": "https://uploads.siteduzero.com/files/343001_344000/343677.png",
            "alt": "La structure HTML5 d'un site",
            "caption": "Exemple de représentation d'un site et des balises HTML5 qui le composent. Un schéma à réaliser chaque fois que abordez un projet ou analysez un site existant."
          }
        },
        {
          "title": "L'indentation : elle peut sauver des vies",
          "theory": "Ce n'est pas drôle, mais c'est vital pour n'importe quel type de code : l'indentation, soit le fait d'espacer vers la droite les balises qui sont incluses dans une autre balise. Astuce : une balise fermante se trouve verticalement \"en face\" de sa balise ouvrante correspondante (sauf pour les balises qui tiennent sur une seule ligne).",
          "codes": {
            "html": "<section><h2>2 espaces d'indentation</h2><article><p>Puis 4, etc...</p></article></section>"
          },
          "warning": "Indentez avec des caractères \"espace\" et pas des vraies tabulations. C'est un vieux débat, mais les espaces produiront un code plus robuste. Heureusement, la plupart des éditeurs de code vous simplifieront la tâche.",
          "codepen": "qJBzpP",
          "figure": {
            "src": "/img/indentation.jpg",
            "alt": "Comparaison d'un code mal indenté et d'un code bien indenté",
            "caption": "Lire un code mal indenté peut nuire à votre santé et à celle de votre entourage."
          }
        },
        {
          "title": "Les balises auto-fermantes",
          "theory": "Jusqu'ici, toutes nos balises contiennent soit du texte, soit d'autres balises. Mais certaines balises ne contiennent rien. C'est par exemple le cas de la balise de retour à la ligne, <code>br</code>, qui se ferme à l'instant même où elle s'ouvre. Le slash de fermeture est optionnel.",
          "codes": {
            "html": "<p>Un vieil étang,<br/>Une grenouille qui plonge,<br/>Le bruit de l'eau.</p><p>Haïku de Bashō</p>"
          },
          "info": "La balise <code>br</code> est utile lorsqu'un retour à la ligne a du sens au sein d'un même paragraphe (ici, un poème). Elle est nécessaire car un retour à la ligne dans le code source sera ignoré par le navigateur.",
          "codepen": "yRygbL",
          "question": {
            "text": "Les navigateurs implémentent une spécification précise d'HTML, si possible la plus récente, qui nous dit quelles balises existent et comment les utiliser. Quelle est la version présentée en 2014 est encore utilisée aujourd'hui ?",
            "answer": "html5",
            "clue": "m"
          }
        },
        {
          "title": "Les listes",
          "theory": "Les listes sont un des éléments les plus courants dans un site. Elles sont constituées d'une balise <code>ul</code> (<i>unordered list</i>) ou <code>ol</code> (<i>ordered list</i>) et d'autant de balises <code>li</code> qu'il y a d'items.",
          "codes": {
            "html": "<nav><ul><li>Présentation</li><li>Compétences</li><li>Expériences</li></ul></nav>"
          },
          "warning": "Les listes servent souvent à déclarer un menu. Il faut alors placer la liste dans une balise <code>nav</code>, une autre balise structurelle qui permet au navigateur de savoir qu'il s'agit d'un moyen de naviguer sur le site.",
          "links": [
            {
              "label": "Exemples variés de listes",
              "url": "https://html.com/lists/"
            }
          ],
          "codepen": "NOPgQW",
          "question": {
            "text": "Vrai ou faux ? On peut inclure une liste dans une autre, mais il faut qu'elle soit du même type (<code>ul</code> au sein d'une <code>ul</code>, <code>ol</code> au sein d'une <code>ol</code>)",
            "answer": "faux",
            "clue": "a"
          },
          "figure": {
            "src": "https://webdesy.com/webdesy-wp/wp-content/uploads/2012/02/html-list-3.jpg",
            "alt": "Une liste d'action à effectuer",
            "caption": "Un autre exemple de liste dont l'ordre des items est important : une liste d'actions à effectuer en respectant un processus."
          }
        },
        {
          "title": "Créons du lien",
          "theory": "Les <em>attributs</em> procurent de nouveaux pouvoirs aux éléments HTML. On les place au sein de la balise d'ouverture. Une balise <code>a</code> seule n'a aucun effet, mais avec un attribut <code>href</code>, elle permet de créer un lien !",
          "codes": {
            "html": "<p>Voici un lien externe vers <a href=\"https://www.w3.org/\">le site du W3C</a>. En cliquant, vous sortirez de la page.</p><p>Et voici un lien vers une <a href=\"#hello\">section interne à ce document</a>. En cliquant, vous descendrez sur la page.</p><article id=\"hello\">Hello World!</a>"
          },
          "info": "Analysez bien la différence entre les deux liens de l'exemple. Dans le premier, <code>href</code> contient une adresse complète (autre page web). Dans le second, grâce au <code>#</code>, il redirige vers l'élément <em>de la même page</em> possédant l'attribut <code>id</code> correspondant.",
          "links": [
            {
              "label": "Documentation sur les liens",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/a"
            }
          ],
          "codepen": "dgPZYW",
          "question": {
            "text": "Il est possible de contrôler si l'ouverture du lien remplacera l'onglet actuel (on perd donc la page courante, c'est le comportement par défaut) ou si elle s'ouvrira dans un nouvel onglet. Quel est l'attribut à utiliser dans ce but ?",
            "answer": "target",
            "clue": "e"
          },
          "figure": {
            "src": "https://www.computerhope.com/jargon/h/html-tag.gif",
            "alt": "Schéma d'un tag HTML",
            "caption": "<code>href</code> est un des attributs de la balise <code>a</code>. Vous savez désormais écrire une balise HTML entière."
          }
        },
        {
          "title": "Les balises de texte",
          "theory": "HTML nous permet d'enrichir les textes avec des balises ayant chacune un sens spécifique. Les utiliser aide le navigateur à comprendre le contenu et nous permettra ensuite de styliser certains passages pour les faire ressortir.",
          "codes": {
            "html": "Ce mot est placé en <em>emphase</em>, pour qu'on le remarque. Et celui-ci est super <strong>important !!!</strong>"
          },
          "warning": "Le navigateur met par défaut les <code>em</code> en italique et les <code>strong</code> en gras. Mais ce n'est pas une fatalité, on peut très bien décider de présenter notre texte autrement. Il ne faut pas confondre le sens, qu'on donne avec les balises, et l'apparence.",
          "links": [
            {
              "label": "Sémantique du texte en ligne",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element#S%C3%A9mantique_du_texte_en_ligne"
            }
          ],
          "codepen": "bmNXPB",
          "question": {
            "text": "Quelle est la balise dans laquelle ont été logiquement placés les exemples de HTML sur cette page ?",
            "answer": "code",
            "clue": "c"
          }
        },
        {
          "title": "Ça manque d'images...",
          "theory": "Les pages web regorgent de médias, et les images (jpeg, png, gif, svg...) en représentent une grande partie. Elles sont insérées facilement avec une balise <code>img</code> (auto-fermante) contenant un attribut <code>src</code>. Pour la gestion de la taille, ce sera plus tard !",
          "codes": {
            "html": "<img src=\"https://www.placecage.com/300/200\" alt=\"Nicolas Cage avec une moustache\" />"
          },
          "warning": "N'oubliez pas l'attribut <code>alt</code> à chaque fois que vous insérez une image. Comme vous pouvez le voir dans l'exemple, il décrit l'image afin de présenter un texte aux utilisateurs qui ne pourront pas la voir (problème de connexion, lecteur d'écran...)",
          "links": [
            {
              "label": "Documentation sur la balise img",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/img"
            }
          ],
          "codepen": "vVOBQy",
          "question": {
            "text": "Quel format d'image vectoriel est adapté à la présentation d'icônes, logo et formes simples ? Ce format a l'avantage de produire des fichiers légers et des images pouvant être agrandies à l'infini sans en altérer la qualité.",
            "answer": "svg",
            "clue": "s"
          },
          "figure": {
            "src": "https://wprocket-eb2.kxcdn.com/wp-content/uploads/1/3-pie-graph-page-size.png",
            "alt": "Répartition du poids des ressources sur le web",
            "caption": "Les images représentent une portion considérable du poids du web (derrière les vidéos, loin devant). Attention à utiliser des images optimisées."
          }
        },
        {
          "title": "Block VS Inline",
          "theory": "Toutes ces balises sont regroupables en deux catégories : les <em>block</em>, qui provoquent un retour à la ligne et prennent toute la largeur disponible, et les <em>inline</em>, qui s'intrègrent au flux courant, en prenant juste la largeur de leur contenu. <code>div</code> et <code>span</code> sont les éléments génériques (sans signification particulière) respectifs de ces deux catégories.",
          "codes": {
            "html": "<p>Ce paragraphe est un bloc.</p><header>Ce header est un autre bloc. Mais ce <span>span</span> à l'intérieur du header est un élément inline.</header>"
          },
          "info": "Quand vous cherchez quelle balise utiliser, vérifiez s'il en existe une qui répond au sens que vous souhaitez donner à votre contenu. Si aucune ne correspond, utilisez <code>div</code> ou <code>span</code> selon que votre élement est un bloc ou en-ligne. Voyez ces dernières comme le dernier recours !",
          "links": [
            {
              "label": "Éléments en-ligne",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/%C3%89l%C3%A9ments_en_ligne"
            },
            {
              "label": "Éléments inline",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/%C3%89l%C3%A9ments_en_bloc"
            }
          ],
          "codepen": "yRNyWz",
          "figure": {
            "src": "https://www.webdesignerdepot.com/cdn-origin/uploads/2012/08/boxmodel-block-vs-inline.png",
            "alt": "Comparaison entre les éléments de bloc et les éléments en-ligne"
          }
        }
      ]
    },
    {
      "title": "Sélecteurs CSS et règles simples",
      "description": "Comment cibler des éléments du HTML et leur appliquer des règles stylistiques simples.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vRgG8_pKVmbQ4lwXqDZEEFoRd_VzKazQB5-ldieXUnmvl1g3k8n817osNqjACUPdPF0W-BstefwmMEd/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "cascade",
        "text": "La <em>cascade</em> est le processus par lequel un document est stylisé en combinant les différentes sources CSS disponibles : le CSS du navigateur, celui du site, parfois-même celui de l'utilisateur s'il a fait des réglages spéciaux. La <em>spécificité CSS</em> fait partie de ce processsus : elle arbitre sur la règle qui sera finalement appliquée."
      },
      "correctionVideoYoutubeId": "",
      "concepts": [
        {
          "title": "Notre première règle CSS",
          "theory": "Un fichier CSS est une suite de règles. Une règle est composée d'un sélecteur, puis des propriétés qui s'appliqueront aux éléments correspondant à ce sélecteur.",
          "codes": {
            "html": "<a>Je suis un lien et j'aimerais être affiché sur un fond vert, avec une taille de typo de 18px</a>",
            "css": "a { background-color: green; font-size: 18px; }"
          },
          "info": "Vous avez pu remarquer que les navigateurs appliquent des styles par défaut : par exemple, les titres sont affichés plus grand que le texte courant. C'est parce qu'ils incluent par défaut une feuille de style ciblant les h1, h2... et beaucoup d'autres éléments !",
          "links": [
            {
              "label": "Les bases des CSS",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/Commencer_avec_le_web/Les_bases_CSS"
            }
          ],
          "codepen": "ePEaBR",
          "question": {
            "text": "Quelle est la propriété CSS permettant de définir si le texte doit être aligné à gauche/droite, centré ou justifié ?",
            "answer": "text-align",
            "clue": "a"
          },
          "figure": {
            "src": "https://downloads.intercomcdn.com/i/o/45715097/cd89fe546a2d16cdc76dc30f/CSS+selectors.png",
            "alt": "Un extrait de code CSS",
            "caption": "Dissection d'un extrait de CSS, permettant ici que tout le texte du body soit en rouge."
          }
        },
        {
          "title": "Les sélecteurs de classe",
          "theory": "Les classes permettent de cibler des éléments de manière plus précise, car cibler tous les tags de même type devient rapidement dangereux sur des projets de plus grande envergure. N'importe quel élément HTML peut avoir l'attribut <code>class</code>. Le sélecteur correspondant est défini par un point suivi du nom de la classe.",
          "codes": {
            "html": "<p class=\"product\">Je possède la classe product et j'aimerai être affiché en bleu et en gras !</p>",
            "css": ".product { color: blue; font-weight: bold; }"
          },
          "warning": "Choisir le nom des classes n'est pas facile mais la sémantique est tout aussi importante qu'en HTML. Utilisez toujours des noms qui reflètent le rôle de l'élément (<code>product</code>, <code>movie</code>, <code>author</code>), plutôt que leur apparence. Évitez donc des classes comme <code>red</code>, <code>big</code>... En effet, l'apparence de ces éléments pourra changer, alors que leur rôle jamais !",
          "links": [
            {
              "label": "Les sélecteurs de classe",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/S%C3%A9lecteurs_de_classe"
            }
          ],
          "codepen": "yRodQG",
          "figure": {
            "src": "http://4.bp.blogspot.com/-FkRmNVMoQY8/UJaVl24cpMI/AAAAAAAAAHo/iOXlDHEd9PU/s1600/inlinecss.jpg",
            "alt": "Règles CSS dans le HTML",
            "caption": "Écrire du CSS directement dans le HTML est possible grâce à l'attribut style, mais strictement prohibé ! Ce serait mélanger la présentation avec le style, ce qui serait beaucoup moins clair et maintenable."
          }
        },
        {
          "title": "Les pseudos-classes",
          "theory": "Les sélecteurs de pseudo-classes permettent de cibler encore plus précisément certains éléments. Ils ne se basent pas sur des attributs <code>class</code> ajoutés aux éléments, mais sur l'état de ces derniers ou leur position dans le document. On reconnaît ces sélecteurs aux deux points qui les précédent.",
          "codes": {
            "html": "<p>Ce paragraphe sera vert mais deviendra rouge lorsqu'on le survolera.</p>",
            "css": "p { color: green; } p:hover { color: red; }"
          },
          "info": "Dans le contexte de cet exemple, <code>:hover</code> signifie \"au survol\" (hover = flotter en anglais). Vous voyez le lien pour accéder à la présentation, en haut à droite de la page ? C'est grâce à un tel sélecteur qu'il grossit au survol.",
          "links": [
            {
              "label": "Les pseudo-classes",
              "url": "https://www.w3schools.com/css/css_pseudo_classes.asp"
            },
            {
              "label": "Sélections par position",
              "url": "https://css-tricks.com/useful-nth-child-recipies/"
            }
          ],
          "codepen": "aRyeaJ",
          "question": {
            "text": "Quelle règle CSS permet de faire apparaître une petite main au survol d'un lien (et d'autres symboles dans d'autres contextes)&nbsp;?",
            "answer": "cursor",
            "clue": "c"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/csstricks-uploads/relationalpseudos2.png",
            "alt": "Ciblage d'élement HTML selon leur position",
            "caption": "Il est fréquent de devoir cibler des éléments en fonction de leur position/environnement, et beaucoup de pseudo-classes nous le permettent (<code>nth-child</code> est le plus courant et utile !)."
          }
        },
        {
          "title": "Combiner les sélecteurs",
          "theory": "Ici réside toute la puissance et la complexité du CSS. Toujours dans l'optique d'affiner nos sélections, on va combiner les sélecteurs, en les mettant les uns à la suite des autres. L'exemple montre comment cibler le <code>h2</code> qui se trouve au sein de la section de classe <code>contact</code>, et pas les autres.",
          "codes": {
            "html": "<section class=\"skills\"><h2>My skills</h2></section><section class=\"contact\"><h2>Contact me</h2></section>",
            "css": ".contact&nbsp;h2 { color: green; }"
          },
          "warning": "Pour garder un code maintenable, on prendra garde à ne pas abuser de cette pratique. Une bonne règle de base est de limiter le chaînage des sélecteurs à trois (ex: <code>.movie p:first-child</code>), et d'en utiliser moins dès que possible.",
          "links": [
            {
              "label": "Les combinaisons possibles",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/CSS/Introduction_%C3%A0_CSS/Combinators_and_multiple_selectors"
            },
            {
              "label": "L'importance des espaces",
              "url": "https://stackoverflow.com/questions/1126338/what-does-a-space-mean-in-a-css-selector-i-e-what-is-the-difference-between-c/1126354"
            }
          ],
          "codepen": "vVeBwB",
          "question": {
            "text": "Quel symbole permet de sélectionner tout élément de classe B, à condition qu'un de ses frères précédents soit de classe A ? (un frère est un élément qui se trouve au même niveau de l'arboresence).",
            "answer": "plus",
            "clue": "s"
          },
          "figure": {
            "src": "http://www.cssinhtml.com/wp-content/uploads/2016/08/Descendant-selector_example_div-div-p.png",
            "alt": "Le ciblage des éléments dans le DOM",
            "caption": "Le navigateur se représente votre document sous forme d'un arbre appelé DOM et trouve ainsi à quel(s) élément(s) appliquer chaque règle."
          }
        },
        {
          "title": "La spécificité CSS",
          "theory": "La <em>spécificité</em> est le mécanisme qui détermine ce qu'il se passe quand deux sélecteurs déclarent des propriétés qui rentrent en conflit : c'est le sélecteur qui a le plus de <em>poids</em> qui l'emporte. Par exemple, un sélecteur de classe a plus de poids qu'un sélecteur de tag. Et un sélecteur basé sur deux classes (<code>.movie.new</code>) a plus de poids qu'un sélecteur basé sur une seule (<code>.movie</code>). À poids égal, c'est le dernier à avoir été déclaré qui prend le dessus.",
          "codes": {
            "html": "<p>Je serai bleu, car la première règle est écrasée.</p><p class=\"special\">Je serai vert, car la règle de classe est plus forte !</p>",
            "css": "p { color: red; } p { color: blue; } .special { color: green; }"
          },
          "warning": "Vous trouverez que l'on peut aussi utiliser des <code>id</code> pour cibler des éléments, mais on évite de le faire car leur spécificité est trop forte. La spécificité CSS introduit une complexité non négligeable dans le CSS et c'est une autre raison pour laquelle on essaie de limiter les combinaisons de sélecteurs : plus la spécificité globale est basse, plus le code est maintenable. Nous verrons des techniques pour aider à cela.",
          "links": [
            {
              "label": "Calculateur de spécificité",
              "url": "https://specificity.keegan.st/"
            }
          ],
          "codepen": "oaGNmx",
          "question": {
            "text": "Quelle expression, pouvant être placée à la fin d'une déclaration pour surpasser toutes les autres règles de spécificité, ne faut-il utiliser que dans les cas extrèmes ?",
            "answer": "!important",
            "clue": "a"
          },
          "figure": {
            "src": "http://submit.xlauz.net/upload/css-specificity.png",
            "alt": "Un calcul de spécificité CSS",
            "caption": "La spécificité pose des problèmes même aux développeurs expérimentés. Un sélecteur aussi complexe que celui-ci n'est pas agréable à manipuler !"
          }
        },
        {
          "title": "Les conventions d'écriture",
          "theory": "Comme celle du HTML, l'écriture du CSS est soumise à des conventions partagées par une majorité de développeurs pour faciliter sa lecture et sa maintenance. En plus des retours à la ligne et des espacements où cela est nécessaire, nommez vos classes en anglais et en <em>kebab-case</em> (tout en minuscule, avec des tirets pour séparer les mots). N'oubliez pas que les projets sur lesquels vous travaillerez seuls seront des exceptions.",
          "codes": {
            "css": ".product { color: red; font-size: 18px; } .product-title { font-weight: bold; }"
          },
          "info": "L'installation d'un linter tel que <em>Prettier</em> sur votre IDE est fortement recommandée. Un linter est une extension qui reformatte votre code (et pas seulement le CSS) automatiquement quand vous sauvegardez. Dans certaines organisations, il est même impossible de pusher du code ne respectant pas les conventions définies.",
          "links": [
            {
              "label": "Écrire un CSS lisible",
              "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Syntax#Beyond_syntax_make_CSS_readable"
            },
            {
              "label": "L'extension Prettier pour VSCode",
              "url": "https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"
            }
          ],
          "codepen": "oaGpKp",
          "question": {
            "text": "Nous avons parlé ci-dessus du <em>kebab-case</em>, une convention de nommage. Quelle est celle utilisée en JavaScript, où les variables ressemblent à <code>userInput</code>, <code>projectName</code>, etc ?",
            "answer": "camelcase",
            "clue": "c"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2017/10/stylelint.gif",
            "alt": "Un extrait de code dont les erreurs de syntaxe sont relevées par Prettier",
            "caption": "Les outils tels que <em>Prettier</em> vous aideront à éviter les erreurs de syntaxe."
          }
        },
        {
          "title": "Les propriétés de texte",
          "theory": "On dit souvent que le texte est roi sur le web, sans doute car c'est lui qui véhicule votre contenu. De nombreuses règles sont disponibles pour gérer son apparence.",
          "codes": {
            "html": "<p>J'aimerai être affiché en gras, rouge et être aligné à droite !</p>",
            "css": "p { font-weight: bold; color: red; text-align: right; }"
          },
          "warning": "Utilisez au maximum du vrai texte plutôt que des images, même pour les éléments complexes comme les logos ou gros titres stylisés. Une image pèse lourd, pixellise, est moins bien référencée et moins accessible.",
          "links": [
            {
              "label": "Mise en forme du texte",
              "url": "https://developer.mozilla.org/fr/docs/Learn/CSS/Styling_text/initiation-mise-en-forme-du-texte"
            },
            {
              "label": "Exemples d'effets avancés",
              "url": "https://freefrontend.com/css-text-effects/"
            }
          ],
          "codepen": "zmERoz",
          "question": {
            "text": "L'arabe et l'Hébreu, entre autres, se distinguent par une particularité assez forte. Quelle propriété CSS nous sera utile pour gérer l'affichage de ces langues ?",
            "answer": "direction",
            "clue": "d"
          },
          "figure": {
            "src": "https://speckyboy.com/wp-content/uploads/2017/05/css-text-amimation-thumb.gif",
            "alt": "Une texte animé en JavaScript",
            "caption": "Avec un peu de JavaScript, les possibilités deviennent quasiment infinies."
          }
        },
        {
          "title": "Importer une typo avec @font-face",
          "theory": "Il y a plusieurs moyens d'utiliser une typographie non standard pour un site, et la déclaration CSS <code>@font-face</code> est sans doute la plus efficace. Beaucoup de formats de fichier existent, mais étant donnés la performance et le support navigateur de chacun, le consensus prescrit utilisation combinée des format <code>woff</code> et <code>woff2</code>. Chaque navigateur choisira ce qu'il est en mesure de comprendre, <code>woff2</code> étant plus optimisé mais pas aussi largement supporté. Il faut déclarer un @font-face par typographie et par graisse (normal, bold, italic, bold & italic...).",
          "codes": {
            "css": "@font-face { font-family: \"Roboto\"; src: url(\"fonts/Roboto.woff2\")&nbsp;format(\"woff2\"),&nbsp;url(\"fonts/Roboto.woff\")&nbsp;format(\"woff\"); font-weight: normal; font-style: normal; } @font-face { font-family: \"Roboto\"; src: url(\"fonts/Roboto-Italic.woff2\")&nbsp;format(\"woff2\"),&nbsp;url(\"fonts/Roboto-Italic.woff\")&nbsp;format(\"woff\"); font-weight: normal; font-style: italic; } body { font-family: \"Roboto\", sans-serif; } em { font-style: italic; }"
          },
          "warning": "Attention à bien regarder l'exemple : les deux déclarations utilisent la même <code>font-family</code>. La seule chose qui change, c'est le chemin du fichier et le <code>font-style</code> auquel le fichier correspond. Cela permet au navigateur de savoir qu'il faut styler le <code>body</code> avec <code>Roboto.woff2</code>, mais qu'il pourra utiliser <code>Roboto-Italic.woff2</code> pour faire ressortir les balises <code>em</code>. On pourrait également importer <code>Roboto-Bold.woff2</code>, en faisant varier <code>font-weight</code> cette fois-ci. Enfin, notez dans le sélecteur <code>body</code> la déclaration d'une police de secours (n'importe quelle <code>sans-serif</code>), au cas où la première ne peut pas être chargée.",
          "links": [
            {
              "label": "Les formats et leur support",
              "url": "https://www.w3schools.com/css/css3_fonts.asp"
            }
          ],
          "codepen": "PyJRwZ",
          "question": {
            "text": "Par quel mot désigne-t-on, en anglais, l'espacement entre les caractères ?",
            "answer": "kerning",
            "clue": "e"
          },
          "figure": {
            "src": "http://www.font-face.com/images/compare.png",
            "alt": "Les différentes graisses d'une typographie",
            "caption": "Une seule typographie peut contenir des dizaines de graisses et styles. Essayer de limiter à 3 ou 4 le nombre de typographies / graisses que vous utilisez par site, pour en optimiser les performances."
          }
        },
        {
          "title": "Les propriétés de blocs",
          "theory": "Le texte est souvent organisé dans des blocs qui structurent la page : il est possible d'en modifier l'apparence et la taille grâce à de nombreuses propriétés (le positionnement des blocs les uns par rapport aux autres sera un sujet à part entière).",
          "codes": {
            "html": "<section>Je suis un rectangle de 200px de côté, avec une image de montagne en fond et 20px de marge en dessous de moi. Ma hauteur n'étant pas spécifiée, je prendrai la hauteur nécessaire automatiquement.</section>",
            "css": "* { box-sizing: border-box; } section { width: 200px; background: url(\"img/moutain.jpg\")&nbsp;no-repeat&nbsp;center; background-size: cover; margin-bottom: 20px; }"
          },
          "warning": "La première règle de cet exemple est inhabituelle. Le sélécteur astérisque cible <em>tous</em> les éléments de la page et modifie avec la propriété <code>box-sizing</code> leur modèle de boîte. Cela est nécessaire pour que les dimensions soient correctement interprétées sur notre page, à toujours inclure dans votre code donc !",
          "links": [
            {
              "label": "Propriété des blocs",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/CSS/styliser_boites/Box_model_recap#Propri%C3%A9t%C3%A9s_des_bo%C3%AEtes"
            }
          ],
          "codepen": "QZqrWB",
          "figure": {
            "src": "http://csscreator.com/files/Boxsizing.png",
            "alt": "Comparaison de content-box et border-box",
            "caption": "Si on ne changeait pas le modèle de boîte en <code>border-box</code>, les bordures et le padding \"dépasseraient\" de notre conteneur, rendant le styling de notre page beaucoup plus difficile."
          }
        }
      ]
    }
  ],
  "twitterAccounts": [
    {
      "name": "CSS-Tricks",
      "id": "css",
      "avatarUrl": "https://pbs.twimg.com/profile_images/546011298627334146/MAeF2-yK_bigger.jpeg"
    },
    {
      "name": "CodyHouse",
      "id": "CodyWebHouse",
      "avatarUrl": "https://pbs.twimg.com/profile_images/972778766782140417/DzxuGyE0_bigger.jpg"
    },
    {
      "name": "A List Apart",
      "id": "alistapart",
      "avatarUrl": "https://pbs.twimg.com/profile_images/478913945475235840/Jv1mMBOA_bigger.jpeg"
    },
    {
      "name": "Friday Front-End",
      "id": "fridayfrontend",
      "avatarUrl": "https://pbs.twimg.com/profile_images/975219464823226369/eCIsZNgo_bigger.jpg"
    },
    {
      "name": "Shashing Magazine",
      "id": "smashingmag",
      "avatarUrl": "https://pbs.twimg.com/profile_images/1014194982499078145/ScpR-ujV_bigger.jpg"
    },
    {
      "name": "Luke Wroblewski",
      "id": "lukew",
      "avatarUrl": "https://pbs.twimg.com/profile_images/477610446917103616/_cjU3_ga_bigger.png"
    },
    {
      "name": "HTeuMeuLeu",
      "id": "HteuMeuLeu",
      "avatarUrl": "https://pbs.twimg.com/profile_images/876098522155712514/U5EX5vLT_bigger.jpg"
    },
    {
      "name": "Programming Wisdom",
      "id": "CodeWisdom",
      "avatarUrl": "https://pbs.twimg.com/profile_images/705003311083229184/qTBCIxpk_bigger.jpg"
    }
  ]
}
