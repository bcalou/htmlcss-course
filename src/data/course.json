{
  "title": "HTML/CSS",
  "chapters": [
    {
      "title": "Introduction aux balises",
      "description": "Découverte du HTML, le langage de base des pages web, et des balises principales qui le constituent.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vT-yctmKbXxKrLaLxbQwOdvmIFTGM_iXgmopeakGyAuC5MWbXa3dd5DaP6ATM6RDBRrL5myUkhyZpEH/pub?start=true&loop=false&delayms=60000000",
      "puzzle": {
        "word": "semantic",
        "text": "La sémantique (<i>semantic</i> en anglais) est la pratique visant à donner le maximum de signification au code constituant notre page web. On ne se soucie pas seulement de ce que l'utilisateur verra au final, mais aussi de ce que le navigateur reçoit comme code. Plus la sémantique du code est précise, mieux le code pourra être interprété dans différents contextes : navigation classique, référencement par les moteurs de recherche, navigation à l'aide d'une technologie d'assistance..."
      },
      "correctionVideoYoutubeId": "e1_r2MWtAIs",
      "concepts": [
        {
          "title": "Notre première balise",
          "theory": "Le contenu d'une page web est organisé dans des balises. La plupart des balises sont constituées d'un tag ouvrant, de leur contenu, puis du tag fermant correspondant.",
          "codes": {
            "html": "<p>Texte dans un paragraphe. Un paragraphe est représenté par la balise p en HTML.</p>"
          },
          "warning": "Ne laissez pas du contenu en dehors d'une balise. Il s'affichera quand même, mais sera difficilement manipulable par la suite.",
          "links": [
            {
              "label": "Liste de tous les éléments HTML existant",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element"
            }
          ],
          "codepen": "Pdreva",
          "question": {
            "text": "Le monde du code est très largement dominé par l'anglais, et votre code devrait toujours être écrit dans cette langue, par convention (et pour partager une langue universelle avec vos collègues de toutes les contrées). D'ailleurs, quel est le mot pour <em>balise</em> en anglais ?",
            "answer": "tag",
            "clue": "t"
          }
        },
        {
          "title": "Les titres",
          "theory": "Du <code>h1</code> au <code>h6</code>, les titres permettent d'introduire de manière hiérarchisée les différentes parties d'une page. <code>h1</code> représente le titre principal du document, puis les <code>h2</code> les titres de second niveau, et ainsi de suite...",
          "codes": {
            "html": "<h1>Je suis le titre de ce document</h1><h2>Première partie</h2><p>Contenu de la première partie</p><h2>Deuxième partie</h2><h3>Sous-partie 1</h3><p>Etc...</p>"
          },
          "info": "La convention veut que l'on utilise qu'un seul <code>h1</code> par page, principalement pour des raisons historiques de référencement. Pas de limite sur les autres !",
          "links": [
            {
              "label": "Documentation approfondie sur les titres",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/Heading_Elements"
            }
          ],
          "codepen": "XxWxOJ",
          "question": {
            "text": "Jetez un oeil en haut de cette page. Ici, le titre principal (\"HTML/CSS\") est contenu dans un <code>h1</code>, et le sous-titre (\"Introduction aux balises\") dans un <code>h2</code>. C'est bien joli tout ça, mais que signifie le h ?",
            "answer": "heading",
            "clue": "n"
          },
          "figure": {
            "src": "https://s3-ap-southeast-1.amazonaws.com/openeschool-uploads/Open_2/Open5013f58a-77e3-45ad-b4b0-09aa1d34a9dc.png",
            "alt": "6 balises de titres allant du h1 au h6",
            "caption": "Vous l'avez remarqué : les navigateurs appliquent automatiquement un style (taille) différent selon l'importance du titre."
          }
        },
        {
          "title": "Structurer un document",
          "theory": "Bien d'autres éléments concourent à la structuration d'un document. 99% des sites comportent au moins un <code>header</code> (en-tête, dans lequel on trouve au moins un titre) et un <code>footer</code> (pied-de-page). La balise <code>main</code> quant à elle permet de désigner le contenu principal du document.",
          "codes": {
            "html": "<header><h1>Bienvenue sur mon site !</h1></header><main>Le contenu principal...</main><footer>Merci d'être passé !</footer>"
          },
          "info": "Vous avez sans doute remarqué en passant qu'on peut imbriquer une balise dans une autre. Ici, un titre de niveau 1 au sein du <code>header</code>.",
          "links": [
            {
              "label": "Les balises structurelles",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element#Sectionnement_du_contenu"
            }
          ],
          "codepen": "yRLwra",
          "question": {
            "text": "Sur cette page, chaque concept (par exemple \"Structurer un document\") se trouve dans une balise <code>article</code>. En effet, ce sont des contenus indépendants, qui ont du sens à eux seul. Dans quel balise est-il logique d'avoir placé les encarts \"À noter\" ?",
            "answer": "aside",
            "clue": "i"
          },
          "figure": {
            "src": "https://uploads.siteduzero.com/files/343001_344000/343677.png",
            "alt": "La structure HTML5 d'un site",
            "caption": "Exemple de représentation d'un site et des balises HTML5 qui le composent. Un schéma à réaliser chaque fois que abordez un projet ou analysez un site existant."
          }
        },
        {
          "title": "L'indentation : elle peut sauver des vies",
          "theory": "Ce n'est pas drôle, mais c'est vital pour n'importe quel type de code : l'indentation, soit le fait d'espacer vers la droite les balises qui sont incluses dans une autre balise. Astuce : une balise fermante se trouve verticalement \"en face\" de sa balise ouvrante correspondante (sauf pour les balises qui tiennent sur une seule ligne).",
          "codes": {
            "html": "<section><h2>2 espaces d'indentation</h2><article><p>Puis 4, etc...</p></article></section>"
          },
          "warning": "Indentez avec des caractères \"espace\" et pas des vraies tabulations. C'est un vieux débat, mais les espaces produiront un code plus robuste. Heureusement, la plupart des éditeurs de code vous simplifieront la tâche.",
          "codepen": "qJBzpP",
          "figure": {
            "src": "/img/indentation.jpg",
            "alt": "Comparaison d'un code mal indenté et d'un code bien indenté",
            "caption": "Lire un code mal indenté peut nuire à votre santé et à celle de votre entourage."
          }
        },
        {
          "title": "Les balises auto-fermantes",
          "theory": "Jusqu'ici, toutes nos balises contiennent soit du texte, soit d'autres balises. Mais certaines balises ne contiennent rien. C'est par exemple le cas de la balise de retour à la ligne, <code>br</code>, qui se ferme à l'instant même où elle s'ouvre. Le slash de fermeture est optionnel.",
          "codes": {
            "html": "<p>Un vieil étang,<br/>Une grenouille qui plonge,<br/>Le bruit de l'eau.</p><p>Haïku de Bashō</p>"
          },
          "info": "La balise <code>br</code> est utile lorsqu'un retour à la ligne a du sens au sein d'un même paragraphe (ici, un poème). Elle est nécessaire car un retour à la ligne dans le code source sera ignoré par le navigateur.",
          "codepen": "yRygbL",
          "question": {
            "text": "Les navigateurs implémentent une spécification précise d'HTML, si possible la plus récente, qui nous dit quelles balises existent et comment les utiliser. Quelle est la version présentée en 2014 est encore utilisée aujourd'hui ?",
            "answer": "html5",
            "clue": "m"
          }
        },
        {
          "title": "Les listes",
          "theory": "Les listes sont un des éléments les plus courants dans un site. Elles sont constituées d'une balise <code>ul</code> (<i>unordered list</i>) ou <code>ol</code> (<i>ordered list</i>) et d'autant de balises <code>li</code> qu'il y a d'items.",
          "codes": {
            "html": "<nav><ul><li>Présentation</li><li>Compétences</li><li>Expériences</li></ul></nav>"
          },
          "warning": "Les listes servent souvent à déclarer un menu. Il faut alors placer la liste dans une balise <code>nav</code>, une autre balise structurelle qui permet au navigateur de savoir qu'il s'agit d'un moyen de naviguer sur le site.",
          "links": [
            {
              "label": "Exemples variés de listes",
              "url": "https://html.com/lists/"
            }
          ],
          "codepen": "NOPgQW",
          "question": {
            "text": "Vrai ou faux ? On peut inclure une liste dans une autre, mais il faut qu'elle soit du même type (<code>ul</code> au sein d'une <code>ul</code>, <code>ol</code> au sein d'une <code>ol</code>)",
            "answer": "faux",
            "clue": "a"
          },
          "figure": {
            "src": "https://webdesy.com/webdesy-wp/wp-content/uploads/2012/02/html-list-3.jpg",
            "alt": "Une liste d'action à effectuer",
            "caption": "Un autre exemple de liste dont l'ordre des items est important : une liste d'actions à effectuer en respectant un processus."
          }
        },
        {
          "title": "Créons du lien",
          "theory": "Les <em>attributs</em> procurent de nouveaux pouvoirs aux éléments HTML. On les place au sein de la balise d'ouverture. Une balise <code>a</code> seule n'a aucun effet, mais avec un attribut <code>href</code>, elle permet de créer un lien !",
          "codes": {
            "html": "<p>Voici un lien externe vers <a href=\"https://www.w3.org/\">le site du W3C</a>. En cliquant, vous sortirez de la page.</p><p>Et voici un lien vers une <a href=\"#hello\">section interne à ce document</a>. En cliquant, vous descendrez sur la page.</p><article id=\"hello\">Hello World!</a>"
          },
          "info": "Analysez bien la différence entre les deux liens de l'exemple. Dans le premier, <code>href</code> contient une adresse complète (autre page web). Dans le second, grâce au <code>#</code>, il redirige vers l'élément <em>de la même page</em> possédant l'attribut <code>id</code> correspondant.",
          "links": [
            {
              "label": "Documentation sur les liens",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/a"
            }
          ],
          "codepen": "dgPZYW",
          "question": {
            "text": "Il est possible de contrôler si l'ouverture du lien remplacera l'onglet actuel (on perd donc la page courante, c'est le comportement par défaut) ou si elle s'ouvrira dans un nouvel onglet. Quel est l'attribut à utiliser dans ce but ?",
            "answer": "target",
            "clue": "e"
          },
          "figure": {
            "src": "https://www.computerhope.com/jargon/h/html-tag.gif",
            "alt": "Schéma d'un tag HTML",
            "caption": "<code>href</code> est un des attributs de la balise <code>a</code>. Vous savez désormais écrire une balise HTML entière."
          }
        },
        {
          "title": "Les balises de texte",
          "theory": "HTML nous permet d'enrichir les textes avec des balises ayant chacune un sens spécifique. Les utiliser aide le navigateur à comprendre le contenu et nous permettra ensuite de styliser certains passages pour les faire ressortir.",
          "codes": {
            "html": "Ce mot est placé en <em>emphase</em>, pour qu'on le remarque. Et celui-ci est super <strong>important !!!</strong>"
          },
          "warning": "Le navigateur met par défaut les <code>em</code> en italique et les <code>strong</code> en gras. Mais ce n'est pas une fatalité, on peut très bien décider de présenter notre texte autrement. Il ne faut pas confondre le sens, qu'on donne avec les balises, et l'apparence.",
          "links": [
            {
              "label": "Sémantique du texte en ligne",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element#S%C3%A9mantique_du_texte_en_ligne"
            }
          ],
          "codepen": "bmNXPB",
          "question": {
            "text": "Quelle est la balise dans laquelle ont été logiquement placés les exemples de HTML sur cette page ?",
            "answer": "code",
            "clue": "c"
          }
        },
        {
          "title": "Ça manque d'images...",
          "theory": "Les pages web regorgent de médias, et les images (jpeg, png, gif, svg...) en représentent une grande partie. Elles sont insérées facilement avec une balise <code>img</code> (auto-fermante) contenant un attribut <code>src</code>. Pour la gestion de la taille, ce sera plus tard !",
          "codes": {
            "html": "<img src=\"https://www.placecage.com/300/200\" alt=\"Nicolas Cage avec une moustache\" />"
          },
          "warning": "N'oubliez pas l'attribut <code>alt</code> à chaque fois que vous insérez une image. Comme vous pouvez le voir dans l'exemple, il décrit l'image afin de présenter un texte aux utilisateurs qui ne pourront pas la voir (problème de connexion, lecteur d'écran...)",
          "links": [
            {
              "label": "Documentation sur la balise img",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/img"
            }
          ],
          "codepen": "vVOBQy",
          "question": {
            "text": "Quel format d'image vectoriel est adapté à la présentation d'icônes, logo et formes simples ? Ce format a l'avantage de produire des fichiers légers et des images pouvant être agrandies à l'infini sans en altérer la qualité.",
            "answer": "svg",
            "clue": "s"
          },
          "figure": {
            "src": "https://wprocket-eb2.kxcdn.com/wp-content/uploads/1/3-pie-graph-page-size.png",
            "alt": "Répartition du poids des ressources sur le web",
            "caption": "Les images représentent une portion considérable du poids du web (derrière les vidéos, loin devant). Attention à utiliser des images optimisées."
          }
        },
        {
          "title": "Block VS Inline",
          "theory": "Toutes ces balises sont regroupables en deux catégories : les <em>block</em>, qui provoquent un retour à la ligne et prennent toute la largeur disponible, et les <em>inline</em>, qui s'intrègrent au flux courant, en prenant juste la largeur de leur contenu. <code>div</code> et <code>span</code> sont les éléments génériques (sans signification particulière) respectifs de ces deux catégories.",
          "codes": {
            "html": "<p>Ce paragraphe est un bloc.</p><header>Ce header est un autre bloc. Mais ce <span>span</span> à l'intérieur du header est un élément inline.</header>"
          },
          "info": "Quand vous cherchez quelle balise utiliser, vérifiez s'il en existe une qui répond au sens que vous souhaitez donner à votre contenu. Si aucune ne correspond, utilisez <code>div</code> ou <code>span</code> selon que votre élement est un bloc ou en-ligne. Voyez ces dernières comme le dernier recours !",
          "links": [
            {
              "label": "Éléments en-ligne",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/%C3%89l%C3%A9ments_en_ligne"
            },
            {
              "label": "Éléments inline",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/%C3%89l%C3%A9ments_en_bloc"
            }
          ],
          "codepen": "yRNyWz",
          "figure": {
            "src": "https://www.webdesignerdepot.com/cdn-origin/uploads/2012/08/boxmodel-block-vs-inline.png",
            "alt": "Comparaison entre les éléments de bloc et les éléments en-ligne"
          }
        }
      ]
    },
    {
      "title": "Sélecteurs CSS et règles simples",
      "description": "Comment cibler des éléments du HTML et leur appliquer des règles stylistiques simples.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vRgG8_pKVmbQ4lwXqDZEEFoRd_VzKazQB5-ldieXUnmvl1g3k8n817osNqjACUPdPF0W-BstefwmMEd/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "cascade",
        "text": "La <em>cascade</em> est le processus par lequel un document est stylisé en combinant les différentes sources CSS disponibles : le CSS du navigateur, celui du site, parfois-même celui de l'utilisateur s'il a fait des réglages spéciaux. La <em>spécificité CSS</em> fait partie de ce processsus : elle arbitre sur la règle qui sera finalement appliquée."
      },
      "correctionVideoYoutubeId": "zOsq09gNwz0",
      "concepts": [
        {
          "title": "Notre première règle CSS",
          "theory": "Un fichier CSS est une suite de règles. Une règle est composée d'un sélecteur, puis des propriétés qui s'appliqueront aux éléments correspondant à ce sélecteur.",
          "codes": {
            "html": "<a>Je suis un lien et j'aimerais être affiché sur un fond vert, avec une taille de typo de 18px</a>",
            "css": "a { background-color: green; font-size: 18px; }"
          },
          "info": "Vous avez pu remarquer que les navigateurs appliquent des styles par défaut : par exemple, les titres sont affichés plus grand que le texte courant. C'est parce qu'ils incluent par défaut une feuille de style ciblant les h1, h2... et beaucoup d'autres éléments !",
          "links": [
            {
              "label": "Les bases des CSS",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/Commencer_avec_le_web/Les_bases_CSS"
            }
          ],
          "codepen": "ePEaBR",
          "question": {
            "text": "Quelle est la propriété CSS permettant de définir si le texte doit être aligné à gauche/droite, centré ou justifié ?",
            "answer": "text-align",
            "clue": "a"
          },
          "figure": {
            "src": "https://downloads.intercomcdn.com/i/o/45715097/cd89fe546a2d16cdc76dc30f/CSS+selectors.png",
            "alt": "Un extrait de code CSS",
            "caption": "Dissection d'un extrait de CSS, permettant ici que tout le texte du body soit en rouge."
          }
        },
        {
          "title": "Les sélecteurs de classe",
          "theory": "Les classes permettent de cibler des éléments de manière plus précise, car cibler tous les tags de même type devient rapidement dangereux sur des projets de plus grande envergure. N'importe quel élément HTML peut avoir l'attribut <code>class</code>. Le sélecteur correspondant est défini par un point suivi du nom de la classe.",
          "codes": {
            "html": "<p class=\"product\">Je possède la classe product et j'aimerai être affiché en bleu et en gras !</p>",
            "css": ".product { color: blue; font-weight: bold; }"
          },
          "warning": "Choisir le nom des classes n'est pas facile mais la sémantique est tout aussi importante qu'en HTML. Utilisez toujours des noms qui reflètent le rôle de l'élément (<code>product</code>, <code>movie</code>, <code>author</code>), plutôt que leur apparence. Évitez donc des classes comme <code>red</code>, <code>big</code>... En effet, l'apparence de ces éléments pourra changer, alors que leur rôle jamais !",
          "links": [
            {
              "label": "Les sélecteurs de classe",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/S%C3%A9lecteurs_de_classe"
            }
          ],
          "codepen": "yRodQG",
          "figure": {
            "src": "http://4.bp.blogspot.com/-FkRmNVMoQY8/UJaVl24cpMI/AAAAAAAAAHo/iOXlDHEd9PU/s1600/inlinecss.jpg",
            "alt": "Règles CSS dans le HTML",
            "caption": "Écrire du CSS directement dans le HTML est possible grâce à l'attribut style, mais strictement prohibé ! Ce serait mélanger la présentation avec le style, ce qui serait beaucoup moins clair et maintenable."
          }
        },
        {
          "title": "Les pseudos-classes",
          "theory": "Les sélecteurs de pseudo-classes permettent de cibler encore plus précisément certains éléments. Ils ne se basent pas sur des attributs <code>class</code> ajoutés aux éléments, mais sur l'état de ces derniers ou leur position dans le document. On reconnaît ces sélecteurs aux deux points qui les précédent.",
          "codes": {
            "html": "<p>Ce paragraphe sera vert mais deviendra rouge lorsqu'on le survolera.</p>",
            "css": "p { color: green; } p:hover { color: red; }"
          },
          "info": "Dans le contexte de cet exemple, <code>:hover</code> signifie \"au survol\" (hover = flotter en anglais). Vous voyez le lien pour accéder à la présentation, en haut à droite de la page ? C'est grâce à un tel sélecteur qu'il grossit au survol.",
          "links": [
            {
              "label": "Les pseudo-classes",
              "url": "https://www.w3schools.com/css/css_pseudo_classes.asp"
            },
            {
              "label": "Sélections par position",
              "url": "https://css-tricks.com/useful-nth-child-recipies/"
            }
          ],
          "codepen": "aRyeaJ",
          "question": {
            "text": "Quelle règle CSS permet de faire apparaître une petite main au survol d'un lien (et d'autres symboles dans d'autres contextes)&nbsp;?",
            "answer": "cursor",
            "clue": "c"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/csstricks-uploads/relationalpseudos2.png",
            "alt": "Ciblage d'élement HTML selon leur position",
            "caption": "Il est fréquent de devoir cibler des éléments en fonction de leur position/environnement, et beaucoup de pseudo-classes nous le permettent (<code>nth-child</code> est la plus courante et utile !)."
          }
        },
        {
          "title": "Combiner les sélecteurs",
          "theory": "Ici réside toute la puissance et la complexité du CSS. Toujours dans l'optique d'affiner nos sélections, on va combiner les sélecteurs, en les mettant les uns à la suite des autres. L'exemple montre comment cibler le <code>h2</code> qui se trouve au sein de la section de classe <code>contact</code>, et pas les autres.",
          "codes": {
            "html": "<section class=\"skills\"><h2>My skills</h2></section><section class=\"contact\"><h2>Contact me</h2></section>",
            "css": ".contact&nbsp;h2 { color: green; }"
          },
          "warning": "Pour garder un code maintenable, on prendra garde à ne pas abuser de cette pratique. Une bonne règle de base est de limiter le chaînage des sélecteurs à trois (ex: <code>.movie p:first-child</code>), et d'en utiliser moins dès que possible.",
          "links": [
            {
              "label": "Les combinaisons possibles",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/CSS/Introduction_%C3%A0_CSS/Combinators_and_multiple_selectors"
            },
            {
              "label": "L'importance des espaces",
              "url": "https://stackoverflow.com/questions/1126338/what-does-a-space-mean-in-a-css-selector-i-e-what-is-the-difference-between-c/1126354"
            }
          ],
          "codepen": "vVeBwB",
          "question": {
            "text": "Quel symbole permet de sélectionner tout élément de classe B, à condition que l'élément précédent soit de classe A ?",
            "answer": "plus",
            "clue": "s"
          },
          "figure": {
            "src": "http://www.cssinhtml.com/wp-content/uploads/2016/08/Descendant-selector_example_div-div-p.png",
            "alt": "Le ciblage des éléments dans le DOM",
            "caption": "Le navigateur se représente votre document sous forme d'un arbre appelé DOM et trouve ainsi à quel(s) élément(s) appliquer chaque règle."
          }
        },
        {
          "title": "La spécificité CSS",
          "theory": "La <em>spécificité</em> est le mécanisme qui détermine ce qu'il se passe quand deux sélecteurs déclarent des propriétés qui rentrent en conflit : c'est le sélecteur qui a le plus de <em>poids</em> qui l'emporte. Par exemple, un sélecteur de classe a plus de poids qu'un sélecteur de tag. Et un sélecteur basé sur deux classes (<code>.movie.new</code>) a plus de poids qu'un sélecteur basé sur une seule (<code>.movie</code>). À poids égal, c'est le dernier à avoir été déclaré qui prend le dessus.",
          "codes": {
            "html": "<p>Je serai bleu, car la première règle est écrasée.</p><p class=\"special\">Je serai vert, car la règle de classe est plus forte !</p>",
            "css": "p { color: red; } p { color: blue; } .special { color: green; }"
          },
          "warning": "Vous trouverez que l'on peut aussi utiliser des <code>id</code> pour cibler des éléments, mais on évite de le faire car leur spécificité est trop forte. La spécificité CSS introduit une complexité non négligeable dans le CSS et c'est une autre raison pour laquelle on essaie de limiter les combinaisons de sélecteurs : plus la spécificité globale est basse, plus le code est maintenable. Nous verrons des techniques pour aider à cela.",
          "links": [
            {
              "label": "Calculateur de spécificité",
              "url": "https://specificity.keegan.st/"
            }
          ],
          "codepen": "oaGNmx",
          "question": {
            "text": "Quelle expression, pouvant être placée à la fin d'une déclaration pour surpasser toutes les autres règles de spécificité, ne faut-il utiliser que dans les cas extrêmes ?",
            "answer": "!important",
            "clue": "a"
          },
          "figure": {
            "src": "http://submit.xlauz.net/upload/css-specificity.png",
            "alt": "Un calcul de spécificité CSS",
            "caption": "La spécificité pose des problèmes même aux développeurs expérimentés. Un sélecteur aussi complexe que celui-ci n'est pas agréable à manipuler !"
          }
        },
        {
          "title": "Les conventions d'écriture",
          "theory": "Comme celle du HTML, l'écriture du CSS est soumise à des conventions partagées par une majorité de développeurs pour faciliter sa lecture et sa maintenance. En plus des retours à la ligne et des espacements où cela est nécessaire, nommez vos classes en anglais et en <em>kebab-case</em> (tout en minuscule, avec des tirets pour séparer les mots). N'oubliez pas que les projets sur lesquels vous travaillerez seuls seront des exceptions.",
          "codes": {
            "css": ".product { color: red; font-size: 18px; } .product-title { font-weight: bold; }"
          },
          "info": "L'installation d'un linter tel que <em>Prettier</em> sur votre IDE est fortement recommandée. Un linter est une extension qui reformatte votre code (et pas seulement le CSS) automatiquement quand vous sauvegardez. Dans certaines organisations, il est même impossible de pusher du code ne respectant pas les conventions définies.",
          "links": [
            {
              "label": "Écrire un CSS lisible",
              "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Syntax#Beyond_syntax_make_CSS_readable"
            },
            {
              "label": "L'extension Prettier pour VSCode",
              "url": "https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"
            }
          ],
          "codepen": "oaGpKp",
          "question": {
            "text": "Nous avons parlé ci-dessus du <em>kebab-case</em>, une convention de nommage. Quelle est celle utilisée en JavaScript, où les variables ressemblent à <code>userInput</code>, <code>projectName</code>, etc ?",
            "answer": "camelcase",
            "clue": "c"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2017/10/stylelint.gif",
            "alt": "Un extrait de code dont les erreurs de syntaxe sont relevées par Prettier",
            "caption": "Les outils tels que <em>Prettier</em> vous aideront à éviter les erreurs de syntaxe."
          }
        },
        {
          "title": "Les propriétés de texte",
          "theory": "On dit souvent que le texte est roi sur le web, sans doute car c'est lui qui véhicule votre contenu. De nombreuses règles sont disponibles pour gérer son apparence.",
          "codes": {
            "html": "<p>J'aimerai être affiché en gras, rouge et être aligné à droite !</p>",
            "css": "p { font-weight: bold; color: red; text-align: right; }"
          },
          "warning": "Utilisez au maximum du vrai texte plutôt que des images, même pour les éléments complexes comme les logos ou gros titres stylisés. Une image pèse lourd, pixellise, est moins bien référencée et moins accessible.",
          "links": [
            {
              "label": "Mise en forme du texte",
              "url": "https://developer.mozilla.org/fr/docs/Learn/CSS/Styling_text/initiation-mise-en-forme-du-texte"
            },
            {
              "label": "Exemples d'effets avancés",
              "url": "https://freefrontend.com/css-text-effects/"
            }
          ],
          "codepen": "zmERoz",
          "question": {
            "text": "L'arabe et l'Hébreu, entre autres, se distinguent par une particularité assez forte. Quelle propriété CSS nous sera utile pour gérer l'affichage de ces langues ?",
            "answer": "direction",
            "clue": "d"
          },
          "figure": {
            "src": "https://speckyboy.com/wp-content/uploads/2017/05/css-text-amimation-thumb.gif",
            "alt": "Une texte animé en JavaScript",
            "caption": "Avec un peu de JavaScript, les possibilités deviennent quasiment infinies."
          }
        },
        {
          "title": "Importer une typo avec @font-face",
          "theory": "Il y a plusieurs moyens d'utiliser une typographie non standard pour un site, et la déclaration CSS <code>@font-face</code> est sans doute la plus efficace. Beaucoup de formats de fichier existent, mais étant donnés la performance et le support navigateur de chacun, le consensus préconise une utilisation combinée des format <code>woff</code> et <code>woff2</code>. Chaque navigateur choisira ce qu'il est en mesure de comprendre, <code>woff2</code> étant plus optimisé mais pas aussi largement supporté. Il faut déclarer un <code>@font-face</code> par typographie et par graisse (normal, bold, italic, bold & italic...).",
          "codes": {
            "css": "@font-face { font-family: \"Roboto\"; src: url(\"fonts/Roboto.woff2\")&nbsp;format(\"woff2\"),&nbsp;url(\"fonts/Roboto.woff\")&nbsp;format(\"woff\"); font-weight: normal; font-style: normal; } @font-face { font-family: \"Roboto\"; src: url(\"fonts/Roboto-Italic.woff2\")&nbsp;format(\"woff2\"),&nbsp;url(\"fonts/Roboto-Italic.woff\")&nbsp;format(\"woff\"); font-weight: normal; font-style: italic; } body { font-family: \"Roboto\", sans-serif; } em { font-style: italic; }"
          },
          "warning": "Attention à bien regarder l'exemple : les deux déclarations utilisent la même <code>font-family</code>. Les seules choses qui changent, ce sont les chemins des fichiers et le <code>font-style</code> auquel les fichiers correspondent. Cela permet au navigateur de savoir qu'il faut styler le <code>body</code> avec <code>Roboto.woff2</code>, mais qu'il pourra utiliser <code>Roboto-Italic.woff2</code> pour faire ressortir les balises <code>em</code>. On pourrait également importer <code>Roboto-Bold.woff2</code>, en faisant varier <code>font-weight</code> cette fois-ci. Enfin, notez dans le sélecteur <code>body</code> la déclaration d'une police de secours (n'importe quelle <code>sans-serif</code>), au cas où la première ne peut pas être chargée.",
          "links": [
            {
              "label": "Les formats et leur support",
              "url": "https://www.w3schools.com/css/css3_fonts.asp"
            }
          ],
          "codepen": "PyJRwZ",
          "question": {
            "text": "Par quel mot désigne-t-on, en anglais, l'espacement entre les caractères ?",
            "answer": "kerning",
            "clue": "e"
          },
          "figure": {
            "src": "http://www.font-face.com/images/compare.png",
            "alt": "Les différentes graisses d'une typographie",
            "caption": "Une seule typographie peut contenir des dizaines de graisses et styles. Essayer de limiter à 3 ou 4 le nombre de typographies / graisses que vous utilisez par site, pour en optimiser les performances."
          }
        },
        {
          "title": "Les propriétés de blocs",
          "theory": "Le texte est souvent organisé dans des blocs qui structurent la page : il est possible d'en modifier l'apparence et la taille grâce à de nombreuses propriétés (le positionnement des blocs les uns par rapport aux autres sera un sujet à part entière).",
          "codes": {
            "html": "<section>Je suis un rectangle de 200px de côté, avec une image de montagne en fond et 20px de marge en dessous de moi. Ma hauteur n'étant pas spécifiée, je prendrai la hauteur nécessaire automatiquement.</section>",
            "css": "* { box-sizing: border-box; } section { width: 200px; background: url(\"img/moutain.jpg\")&nbsp;no-repeat&nbsp;center; background-size: cover; margin-bottom: 20px; }"
          },
          "warning": "La première règle de cet exemple est inhabituelle. Le sélécteur astérisque cible <em>tous</em> les éléments de la page et modifie avec la propriété <code>box-sizing</code> leur modèle de boîte. Cela est nécessaire pour que les dimensions soient correctement interprétées sur notre page, à toujours inclure dans votre code donc !",
          "links": [
            {
              "label": "Propriété des blocs",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/CSS/styliser_boites/Box_model_recap#Propri%C3%A9t%C3%A9s_des_bo%C3%AEtes"
            }
          ],
          "codepen": "QZqrWB",
          "figure": {
            "src": "http://csscreator.com/files/Boxsizing.png",
            "alt": "Comparaison de content-box et border-box",
            "caption": "Si on ne changeait pas le modèle de boîte en <code>border-box</code>, les bordures et le padding \"dépasseraient\" de notre conteneur, rendant le styling de notre page beaucoup plus difficile."
          }
        }
      ]
    },
    {
      "title": "Mise en page, flexbox & grid",
      "description": "Manipuler des blocs avec flexbox, grid et d'autres techniques pour parvenir à une mise en page complexe.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vSdS_UrGr6ofEmQY-DhJRLMJr7G_qXx0XRn7-Ame2nCfz36CmIB4okg_qkvul0g8-rr7YiA8vE2oUtj/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "flexible",
        "text": "Un mot simple mais qui doit piloter toutes nos réflexions sur le web. Flexbox et Grid sont des premiers (grands) pas vers un design flexible, et par là même résilient, c'est à dire résistant aux changement de taille, ce à quoi nous ferons face très prochainement en parlant d'intégration responsive."
      },
      "correctionVideoYoutubeId": "0i_Fgcu-MjE",
      "concepts": [
        {
          "title": "Le comportement inline-block",
          "theory": "Tous les éléments se comportent en block ou en inline, mais on peut réunir le meilleur des deux mondes en CSS, avec <code>display: inline-block</code>. Les éléments ciblés seront des blocks (et pourront donc avoir des dimensions définies en CSS, et des marges verticales), mais suivront le flux de texte de la page, sans causer de retour à la ligne.",
          "codes": {
            "html": "<ul><li>Nous devrions être des blocks...</li><li>...mais nous sommes désormais...</li><li>...sur la même ligne.</li></ul>",
            "css": "li { display: inline-block; }"
          },
          "info": "C'est une des techniques les plus simples et les mieux supportées pour mettre des éléments en ligne, si on ne se soucie pas trop de leur placement (pas d'alignements complexes à gérer). On peut par exemple la voir en action en haut de cette page : le numéro du chapitre et son titre sont dans deux balises séparées. Pour que le <code>h2</code> dans lequel se trouve le titre ne revienne pas à la ligne, il a été modifié en <code>inline-block</code>.",
          "links": [
            {
              "label": "block VS inline VS inline-block",
              "url": "https://stackoverflow.com/a/9189873"
            }
          ],
          "codepen": "JmBjOK",
          "question": {
            "text": "<code>opacity: 0</code> permettrait de cacher un élément, mais il prendrait toujours de la place. Quelle valeur donner à la propriété <code>display</code> pour le faire disparaître complètement ?",
            "answer": "none",
            "clue": "e"
          },
          "figure": {
            "src": "https://i.stack.imgur.com/mGTYI.png",
            "alt": "Comparaison des comportement inline, block et inline-block",
            "caption": "<code>inline-block</code> permet de positionner des blocks en inline, ou, dans l'autre sens, de faire se comporter les inline comme des blocks."
          }
        },
        {
          "title": "Faire flotter des éléments avec float",
          "theory": "La propriété <code>float</code> permet de faire flotter (sans blague) un élément. Un élément flottant à gauche, par exemple, se rangera en haut à gauche de son parent et les autres éléments viendront s'aligner à sa droite. Cette propriété à été mise en place pour permettre à du texte de s'adapter aux contours d'une image.",
          "codes": {
            "html": "<img src=\"cat.jpg\" alt=\"Un chat\" /><p>Je suis le texte de description du chat, j'aimerai que l'image soit flottante à ma gauche.</p>",
            "css": "img { float: left; }"
          },
          "warning": "La propriété <code>float</code> est encore souvent utilisée pour des mises en page complexes, particulièrement lorsque les navigateurs à prendre en compte sont trop vieux pour <code>flexbox</code> et <code>grid</code>, que nous aborderons plus loin. Mais si vous n'êtes pas dans ce cas, passez-vous en ! À part pour adapter le texte aux contours d'une image ou d'un bloc, son utilisation est souvent abusive (et source de bugs fréquents).",
          "links": [
            {
              "label": "Float & clear",
              "url": "https://www.w3schools.com/css/css_float.asp"
            }
          ],
          "codepen": "bmjNdy",
          "question": {
            "text": "<code>float</code> peut malheureusement causer beaucoup de problèmes. Si vous raccourcissez un des synopsis de l'exercice, de sorte à ce que le texte soit moins haut que l'image, vous verrez que cette dernière flotte en dehors de son parent. Comment s'appelle la technique que l'on est alors obligé d'utiliser pour rétablir le flux normal après le synopsis ? (la complexité de cette technique est une des raisons pour laquelle l'usage de float doit être limité au strict minimum)",
            "answer": "clearfix",
            "clue": "f"
          },
          "figure": {
            "src": "https://d3h6k4kfl8m9p0.cloudfront.net/uploads/2014/07/roland-f.-99v.jpg",
            "alt": "Une image flottante dans un très vieux livre",
            "caption": "Cette idée ne date pas d'hier : le monde du print a souvent influencé celui du web."
          }
        },
        {
          "title": "La position absolute",
          "theory": "Même si on modifie leur comportement, les éléments en <code>inline-block</code> et <code>float: left/right</code> restent dans le flux du document : ils se situent logiquement par rapport aux autres (en ligne, en flottant...). Mais il est possible de sortir complètement un élément du flux de la page avec la propriété <code>position: absolute</code>. Cela permet ensuite, avec les propriétés <code>top</code>, <code>bottom</code>, <code>left</code> et <code>right</code>, de positionner l'élément de manière absolue dans l'espace. Pratique pour les petits éléments décoratifs.",
          "codes": {
            "html": "<aside>Je suis une petite boîte qui s'affichera en haut à droite du document, à 10px du bord, en dehors du flux.</aside>",
            "css": "aside { position: absolute; top: 10px; right: 10px; }"
          },
          "info": "Un élément positionné de manière absolue se positionne par rapport à son <em>contexte de positionnement</em>, par défaut le <code>body</code>. Mais si on veut le positionner par rapport à un de ses parents (pour le mettre dans le coin d'une boîte, par exemple), on peut créer un nouveau contexte de positionnement en appliquant au parent <code>position: relative</code>. La technique du positionnement absolue est également à utiliser avec parcimonie.",
          "links": [
            {
              "label": "Exemple d'utilisation simple",
              "url": "http://www.partage-it.com/jai-enfin-compris-comment-utiliser-position-absolute-css/"
            }
          ],
          "codepen": "WaKvop",
          "figure": {
            "src": "http://anything.codes/gdi-intro-html-css/img/positioning-banner-concept.png",
            "alt": "Le positionnement absolu en CSS",
            "caption": "L'élément en position absolute se place par rapport à son plus proche parent en position relative (et le body s'il n'y en a pas)."
          }
        },
        {
          "title": "Flexbox : un modèle de positionnement puissant",
          "theory": "Si toutes les options présentées précédemment pouvaient dépanner dans des circonstances particulières, <code>flexbox</code>, pour peu que l'on ait pas à supporter de navigateurs trop anciens, est la première méthode de positionnement des éléments suffisament solide pour être utilisée à grande échelle. Pour utiliser <code>flexbox</code>, il faut simplement un élément parent et un ou plusieurs éléments enfants : on pourra alors manipuler facilement la position et la taille de ces derniers au sein du parent.",
          "codes": {
            "html": "<ul><li>Accueil</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "ul { display: flex; }"
          },
          "info": "Dans le code d'exemple, <code>ul</code> est le <em>flex container</em>, tandis que chaque <code>li</code> est un <em>flex item</em>.",
          "links": [
            {
              "label": "Support navigateur",
              "url": "https://caniuse.com/#feat=flexbox"
            }
          ],
          "codepen": "wYxaNq",
          "question": {
            "text": "Tout élément auquel on applique la propriété <code>display: flex</code> se comporte alors comme un block (suivi d'un retour à la ligne, donc). Avec quelle valeur peut-on garder combiner les comportements <code>inline-block</code> et <code>flex</code>, pour avoir des flexbox insérées dans le flux ?",
            "answer": "inline-flex",
            "clue": "l"
          },
          "figure": {
            "src": "https://cdn-images-1.medium.com/max/1250/1*ifusEqwI87nBKXgK9oZ_7A.gif",
            "alt": "La différence entre display: block et display: flex",
            "caption": "Un simple changement de display sur le parent de ces éléments créé un comportement similaire à <code>inline-block</code> sur chacun d'entre-eux, mais permettra par la suite beaucoup d'autres choses..."
          }
        },
        {
          "title": "Flexbox : les propriétés du conteneur",
          "theory": "Les propriétés <code>flexbox</code> s'appliquent soit au conteneur, soit aux items. En utilisant les propriétés de conteneur (et donc en ciblant l'élément qui est en <code>display: flex</code>), on peut définir le comportement global : dans quel sens et direction les items sont disposés, comment sont-ils répartis dans l'espace disponible, si les items peuvent être disposés sur plusieurs lignes ou non...",
          "codes": {
            "html": "<ul><li>Accueil</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "ul { display: flex; flex-wrap: wrap; justify-content: center; }"
          },
          "info": "Dans l'exemple, la propriété <code>flex-wrap</code> autorise les éléments à revenir à la ligne si le conteneur devient trop petit (sinon, ils diminueront automatiquement en largeur, ce qui n'est pas toujours souhaitable). La propriété <code>justify-content</code> permet elle de centrer les éléments sur l'axe. Ce ne sont pas les seules propriétés appliquables au conteneur !",
          "links": [
            {
              "label": "Propriétés flexbox",
              "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
            }
          ],
          "codepen": "yRqvKv",
          "question": {
            "text": "Quelle valeur donner à <code>flex-direction</code> pour répartir les éléments non pas horizontalement, mais verticalement ?",
            "answer": "column",
            "clue": "l"
          },
          "figure": {
            "src": "/img/menu-lemonde.png",
            "alt": "Le menu du site Le Monde",
            "caption": "Les menus utilisent très fréquemment <code>flexbox</code> pour présenter leurs liens élégamment."
          }
        },
        {
          "title": "Flexbox : les propriétés des items",
          "theory": "Pour affiner le tout, il est possible de définir des propriétés spécifiques pour chaque item. Il est par exemple possible de ré-ordonner les éléments sans changer le HTML, ce qui est particulièrement pratique pour le responsive (mais c'est un autre sujet). On peut aussi donner à certains éléments plus d'espace, ou les aligner différement des autres.",
          "codes": {
            "html": "<ul><li>Accueil</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "ul { display: flex; } li { flex-grow: 1; }"
          },
          "info": "Le code de l'exemple est très répandu : il permet de dire à chaque item de grandir en prenant une part de l'espace disponible. Ainsi, les 3 items vont chacun prendre un tiers de la largeur du parent. Vous trouverez souvent utilisée la propriété <code>flex</code>, qui est un raccourci pour définir en une seule ligne <code>flex-grow</code>, <code>flex-shrink</code> et <code>flex-basis</code>.",
          "links": [
            {
              "label": "Propriétés flexbox",
              "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
            }
          ],
          "codepen": "QZBryX",
          "question": {
            "text": "Quelle propriété utiliser à la place de <code>flex-grow</code> si on ne souhaite pas que les items prennent toute la largeur, mais aient une taille spécifique ? Cette propriété est donc l'équivalent de <code>width</code> en mode <code>row</code> ou de <code>height</code> en mode <code>column</code>.",
            "answer": "flex-basis",
            "clue": "b"
          },
          "figure": {
            "src": "https://designmodo.com/wp-content/uploads/2016/04/flexbox-css-social.jpg",
            "alt": "Une gallerie de photos",
            "caption": "Les galleries peuvent être réalisées grâce à <code>flexbox</code>, en faisant varier la propriété <code>flex-grow</code> pour donner plus d'espace à certains éléments."
          }
        },
        {
          "title": "Grid : flexbox au carré",
          "theory": "<code>flexbox</code> est très utile pour gérer le positionnement d'éléments sur un axe unique. Pour gérer la structure en deux dimensions d'un site, la spécification <code>grid</code> va nous prêter main forte. Elle permet de définir en CSS, une grille (sans utiliser des béquilles bientôt obsolètes telles que bootstrap), et de placer les éléments qu'elle contient à l'intérieur de cette grille. Comme <code>flexbox</code>, il faut pour l'utiliser structurer votre html avec un parent et plusieurs enfants.",
          "codes": {
            "html": "<body><div class=\"a\"></div><div class=\"b\"></div><div class=\"c\"></div><div class=\"d\"></div></body>",
            "css": "body { display: grid; grid-template-columns: 100px&nbsp;200px; grid-template-rows: 200px&nbsp;300px; } .a { grid-column: 1; grid-row: 1; } .b { grid-column: 2; grid-row: 1; } .c { grid-column: 1; grid-row: 2; } .d { grid-column: 2; grid-row: 2; }"
          },
          "info": "L'exemple de code ici présenté est inhabituel mais lisible si on le découpe bien. On définit d'abord que le <code>body</code> sera une grille avec deux colonnes (de 100px et 200px) et deux lignes (de 200px et 300px). Ensuite, on positionne chaque enfant dans la grille. Par exemple, l'élément de classe <code>.a</code> sera dans la première colonne, première ligne.",
          "links": [
            {
              "label": "Support navigateur",
              "url": "https://caniuse.com/#feat=css-grid"
            },
            {
              "label": "Tutoriel pas à pas",
              "url": "https://www.alsacreations.com/article/lire/1388-CSS3-Grid-Layout.html"
            },
            {
              "label": "Toutes les propriétés",
              "url": "https://css-tricks.com/snippets/css/complete-guide-grid/"
            }
          ],
          "codepen": "rqrqjd",
          "question": {
            "text": "Quelle est la propriété qui permet de définir l'espacement à laisser autour de chaque colonne et de chaque ligne d'une grille ?",
            "answer": "grid-gap",
            "clue": "i"
          },
          "figure": {
            "src": "https://herchel.com/static/firefox-grid-devtools-16dad2a34be0720e0a8aedb1d563d97b-e409e.png",
            "alt": "Une grille CSS observée avec l'inspecteur d'éléments de Google Chrome",
            "caption": "L'inspecteur d'élément permet de visualiser facilement une grille CSS. Essayez sur le codepen, ou sur l'élément de classe <code>.page</code> ici-même !"
          }
        },
        {
          "title": "Grid : mesures flexibles",
          "theory": "Dans la pratique, et contrairement à l'exemple précédent, les grilles sont rarement composées uniquement de valeurs fixes, car les environnement sont de taille variable. Quand on définit une grille, on peut utiliser les <code>px</code>, mais aussi le mot-clé <code>auto</code>, qui permettra à la grille de s'adapter au contenu. On peut aussi utiliser les fragments avec <code>fr</code> : comme avec <code>flexbox</code>, les fragments permettent de distribuer l'espace restant : si les 3 colonnes ont une largeur d'<code>1fr</code>, elle prendront chacune un tiers de la taille disponible. Notez enfin le mot-clé <code>repeat</code>, qui permet de générer plusieurs colonnes ou lignes sans avoir à se répéter.",
          "codes": {
            "css": "body { display: grid; grid-template-columns: 1fr&nbsp;1000px&nbsp;1fr; grid-template-rows: 200px&nbsp;repeat(3,&nbsp;500px); }"
          },
          "info": "La déclaration <code>grid-template-columns</code> se lit ainsi : une colonne de 1000px, entourée de deux colonnes remplissant l'espace restant (<code>1fr</code> chacune). On verra souvent cela pour créer un conteneur central de contenu, c'est d'ailleurs ce qui est fait sur ce site. La déclaration <code>grid-template-rows</code> se lit : une ligne de <code>200px</code>, puis 3 lignes de <code>500px</code>.",
          "links": [
            {
              "label": "Toutes les propriétés",
              "url": "https://css-tricks.com/snippets/css/complete-guide-grid/"
            }
          ],
          "codepen": "QZBJzY",
          "question": {
            "text": "Quel mot-clé permet de définir une colonne ou une ligne dont la taille varie entre un minimum et un maximum en s'adaptant à l'espace disponible ?",
            "answer": "minmax",
            "clue": "x"
          },
          "figure": {
            "src": "https://thedaylightstudio.com/assets/images/blog/grid-grid-smaller.gif",
            "alt": "Une grille CSS s'adaptant à la largeur du viewport",
            "caption": "Nous n'y sommes pas encore, mais des grilles utilisant les mesures flexibles sont le caviar des techniques responsives."
          }
        },
        {
          "title": "Grid : les zones nommées",
          "theory": "Jusqui'ici, on assigne nos éléments à des cases en spécifiant un numéro de colonne et un numéro de ligne. Mais, bien qu'il n'y ait pas de recommendation officielle sur la meilleure méthode, on peut aussi nommer les parties avec <code>grid-template-area</code> pour placer les éléments plus facilement avec <code>grid-area</code>.",
          "codes": {
            "html": "<body><div class=\"a\"></div><div class=\"b\"></div><div class=\"c\"></div></body>",
            "css": "body { display: grid; grid-template-columns: 100px&nbsp;200px; grid-template-rows: 200px&nbsp;300px; grid-template-areas: \"a&nbsp;a\" \"b&nbsp;c\"; } .a { grid-area: a; } .b { grid-area: b; } .c { grid-area: c; }"
          },
          "info": "Quand on déclare la valeur de <code>grid-template-areas</code>, chaque chaîne entre guillemets représente une ligne. Grâce à la déclaration de l'exemple, la balise de classe <code>a</code> saura se placer sur la première ligne de la grille, en s'étalant sur deux colonnes.",
          "links": [
            {
              "label": "Documentation MDN sur les zones nommées",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout/D%C3%A9finir_des_zones_sur_une_grille"
            }
          ],
          "codepen": "EdpMdV",
          "question": {
            "text": "Quelle propriété peut-on appliquer à un item de grille pour qu'il soit centré dans sa cellule (utile dans le cas où il ne fait pas toute la taille de cette dernière) ?",
            "answer": "place-self",
            "clue": "e"
          },
          "figure": {
            "src": "https://image.slidesharecdn.com/wceu-2017-cssgridexport-170616175947/95/css-grid-changes-everything-about-web-layouts-wordcamp-europe-2017-68-638.jpg?cb=1497682800",
            "alt": "L'utilisation de grid-template-areas",
            "caption": "Cette technique peut-être la base de nombreux designs."
          }
        }
      ]
    },
    {
      "title": "Responsive & Mobile First",
      "description": "Manipulation des media queries et autres bonnes pratiques pour réaliser des intégrations à toute épreuve face à l'imprévisible variété des terminaux client.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vRlK3Z39-Tk2IMYmGtoM4MyF3Ivp-NJpno2sVT42BpqJvDQZQ2fTKs-teRJu6qEO7yX4bNcenChHPa_/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "pixels",
        "text": "Vous ne connaîtrez jamais leur nombre exact sur l'appareil de votre cible. N'essayez pas de reproduire les maquettes au pixel près : ce sont des images fixes. Le viewport lui est un environnement à géométrie (très) variable, et votre mission et de tenir compte de cette fluidité du mieux possible."
      },
      "correctionVideoYoutubeId": "f3oRKzE9o_s",
      "concepts": [
        {
          "title": "Notre première media query",
          "theory": "Une <em>media query</em> permet d'appliquer un code CSS différent selon le contexte, par exemple selon la taille de l'écran. En suivant la méthode <em>Mobile First</em>, on décidera d'appliquer par défaut les propriétés qui seront interprétées sur des petits écrans, puis de changer ces propriétés quand l'écran dépasse une certaine largeur.",
          "codes": {
            "html": "<div>Je suis en bleu normalement, mais en rouge sur les grands écrans.</div>",
            "css": "div { color: blue; } @media (min-width: 1200px) { div { color: red; }}"
          },
          "warning": "Vous croiserez souvent la soeur de <code>min-width</code>, <code>max-width</code>, dans les exemples. C'est elle qu'on utilise lorsqu'on fait du <em>Responsive Retrofitting</em> (où l'on part des grands écrans pour aller vers les petits). C'est une technique qui s'avère moins efficace car le code le plus complexe concerne généralement les grands écrans, on préfère donc aller du plus petit au plus grand (Mobile First).",
          "links": [
            {
              "label": "Doc MDN sur les media queries",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/Requ%C3%AAtes_m%C3%A9dia/Utiliser_les_Media_queries"
            }
          ],
          "codepen": "WamwPm",
          "question": {
            "text": "Il existe une contrepartie à <code>min-width</code>, pour cibler les écrans faisant plus d'une certaine hauteur, laquelle ? Non, il n'y a pas de piège, c'est bien aussi simple que ce vous pensez.",
            "answer": "min-height",
            "clue": "e"
          },
          "figure": {
            "src": "https://d31v04zdn5vmni.cloudfront.net/blog/wp-content/uploads/2014/11/definingmobile-mediaquery.jpg",
            "alt": "Une media query ciblant les écrans.",
            "caption": "Vous verrez parfois précisé <code>@media screen</code> au début des media queries. Cela permet de confiner la condition aux écrans, en opposition à <code>print</code> ou <code>speech</code>. Sauf cas particulier, vous pouvez vous en passer."
          }
        },
        {
          "title": "Media queries à sélecteurs multiples",
          "theory": "Généralement, ce n'est pas un seul élément qui sera impacté par un changement de taille, mais plusieurs. On regroupera alors les règles dans une unique media query.",
          "codes": {
            "css": "h1 { font-weight: bold; } h2 { margin-bottom: 20px; } @media (min-width: 768px) { h1 { font-weight: normal; } h2 { margin-bottom: 40px; }} @media (min-width: 1280px) { h2 { margin-bottom: 60px; }}"
          },
          "info": "C'est une autre raison d'écrire des sélecteurs les plus simples possibles (juste une classe, dans la majeure partie des cas) : cela réduit les erreurs d'une media query à une autre.",
          "links": [
            {
              "label": "Exemples de designs responsives",
              "url": "https://mediaqueri.es/"
            }
          ],
          "codepen": "JmzbyX",
          "question": {
            "text": "En analysant le code de cette page avec les outils de développement de votre navigateur, pouvez-vous dire à partir de quelle largeur les blocs de code et les blocs \"À noter\" se placent en vis-à-vis ?",
            "answer": "1280px",
            "clue": "p"
          },
          "figure": {
            "src": "/img/responsive.png",
            "alt": "Le site vu sur mobile",
            "caption": "Sans <em>media queries</em>, pas de version mobile de ce merveilleux support de cours."
          }
        },
        {
          "title": "Media queries à plusieurs conditions",
          "theory": "Bien qu'une grande partie ne soit jamais utilisée, les media queries permettent de cibler de nombreuses spécifitées autres que la taille de l'écran. On combine différentes conditions avec le mot clé <em>and</em>.",
          "codes": {
            "css": "body { background-image: url(\"small.jpg\"); } @media (min-width: 768px) { body { background-image: url(\"medium.jpg\");}} @media (min-width: 768px) and (min-resolution: 192dpi) { body { background-image: url(\"large.jpg\"); }}"
          },
          "info": "En plus de <code>width</code> et <code>height</code>, sont parfois utilisée <code>aspect-ratio</code> (pour cibler certaines formes d'écran) <code>orientation</code> (landscape ou portrait) et <code>resolution</code> (pour cibler les écran Retina / Full HD, comme dans l'exemple). Les autres sont anecdotiques.",
          "links": [
            {
              "label": "Liste des media features",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/Requ%C3%AAtes_m%C3%A9dia/Utiliser_les_Media_queries#Caract%C3%A9ristiques_m%C3%A9dia_(media_features)"
            }
          ],
          "codepen": "wYOgEv",
          "question": {
            "text": "Le mot-clé <code>and</code> exige que les différentes conditions de l'expression soient remplies. Avec quels caractères peut-on cibler plusieurs conditions séparément, pourvu que l'une d'entre elles soit remplie ?",
            "answer": "virgules",
            "clue": "s"
          },
          "figure": {
            "src": "https://www.iab.com/wp-content/uploads/2017/11/Mobile_Video_Screen_Orientation.png",
            "alt": "Statistiques d'orientation des appareils mobiles",
            "caption": "Les appareils mobiles et plus particulièrement les tablettes seront amenées à pivoter, vous obligeant parfois à adapter votre contenu (bien que souvent <code>min-width</code> suffise !)"
          }
        },
        {
          "title": "Media queries & flexbox",
          "theory": "C'est combinées aux techniques de layout que les media queries prennent tout leur intérêt. Il est très fréquent de voir des éléments disposés les uns sous les autres en mobile se placer en ligne lorsque la place leur permet. Les menus sont un exemple courant de ce comportement.",
          "codes": {
            "html": "<ul><li>Présentation</li><li>Compétences</li><li>Contact</li></ul>",
            "css": "@media (min-width: 768px) { ul { display: flex; justify-content: space-between; }}"
          },
          "info": "Vous comprenez peut-être ici pourquoi on part d'une intégration mobile vers une intégration plus large : si on partait du desktop, il faudrait de base définir <code>display: flex</code>, et ensuite annuler ce comportement avec <code>display: block</code> pour les écrans plus petits. En codant en <em>Mobile First</em>, on tire parti du fait que le layout se complexifie généralement avec la taille de l'écran, et non l'inverse.",
          "links": [
            {
              "label": "Flexbox Cheat Sheet",
              "url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
            }
          ],
          "codepen": "OBGWbB",
          "question": {
            "text": "Quelle propriété utiliser sur un conteneur flex pour permettre à ses enfants de revenir à la ligne plutôt que de s'écraser ?",
            "answer": "flex-wrap",
            "clue": "l"
          },
          "figure": {
            "src": "https://thedaylightstudio.com/assets/images/blog/flexbox-grid-smaller.gif",
            "alt": "Un conteneur flexbox réagissant à la taille du viewport",
            "caption": "Une fois que vous savez faire ça, tout devient possible !"
          }
        },
        {
          "title": "Media queries & grid",
          "theory": "De la même façon qu'avec <em>flexbox</em>, la combinaison des media queries et de <em>grid</em> va nous permettre de faire évoluer la mise en page d'une taille d'écran à une autre.",
          "codes": {
            "html": "<body><div class=\"a\"></div><div class=\"b\"></div><div class=\"c\"></div></body>",
            "css": "@media (min-width: 900px) {body { display: grid; grid-template-columns: 1fr&nbsp;2fr; grid-template-rows: repeat(2,&nbsp;auto); grid-template-areas: \"a&nbsp;a\" \"b&nbsp;c\"; } .a { grid-area: a; } .b { grid-area: b; } .c { grid-area: c; }}"
          },
          "warning": "Contrairement au code de l'exemple, nommez vos zones avec des termes sémantiques, c'est à dire qui désignent la fonction de l'élément (header, main, list, menu...). Comme pour les classes.",
          "links": [
            {
              "label": "Grid Cheat Sheet",
              "url": "https://css-tricks.com/snippets/css/complete-guide-grid/"
            }
          ],
          "codepen": "wYZpKB",
          "question": {
            "text": "Quel caractère utiliser dans la propriété <code>grid-template-areas</code> si on souhaite laisser une cellule vide ?",
            "answer": "point",
            "clue": "i"
          },
          "figure": {
            "src": "https://mdn.mozillademos.org/files/14755/11-grid-inspector-12col-layout.png",
            "alt": "Une grille analysée avec les outils de développement",
            "caption": "N'oubliez pas que vous pouvez analyser les grilles de votre page avec les outils de développement. Cela est indispensable pour mettre en évidence les erreurs possibles."
          }
        },
        {
          "title": "Trouver les bons breakpoints",
          "theory": "Un <em>breakpoint</em> (point de rupture) est une taille à laquelle le contenu du site ou une partie de ce contenu change d'apparence (autrement dit, les dimensions utilisées dans les media queries). On ne sait pas toujours quelle taille utiliser, car les appareils ont des tailles très variées. 768px, 1024px, 1280px ? Il n'y a pas de bonne réponse : laisser votre contenu dicter vos media queries, et non l'inverse. Ne vous imposez pas des breakpoints avant d'intégrer, les contraintes que vous rencontrerez les révèleront progressivement.",
          "info": "Généralement, un site compte un, deux ou trois breakpoints majeurs (ré-organisation du layout global). Mais il peut y avoir en plus des breakpoints secondaires, qui ne concernent qu'une section en particulier. L'important est l'harmonie du site à toutes les tailles.",
          "links": [
            {
              "label": "Les innombrables tailles d'écrans",
              "url": "http://screensiz.es/"
            }
          ],
          "codepen": "VENxaV",
          "figure": {
            "src": "/img/breakpoints.png",
            "alt": "Start with the small screen first, then expand until it looks like shit. Time for a breakpoint !"
          }
        },
        {
          "title": "Les unités vw & vh",
          "theory": "Au-delà des media queries, faire un site responsive c'est aussi utiliser les unités qui permettent de s'adapter à la taille du viewport. Par exemple, <code>1vw</code> et <code>1vh</code> équivalent respectivement à 1 centième de la largeur et de la hauteur du viewport. Ainsi, la mesure <code>100vh</code> représente la totalité de la hauteur du viewport.",
          "codes": {
            "html": "<div class=\"hero\">Je prends toute la taille disponible !</div>",
            "css": ".hero { width: 100vw; height: 100vh; }"
          },
          "info": "Les blocks prenant 100% de la largeur disponible par défaut, le <code>100vw</code> de l'exemple est en réalité superflu. Pour les hauteurs en revanche, c'est beaucoup moins simple et il est bien pratique d'avoir accès à cette unité.",
          "links": [
            {
              "label": "La difficulté avec height",
              "url": "https://la-cascade.io/pourquoi-height-100-ne-marche-pas/"
            }
          ],
          "codepen": "KGYeeG",
          "question": {
            "text": "Quelle unité représente 1 centième du côté le plus grand du viewport ? (par exemple, sur un écran de 800*600, un centième de 800)",
            "answer": "vmax",
            "clue": "x"
          },
          "figure": {
            "src": "https://www.yunbitsoftware.com/blog/wp-content/uploads/2017/06/imagen2-vh.png",
            "alt": "La mesure 100vh utilisée sur différents appareils",
            "caption": "La mesure <code>100vh</code> est régulièrement utilisée pour faire référence à la hauteur du viewport.S"
          }
        }
      ]
    },
    {
      "title": "Transitions & Animations CSS",
      "description": "Utiliser les fonctionnalités du CSS pour effectuer des transitions fluides et des animations plus complexes.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vQVdYR6AlPe-T8nu0FUShzORZIDPl6yGp_9hVxtY_nVy7AMkdHjou4E4Sfu7IeSxQ9Ew6VtkqhEQCYE/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "repaint",
        "text": "Un <em>repaint</em> est l'opération effectuée par un navigateur lorsqu'il doit \"repeindre\", c'est à dire rendre visuellement un élément à nouveau. C'est ce qu'il se passe de nombreuses fois par seconde lorsqu'on utilise les transitions et les animations, et cela est coûteux en performance sur certains terminaux, alors attention à ne pas en abuser !"
      },
      "correctionVideoYoutubeId": "w6ihp1keW1s",
      "concepts": [
        {
          "title": "Une première transition",
          "theory": "Pour chaque élément, vous pouvez définir en CSS lesquelles de ses propriétés devront transitionner avec la propriété <code>transition</code>. Dès que la propriété concernée changera, elle le fera en respectant la transition demandée. On précise d'abord quelle propriété est concernée, puis combien de temps doit prendre la transition.",
          "codes": {
            "html": "<div>Je grandis quand je suis survolée</div>",
            "css": "div { width: 200px; transition: width&nbsp;0.5s; } div:hover { width: 300px; }"
          },
          "warning": "Notez bien que la propriété <code>transition</code> se place dans le sélecteur CSS concernant l'état initial de l'élémenent concerné, pas au moment où la transition s'applique. Autrement dit, on \"prépare\" la transition à venir.",
          "links": [
            {
              "label": "Introduction aux transitions",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Transitions/Utiliser_transitions_CSS"
            }
          ],
          "codepen": "xQxPVy",
          "question": {
            "text": "La propriété <code>animation</code> est une propriété raccourcie (tout comme <code>background</code> est en fait un raccourci permettant de définir <code>background-image</code>, <code>background-color</code>...). Quel est le nom de la propriété permettant spécifiquement de définir la durée de la transition ?",
            "answer": "transition-duration",
            "clue": "i"
          },
          "figure": {
            "src": "https://cdn-images-1.medium.com/max/1000/1*0bES0_PCswamMscW-uUuYg.gif",
            "alt": "Les valeurs de transition souvent utilisées sur le web",
            "caption": "L'animation sur le web va vite : on compte souvent en dixièmes de secondes. C'est le meilleur compris entre visuel et réactivité pour les utilisateurs."
          }
        },
        {
          "title": "Le timing de la transition",
          "theory": "À ne pas confondre avec la durée de la transition, le <em>timing</em> détermine la répartition temporelle des étapes de la transition (rapide au début et lent à la fin, par exemple). Il est le troisième paramètre de la propriété <code>transition</code> et vaut par défaut <code>ease</code>, ce qui est adapté à la plupart des cas. Mais il est parfois utile de le modifier.",
          "codes": {
            "css": "div { width: 200px; transition: width&nbsp;0.5s&nbsp;cubic-bezier(.29,&nbsp1.01,&nbsp1,&nbsp-0.68); } div:hover { width: 300px; }"
          },
          "info": "L'instruction <code>cubic-bezier</code> permet de définir des timing customisés. Heureusement, les mots-clés disponibles (<code>ease</code>, <code>linear</code>...) nous évitent d'avoir à utiliser cela sauf cas particulier. Par exemple, <code>linear</code> correspond à <code>cubic-bezier(0, 0, 1, 1)</code>.",
          "links": [
            {
              "label": "Visualisation des timings possibles",
              "url": "https://cssreference.io/property/transition-timing-function/"
            },
            {
              "label": "Générateur de cubic-bezier",
              "url": "http://cubic-bezier.com"
            }
          ],
          "codepen": "dQyJYM",
          "question": {
            "text": "Quel mot clé permet d'avoir une transition non pas continue, mais s'effectuant en un nombre fini d'étapes ?",
            "answer": "steps",
            "clue": "p"
          },
          "figure": {
            "src": "https://static.commonlounge.com/fp/600w/DR4iAGakwKWanzAqAZrSE7Y091530232546_kc",
            "alt": "Comparaison de différent timing de transition",
            "caption": "<code>ease</code> est la valeur par défaut et fera souvent l'affaire, mais il est toujours intéressant d'essayer d'autres effets."
          }
        },
        {
          "title": "Décaler le départ d'une transition",
          "theory": "Par défaut, les transitions sont immédiates. Mais il est possible de leur ajouter un délai qui précédera leur déclenchement. C'est le quatrième paramètre de la propriété <code>transition.</code>",
          "codes": {
            "css": "div { width: 200px; transition: width&nbsp;0.5s&nbsp;ease&nbsp;1s; } div:hover { width: 300px; }"
          },
          "warning": "Si vous voulez simplement modifier le décalage de transition d'un élément dont la transition est déjà définie par un autre sélecteur, utilisez la propriété <code>transition-delay</code> directement, plutôt que de redéfinir les 4 paramètres à chaque fois.",
          "links": [
            {
              "label": "La propriété transition-delay",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/transition-delay"
            }
          ],
          "codepen": "bQGaKx",
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2016/08/start-stop1b.gif",
            "alt": "Des éléments animés en CSS avec un délai différent",
            "caption": "<code>transition-delay</code> est indispensable pour réaliser ce genre d'effet."
          }
        },
        {
          "title": "Animer plusieurs propriétés en même temps",
          "theory": "Comment animer l'opacité et la taille d'un élément simultanément ? Il suffit de déclarer une animation pour chaque propriété, en les séparant par des virgules.",
          "codes": {
            "html": "<div>Au survol, ma hauteur, ma largeur et mon opacité transitionnent, chacune avec leurs paramètres spécifiques.</div>",
            "css": "div { width: 200px; height: 200px; opacity: 0.5; transition: width&nbsp;0.5s,&nbsp;height&nbsp;0.5s,&nbsp;opacity&nbsp;0.3s&nbsp;linear; } div:hover { width: 300px; height: 300px; opacity: 1; }"
          },
          "info": "Si toutes les propriétés concernés ont la même durée, le même timing ou le même décalage, il peut être intéressant d'utiliser les propriétés spécifiques plutôt que de répéter ces informations pour chaque propriété.",
          "codepen": "xQxYgL",
          "question": {
            "text": "Un mot clé permet de faire transitionner toutes les propriétés d'un élément à la fois, lequel ? On évite cependant de l'utiliser pour éviter les effets secondaires et ne pas dégrader la performance de le page.",
            "answer": "all",
            "clue": "a"
          },
          "figure": {
            "src": "https://i.pinimg.com/originals/83/b9/5b/83b95b986e8d940031de5c2624da3537.gif",
            "alt": "Une transition CSS complexe",
            "caption": "Un savant mélange de transitions (certaines retardées) sur différentes propriétés de l'élément survolé et de ses enfants."
          }
        },
        {
          "title": "Transition déclenchées par JavaScript",
          "theory": "Toutes les transitions ne sont pas déclenchées par un survol, loin de là. On utilisera souvent JavaScript pour écouter un événement (scroll, click...) et manipuler des classes pour permettre au CSS de réagir en conséquence.",
          "codes": {
            "html": "<div id=\"element\">Cliquez sur moi pour que je devienne bleu</div>",
            "css": "div { background-color: yellow; transition: background-color&nbsp;0.3s; } .is-clicked { background-color: blue; }",
            "js": "document<br/>&nbsp;&nbsp;.getElementById('element')<br/>&nbsp;&nbsp;.addEventListener('click', function(e) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;e.target.classList.add('is-clicked');<br/>&nbsp;&nbsp;});"
          },
          "info": "Que fait le JavaScript de ce code ? Lorsqu'on clique sur la div ayant l'id <code>element</code>, il ajoute à l'élement en question (<code>e.target</code>) la classe <code>is-clicked</code>. Cela permet au CSS de faire une modification, avec la transition associée.",
          "links": [
            {
              "label": "Écouter des événements en JS",
              "url": "https://www.w3schools.com/jsref/met_element_addeventlistener.asp"
            }
          ],
          "codepen": "pQoLPW",
          "question": {
            "text": "Quel événement peut-on écouter en JavaScript pour produire le même effet que le sélecteur CSS <code>:hover</code> ?",
            "answer": "mouseover",
            "clue": "e"
          },
          "figure": {
            "src": "http://developer.telerik.com/wp-content/uploads/2016/09/scrollreveal_basic_opt.gif",
            "alt": "Un élément apparaissant lorsqu'il entre dans le viewport",
            "caption": "On peut mener ça loin, mais la logique de base reste toujours la même. Ici, lorsque l'entreé de l'élément dans le viewport est détéctée par le JavaScript, une classe est ajoutée qui permet au CSS d'effectuer une transition d'apparition."
          }
        },
        {
          "title": "La propriété transform ",
          "theory": "Avant de passer aux transitions, un petit aparté sur la propriété <code>transform</code>. À elle seule, elle permet de modifier l'aspect d'un élément de nombreuses façon : modification de la taille, translation, rotation, déformation... C'est <em>la</em> propriété à utiliser dès que possible, d'autant plus qu'elle est optimisée pour les performances d'affichage. Bonus : les éléments sont transformés sans impact sur le flux des éléments de la page (autrement dit, ça ne fait pas bouger les éléments alentours), ce qui serait très problématique dans le cas contraire.",
          "codes": {
            "html": "<div>Transformez-moi !</div>",
            "css": "div { transform: translateY(50px) scale(1.2) rotate(45deg); }"
          },
          "info": "Il n'y a pas de propriétés individuelles pour <code>translate</code>, <code>scale</code>... toutes les transformations doivent être chaînées dans la même déclaration <code>transform</code>.",
          "links": [
            {
              "label": "La propriété transform",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/transform"
            }
          ],
          "codepen": "eQNJOK",
          "figure": {
            "src": "http://nikpro.com.au/wp-content/uploads/2018/07/css-transform.png",
            "alt": "Un exemple de transformation CSS 3D",
            "caption": "On peut aussi gérer de la 3D avec les transformations. Quelle que soit la transformation appliquée, ce n'est qu'une modification visuelle : du point de vue du flux, l'élément n'a changé ni de taille ni de position."
          }
        },
        {
          "title": "Une animation CSS simple",
          "theory": "Les transitions CSS ne peuvent pas gérer tous les cas, notamment si on souhaite animer un élément sans qu'un événement extérieur ne vienne changer ses propriétés : autrement dit, si on souhaite qu'il soit animé par nature plutôt que par les circonstances. Comme avec les blocs <code>@font-face</code>, on peut déclarer une ou plusieurs animations en haut de notre code avec un bloc <code>@keyframes</code>. Ce bloc décrit les états successivement appliqués à l'élément qui les recevra grâce à la propriété <code>animation</code>. Comme avec les animations, le deuxième paramètre est la durée prise.",
          "codes": {
            "html": "<div>Je me déplace vers la droite en 5 secondes !</div>",
            "css": "@keyframes&nbsp;move-to-right { from { transform: translateX(0); } to { transform: translateX(500px); }} div { animation: move-to-right&nbsp;5s; }"
          },
          "warning": "<code>from</code> et <code>to</code> correspondent respectivement à l'état de début et de fin de l'animation. En réalité, <code>from</code> est inutile dans cet exemple, car l'élément a déjà une translation horizontale de 0 pixel, autrement dit son état normal. Quand on part de l'état normal pour aller vers un autre état, on peut donc simplement utiliser le bloc <code>to</code>. À l'inverse, on peut utiliser le bloc <code>from</code> uniquement si on part d'un état différent pour revenir à l'état initial.",
          "links": [
            {
              "label": "La propriété raccourcie animation",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/animation"
            }
          ],
          "codepen": "wQBNyO",
          "question": {
            "text": "Quel est le nom complet de la propriété qui permet de jouer l'animation un nombre spécifique de fois, ou bien à l'infini ?",
            "answer": "animation-iteration-count",
            "clue": "t"
          },
          "figure": {
            "src": "https://projects.lukehaas.me/css-loaders/screenshot.gif",
            "alt": "Différents indicateurs d'activité",
            "caption": "Les indicateurs d'activité (<em>throbber</em> en anglais) sont un exemple courant d'animations perpétuelles."
          }
        },
        {
          "title": "Délai et timing des animations",
          "theory": "Les animations ont beaucoup en commun avec les transitions, notamment le fait de pouvoir prendre une fonction de timing et un délai avant le déclenchement, respectivement en 3e et 4e paramètres.",
          "codes": {
            "html": "<div>Je me déplace vers la droite en 5 secondes !</div>",
            "css": "@keyframes&nbsp;move-to-right { from { transform: translateX(0); } to { transform: translateX(500px); }} div { animation: move-to-right&nbsp;5s&nbsp;cubic-bezier(.29,&nbsp1.01,&nbsp1,&nbsp-0.68)&nbsp;1s; }"
          },
          "info": "Comme toujours, vous pouvez utiliser directement des propriétés spécifiques si besoin, ici <code>animation-timing-function</code> et <code>animation-delay</code>.",
          "links": [
            {
              "label": "Visualisation des timings possibles",
              "url": "https://cssreference.io/property/transition-timing-function/"
            },
            {
              "label": "Générateur de cubic-bezier",
              "url": "http://cubic-bezier.com"
            }
          ],
          "codepen": "vQEPro",
          "question": {
            "text": "Quel <em>timing function</em> représente un départ progressif et une arrivée brusque ?",
            "answer": "ease-in",
            "clue": "n"
          },
          "figure": {
            "src": "http://www.desarrollolibre.net/public/images/example/css/letra/letras_animacion.gif",
            "alt": "Un effet CSS utilisant les délais d'animation",
            "caption": "Les délais peuvent servir à décaler les points de démarrage de différents constituants d'une animation plus vaste."
          }
        },
        {
          "title": "Ajouter des images clés",
          "theory": "Lorsqu'on utilise des transitions CSS, on contrôle le départ et l'arrivée, mais pas ce qui se passe entre les deux. Les animations nous permettent de définir des images clés, étapes par lesquelles devront passer les éléments animés, plutôt que d'effectuer une transition directe. Cela permet d'obtenir des effets beaucoup plus complexes.",
          "codes": {
            "html": "<div>Je me déplace d'abord vers la droite, puis vers le bas... Avec une transition, je me déplacerai directement en diagonale.</div>",
            "css": "@keyframes&nbsp;right-and-down { 50% { transform: translateX(300px); } to { transform: translate(300px,&nbsp;200px); }} div { animation: right-and-down&nbsp;5s; }"
          },
          "warning": "La propriété <code>transform</code> est puissante, mais elle nous oblige à combiner les différentes valeurs que l'on souhaite appliquer. Dans l'exemple, on a du préciser dans la deuxième étape <code>translate(300px, 200px)</code> pour ne pas perdre la translation préalablement effectuée sur l'axe X.",
          "links": [
            {
              "label": "Quelques exemples impressionnants",
              "url": "https://codeburst.io/html-css-and-javascript-10-awesome-codepens-to-inspire-you-420bbde87be1"
            }
          ],
          "codepen": "jQPEoQ",
          "figure": {
            "src": "https://s3.amazonaws.com/media-p.slid.es/uploads/174419/images/2582937/husky.gif",
            "alt": "Un chien animé avec les animations CSS",
            "caption": "Il y a les personnes qui font des gifs. Et puis il y a les personnes qui font tout avec des transformations CSS."
          }
        },
        {
          "title": "Animations déclenchées par JavaScript",
          "theory": "Similairement aux transitions, les animations peuvent être appliquées à un moment précis grâce à l'utilisation de JavaScript.",
          "codes": {
            "html": "<div id=\"element\">Cliquez sur moi pour que je tourne sur moi-même.</div>",
            "css": "@keyframes&nbsp;rotate { to { transform: rotate(360deg); } } .is-clicked { animation: rotate&nbsp;1s; }",
            "js": "document<br/>&nbsp;&nbsp;.getElementById('element')<br/>&nbsp;&nbsp;.addEventListener('click', function(e) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;e.target.classList.add('is-clicked');<br/>&nbsp;&nbsp;});"
          },
          "warning": "N'oubliez pas de n'utiliser les animations que si les transitions ne sont pas suffisantes, par soucis de simplicité !",
          "links": [
            {
              "label": "Écouter des événements en JS",
              "url": "https://www.w3schools.com/jsref/met_element_addeventlistener.asp"
            }
          ],
          "codepen": "KrpzaL",
          "question": {
            "text": "Quel événement observable sur l'objet <code>window</code> permet d'éxécuter une action lorsque la fenêtre du navigateur est redimensionnée ?",
            "answer": "resize",
            "clue": "r"
          }
        }
      ]
    },
    {
      "title": "Formulaires HTML",
      "description": "Concevoir des formulaires HTML tirant parti des capacités natives du navigateur et en améliorer l'interactivité en CSS et JavaScript.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vS9AUFGLpU54akzrKMNjhURGrzSlBOmvuVI9kRe4l-cEWZSZketNZC3_B9wB_ZWlYL-Esx4CmVpqjYg/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "formdata",
        "text": "En JavaScript, il est possible de récupérer les données d'un formulaire sous la forme d'un objet appelé <code>FormData</code>. Il permet la manipulation des données du formulaire, qu'on pourra décider d'envoyer au serveur, sous la forme d'une requête GET ou POST, mais c'est une autre histoire !"
      },
      "correctionVideoYoutubeId": "cjtDrxALhkw",
      "concepts": [
        {
          "title": "Un premier formulaire",
          "theory": "Un formulaire est constitué d'une balise <code>form</code> contenant un ou plusieurs inputs, chacun identifié par un attribut <code>name</code>. Chaque <code>input</code> est généralement accompagné d'un <code>label</code> indiquant le nom du champ. Le label et l'input sont liés par leurs attributs, respectivement <code>for</code> et <code>id</code>. Les inputs possèdent aussi généralement un <code>placeholder</code> aidant l'utilisateur avec un exemple de valeur. Le dernier élément indispensable est un input de type <code>submit</code>, permettant la validation du formulaire.",
          "codes": {
            "html": "<form><label for=\"movie\">Film préféré</label><input id=\"movie\" name=\"movie\" placeholder=\"Vertigo, Le Parrain...\" /><input type=\"submit\" value=\"Envoyer\" /></form>"
          },
          "warning": "Vous pouvez être surpris par la redondance entre l'attribut <code>name</code> et <code>id</code> dans le code ci-contre, mais ils n'ont pas le même but. L'attribut <code>name</code> sert à identifier le champ lorsque les données sont envoyées au serveur, tandis que l'<code>id</code> fait la liaison avec le <code>label</code>, et éventuellement avec le JavaScript. Dans certains cas plus complexe, ces valeurs ne seront pas identiques. Précisez toujours les deux.",
          "links": [
            {
              "label": "Guide global MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/Guide/HTML/Formulaires"
            }
          ],
          "codepen": "LXzwdB",
          "question": {
            "text": "Quel est le comportement de display par défaut d'un élément <code>form</code> ?",
            "answer": "block",
            "clue": "o"
          },
          "figure": {
            "src": "https://developer.mozilla.org/files/4291/client-server.png",
            "alt": "Schéma d'un échange client/serveur",
            "caption": "Une fois le formulaire rempli, il pourra être envoyé au serveur qui répondra de manière adéquate. Finalement, on peut voir cela comme une requête similaire aux autres, avec quelques infos en plus (les champs du formulaire). Mais nous ne nous intéréssons ici qu'à la saisie des données côté client."
          }
        },
        {
          "title": "Les types de champs",
          "theory": "Par défaut, les champs sont de type <code>text</code>. Bien que cela suffise théoriquement, vous devez impérativement renseigner un type plus précis dès que possible : <code>email</code>, <code>number</code>, <code>date</code>... Cela permet au navigateur de savoir quel type d'information est attendue, et d'aider l'utilisateur à la saisie. Par exemple, le type <code>date</code> mettra un calendrier à disposition de l'utilisateur, le type <code>number</code> sortira le clavier des chiffres sur mobile, etc. Des types précis fluidient énormément l'expérience.",
          "codes": {
            "html": "<input id=\"age\" name=\"age\" type=\"number\" />"
          },
          "warning": "N'utilisez le type par défaut (<code>text</code>) que si aucun autre ne peut correspondre, de la même façon que <code>div</code> et <code>span</code> sont des éléments sans sémantique à n'utiliser qu'en dernier recours.",
          "links": [
            {
              "label": "Liste des types d'input",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/Input#Attributs"
            }
          ],
          "codepen": "KryKmE",
          "question": {
            "text": "Quel type d'input permet de saisir une date associée à une heure précise ?",
            "answer": "datetime-local",
            "clue": "a"
          },
          "figure": {
            "src": "https://ambientimpact.com/sites/default/files/styles/content_image_large/public/paragraphs/images/input_type_date_across_mobile_browsers.png?itok=DOhCPule",
            "alt": "Un input de type date vu sur plusieurs appareil",
            "caption": "Le type <code>date</code> permet de profiter du calendrier natif des appareils, ce qui fluidifie considérablement la saisie, en plus de garder l'utilisateur dans un environnement qui lui est familier."
          }
        },
        {
          "title": "Attributs de validation",
          "theory": "Toujours dans le but de faciliter l'expérience, ajoutons à nos inputs des informations concernant leurs contraintes respectives. Le plus simple est l'attribut <code>required</code>, à ajouter à tous les inputs non-optionnels. Les attributs <code>minlength</code> et <code>maxlength</code> permettent de borner la longueur du texte attendu, et <code>min</code> et <code>max</code> permettent de border des valeurs numériques. Une utilisation intelligente de ces attributs permet de mettre en forme une validation front native (sans JavaScript), qui ne doit pas se substituer à une validation back, mais qui permettra à l'utilisateur de voir ses erreurs sans envoyer le formulaire pour rien.",
          "codes": {
            "html": "<input id=\"pseudo\" name=\"pseudo\" required minlength=\"3\" maxlength=\"32\" />"
          },
          "warning": "Attention à réfléchir à la logique des contraintes que vous imposez, quitte à les préciser avec un petit texte explicatif associé à l'input. Les histoire de personnes dont le nom de famille fait 2 lettres seulement, ne pouvant pas s'inscrire à un service à cause d'un <code>maxlength=\"3\"</code> ne manquent pas. Pensez que ces règles sont plus là pour guider que pour contraindre.",
          "links": [
            {
              "label": "Validation front des formulaires",
              "url": "https://developer.mozilla.org/fr/docs/Web/Guide/HTML/Formulaires/Validation_donnees_formulaire"
            }
          ],
          "codepen": "LXOVbo",
          "question": {
            "text": "Quel attribut permet de valider un input selon une forme précise ? Par exemple, si on attend spécifiquement une lettre suivie d'un nombre pour identifier une case sur un plateau d'échec ?",
            "answer": "pattern",
            "clue": "a"
          },
          "figure": {
            "src": "/img/form-validation.png",
            "alt": "La validation d'un champ sur plusieurs navigateurs",
            "caption": "L'attribut <code>required</code> permet au navigateur de ne pas laisser passer un champ vide. On pourra customiser tout cela en CSS et JS, mais il est déjà bon d'avoir ce comportement de base."
          }
        },
        {
          "title": "Styles basés sur l'état des champs",
          "theory": "Comme <code>:hover</code> ou <code>:first-child</code>, des pseudo-classes existent, basées cette fois sur l'état de validation des champs. Par exemple, il est possible de cibler un input mal rempli avec la pseudo classe <code>:invalid</code>. Il est en effet important d'aider le visiteur à repérer où se trouve ses erreurs, en faisant ressortir certains champs en CSS.",
          "codes": {
            "html": "<input id=\"pseudo\" name=\"pseudo\" required minlength=\"3\" maxlength=\"32\" />",
            "css": "input:valid { color: green; } input:invalid { color: red; }"
          },
          "warning": "Il faudra cependant ajouter du JS pour ne pas reprocher des erreurs à l'utilisateur alors qu'il n'a même pas commencé à taper. On pourrait par exemple ajouter la classe <code>is-touched</code> lorsque l'utilisateur a interagi avec un champ, et combiner cette classe avec les pseudo-classes de validation pour afficher les styles d'erreur seulement lorsqu'ils sont pertinents.",
          "links": [
            {
              "label": "Pseudo-classes d'inputs",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/:valid"
            }
          ],
          "codepen": "vQWNXm",
          "question": {
            "text": "Quelle pseudo-classe permet de cibler les inputs dont la valeur numérique ne correspond pas au <code>min</code> et au <code>max</code> demandés ?",
            "answer": "out-of-range",
            "clue": "r"
          },
          "figure": {
            "src": "https://3lhowb48prep40031529g5yj-wpengine.netdna-ssl.com/wp-content/uploads/2017/01/reactjs_form_validation_simple_form_animation.gif",
            "alt": "Une validation de formulaire en JavaScript",
            "caption": "La validation de formulaire au fil de la frappe est un art délicat mais qui fera une énorme différence pour vos utilisateurs."
          }
        },
        {
          "title": "Saisie de textes longs avec textarea",
          "theory": "La balise <code>input</code> n'est pas la seule à pouvoir accueillir les données de l'utilisateur. La balise <code>textarea</code> permet, comme son nom l'indique, de fournir une zone de texte à l'utilisateur pour qu'il puisse taper un texte plus long. Elle peut prendre des attributs similaires à ceux des inputs, et sa taille peut être définie avec <code>cols</code> et <code>rows</code>.",
          "codes": {
            "html": "<textarea name=\"bio\" id=\"bio\" placeholder=\"Renseignez votre bio\" cols=\"50\" rows=\"10\"></textarea>"
          },
          "warning": "Notez que contrairement à la balise <code>input</code>, <code>textarea</code> n'est pas auto-fermante : il lui faut une balise de fermeture.",
          "links": [
            {
              "label": "La balise textarea",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/Textarea"
            }
          ],
          "codepen": "YREwER",
          "question": {
            "text": "Quel attribut pourrait-on ajouter à un <code>textarea</code> (ou n'importe quel input) pour empêcher la saisie (par exemple temporairement, le temps qu'un processus se termine).",
            "answer": "disabled",
            "clue": "d"
          },
          "figure": {
            "src": "https://ps.w.org/tinymce-advanced/trunk/screenshot-1.png?rev=1919237",
            "alt": "L'édition d'un texte avec TinyMCE",
            "caption": "Certains plugins tels que TinyMCE permettent de présenter des zones de texte aux capacités très avancées."
          }
        },
        {
          "title": "Cases à cocher",
          "theory": "Les cases à cocher sont un élément basique des formulaires : valider des CGU, choisir des éléments parmi une liste, activer ou désactiver une option... On les obtient simplement en changeant le type d'un input en <code>checkbox</code>. Il suffit ensuite d'ajouter un label pour décrire l'action associée à cette case. Dans le cas où plusieurs checkboxes sont liées entre elles, on leur donne alors toutes le même attribut <code>name</code> pour les lier et on utilise l'attribut <code>value</code> pour les différencier.",
          "codes": {
            "html": "<div><input type=\"checkbox\" name=\"terms\" id=\"terms\" /><label for=\"terms\">J'accepte les CGU</label></div><div><div><input type=\"checkbox\" name=\"shipping_option\" value=\"fast\" id=\"fast\" /><label for=\"fast\">Livraison express</label></div><div><input type=\"checkbox\" name=\"shipping_option\" value=\"gift\" id=\"gift\" /><label for=\"gift\">Papier cadeau</label></div></div>"
          },
          "info": "Dans l'exemple, la première checkbox est indépendante, elle a seulement un attribut <code>name</code>. Mais les deux autres checkboxes, qui correspondent aux options de livraisons, sont liées : elles ont donc le même <code>name</code> (<code>shipping_option</code>), avec un attribut <code>value</code> différent (<code>fast</code> et <code>gift</code>). Cela facilitera la réception des données côté serveur.",
          "links": [
            {
              "label": "Doc MDN sur les checkboxes",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/Input/checkbox"
            }
          ],
          "codepen": "YREGpj",
          "question": {
            "text": "Quelle pseudo-classe permet de cibler un élément étant actuellement ciblé par la souris (par exemple un input lorsqu'on clique dedans) ou par le clavier (dans le cas d'une navigation avec la touche tab) ?",
            "answer": "focus",
            "clue": "f"
          },
          "figure": {
            "src": "https://mdbootstrap.com/wp-content/uploads/2017/07/bootstrap-checkbox.jpg",
            "alt": "Différentes checkboxes",
            "caption": "Beaucoup de rendus sont possibles à partir de ce simple input ! Tous les éléments présentés ici sont de simples checkboxes."
          }
        },
        {
          "title": "Boutons radio",
          "theory": "Très similaires aux checkboxes, les boutons radio sont créés en utilisant le type <code>radio</code>. La grosse différence, c'est qu'au sein d'un même groupe, on ne peut en sélectionner qu'un à la fois. On aura donc toujours deux boutons radio ou plus, possédant le même attribut <code>name</code> et des attributs <code>value</code> différents.",
          "codes": {
            "html": "<div><input type=\"radio\" name=\"size\" value=\"m\" id=\"m\" /><label for=\"m\">M</label></div><div><input type=\"radio\" name=\"size\" value=\"l\" id=\"l\" /><label for=\"l\">L</label></div><div><input type=\"radio\" name=\"size\" value=\"xl\" id=\"xl\" /><label for=\"xl\">XL</label></div>"
          },
          "info": "Une autre différence avec les checkboxes est qu'un bouton radio ne peut pas être décoché. C'est pour cela qu'un bouton radio seul n'a pas de sens.",
          "links": [
            {
              "label": "Doc MDN sur les boutons radio",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/Input/radio"
            }
          ],
          "codepen": "xQPRrM",
          "question": {
            "text": "Quel attribut ajouter à un input pour qu'il capture le focus dès l'affichage de la page ? (autrement dit, que le curseur s'y place automatiquement)",
            "answer": "autofocus",
            "clue": "t"
          },
          "figure": {
            "src": "https://app.knowledgeowl.com/app/image/id/5421e22bfe775a9d61000060/n/2014-09-23_1511.png",
            "alt": "Une liste de checkboxes et de boutons radio",
            "caption": "Tous les utilisateurs le savent, peut-être même avant de savoir parler : rond = un seul choix, carré = plusieurs choix."
          }
        },
        {
          "title": "Les listes d'options",
          "theory": "Quand le nombre d'options devient trop grand, les checkboxes et les boutons radio ne font plus l'affaire d'un point de vue ergonomique. On peut alors recourir à l'élément <code>select</code>, qui contiendra autant d'éléments <code>option</code> qu'il n'y a... d'options. Elles se présenteront alors sous la forme d'une liste déroulante. Le <code>select</code> prend l'attribut <code>name</code> et chaque <code>option</code> prend un attribut <code>value</code>.",
          "codes": {
            "html": "<select name=\"size\"><option value=\"m\">M</option><option value=\"l\">L</option><option value=\"XL\">XL</option></select>"
          },
          "warning": "L'exemple est volontairement court, mais réservez cet élément aux listes trop longues pour utiliser les checkboxes ou boutons radio.",
          "links": [
            {
              "label": "L'élément select",
              "url": "https://developer.mozilla.org/fr/docs/Web/HTML/Element/select"
            }
          ],
          "codepen": "aQVJzJ",
          "question": {
            "text": "Quel attribut peut-on ajouter au <code>select</code> pour permettre à l'utilisateur de sélectionner plusieurs options ?",
            "answer": "multiple",
            "clue": "m"
          },
          "figure": {
            "src": "https://www.jquery-az.com/wp-content/uploads/2016/02/5.0_10-HTML-select-Bootstrap-search.png",
            "alt": "Un élément de sélection avancée",
            "caption": "D'innombrables librairies JavaScript permettent de réaliser des élements de sélection beaucoup plus avancés, si besoin"
          }
        }
      ]
    },
    {
      "title": "Pré-processeur SASS",
      "description": "Utiliser le pré-processeur SASS et son langage SCSS pour écrire un CSS plus cohérent, maintenable et efficace.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vTJV3zDUl9FNi_5kOk0S3ajpiTyifTJ2Gs1nSf58NH1FO5EGisuTXptWpwt05Nsv3tkfYeTZVY7xVbS/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "transpile",
        "text": "Lorsque CodePen traduit votre code SCSS en CSS pur pour le navigateur, on dit qu'il <em>transpile</em> le code : il le transforme d'un langage à un autre. En dehors du contexte de CodePen, il nous faudra donc un outil pour effectuer cette transpilation nous-même."
      },
      "correctionVideoYoutubeId": "ReTyFgvXceI",
      "concepts": [
        {
          "title": "Sélecteurs imbriqués",
          "theory": "Une des capacités les plus intéressantes de SASS est l'imbrication de sélecteurs les uns dans les autres. Cela permet de ne jamais répéter les sélecteurs, et donc d'éviter les erreurs. Cela facilite également l'écriture du code et favorise une lisibilité et maintenabilité optimales.",
          "codes": {
            "html": "<ul class=\"menu\"><li>Stylez-moi !</li></ul><ul><li>Laissez-moi tranquille</li></ul>",
            "scss": ".menu { display: flex; li { color: red; }}"
          },
          "warning": "Vous pouvez imbriquer les sélecteurs à l'infini mais il ne faut pas le faire car cela produirait un code illisible et non maintenable. De la même manière que l'on s'attachait à écrire des sélecteurs CSS simples, essayez de ne pas créer plus de trois niveaux d'imbrication (un sélecteur dans un sélecteur dans un sélecteur).",
          "links": [
            {
              "label": "Nested rules",
              "url": "https://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested_rules"
            }
          ],
          "codepen": "gQzpdy",
          "question": {
            "text": "Le pré-processeur SASS vous permet de coder avec deux syntaxes différentes. La plus répandue et celle utilisée dans ce cours s'appelle SCSS (<i>Sassy CSS</i>). Quelle est l'autre ?",
            "answer": "sass",
            "clue": "s"
          },
          "figure": {
            "src": "https://cdn-images-1.medium.com/max/1600/1*iSWNgPM9Ew-zyR8QfdYNmw.png",
            "alt": "Une imbrication profonde avec SASS",
            "caption": "SASS est une opportunité de rendre votre code plus clair et non l'inverse. Évitez donc le <i>deep nesting</i>, soit une imbrication des règles inutilement profonde. Le code de cet exemple est illisible."
          }
        },
        {
          "title": "Référence à l'élément parent avec &",
          "theory": "À l'intérieur d'une imbrication, il est possible de faire référence au sélecteur parent avec le signe <code>&</code>. Cela permet principalement de gérer les combinaisons de classes et les pseudo-classes.",
          "codes": {
            "html": "<ul class=\"menu\"><li>Stylez-moi !</li></ul><ul><li>Laissez-moi tranquille</li></ul>",
            "scss": "ul { display: flex; &.menu { justify-content: center; } &:hover { li { color: red; }}}"
          },
          "warning": "Prenez le temps de comprendre le code de l'exemple. Tous les <code>ul</code> sont en flex, mais si <em>en plus</em> le <code>ul</code> possède la classe <code>.menu</code>, on lui ajoute une propriété d'alignement. Il y a une grosse différence entre <code>&.menu</code> et <code>.menu</code>. Dans le premier cas, il faut que ce soit le <code>ul</code> lui-même qui possède la classe, dans le second, on cherche un élément enfant. La règle <code>&:hover</code> quant à elle permet de cibler le menu quand il est survolé.",
          "links": [
            {
              "label": "Référence à l'élément parent",
              "url": "https://sass-lang.com/documentation/file.SASS_REFERENCE.html#parent-selector"
            }
          ],
          "codepen": "bQKNKL",
          "question": {
            "text": "Quel mot anglais désigne le signe <code>&</code> ?",
            "answer": "ampersand",
            "clue": "a"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2016/01/scss-to-css.gif",
            "alt": "Un sélecteur de parent avec SASS",
            "caption": "Utiliser <code>&</code> revient à demander à SASS de concaténer les sélecteurs, sans espacement."
          }
        },
        {
          "title": "Stocker des variables",
          "theory": "En développement, on aime pas particulièrement se répéter, et le CSS ne fait pas exception. Il est possible de stocker une dimension, une couleur ou encore le nom d'une typographie dans une variable. On déclare ainsi les variables de notre site au début, et on les utilise plus loin dans le code. Ainsi, si une valeur change, tous les changements sont répercutés. C'est le principe de <i>Single source of truth</i>, source unique de vérité.",
          "codes": {
            "scss": "$title-color: #45EFFA; h1 { color: $title-color; } h2 { color: $title-color; }"
          },
          "warning": "Certaines valeurs se répètent parfois par hasard, il ne faut pas essayer de tout mettre dans des variables non plus. La question à se poser est : \"si la couleur ou la taille de tel élément venait à changer, quoi d'autre devrait être impacté ?\". Tous les éléments concernés devraient alors partager la même variable.",
          "links": [
            {
              "label": "Variables SCSS",
              "url": "https://sass-lang.com/documentation/file.SASS_REFERENCE.html#variables_"
            }
          ],
          "codepen": "xQzwja",
          "question": {
            "text": "Le site sur lequel vous lisez ces mots utilise aussi des variables, mais en CSS natif (il ne fonctionnera donc pas correctement sur IE11, par exemple). Mais le principe est le même et vous pouvez le voir en action avec l'inspecteur. Quel est le nom de la variable grâce à laquelle le header du site et le titre de chaque partie partagent la même couleur rouge cramoisi ?",
            "answer": "primaryColor",
            "clue": "r"
          },
          "figure": {
            "src": "https://responsivedesign.is/wp-content/uploads/2017/06/CSS-Variables.png",
            "alt": "Variables CSS natives",
            "caption": "Ce n'est pas encore utilisable à grande échelle, notamment à cause d'IE11, mais les variables CSS natives (sans SASS) sont en train de devenir un standard. La syntaxe est différente mais la logique similaire."
          }
        },
        {
          "title": "Les mixins",
          "theory": "Les <em>mixins</em> sont des sortes de fonctions css. Elles stockent un ensemble de définitions CSS qui peuvent être utilisées à différents endroit d'un fichier CSS. Leur utilisation est comparable à celle des variables, mais au lieu de stocker des valeurs, elles stockent un ensemble de propriétés et de valeurs. La mixin est créée avec le mot clé <code>@mixin</code> et utilisée avec <code>@include</code>.",
          "codes": {
            "scss": "@mixin hoverable { transition: transform&nbsp;0.3s; &:hover { transform: scale(1.1); }} img { @include hoverable; } .button { @include hoverable; }"
          },
          "info": "Comme vous pouvez le voir dans l'exemple, une mixin peut même contenir un sous-sélecteur ! Le mot-clé <code>@include</code> agit comme un copier/coller de la mixin à l'endroit où elle est appelée. Tous les éléments incluant la mixin <code>hoverable</code> grossiront au survol.",
          "links": [
            {
              "label": "Mixins SASS",
              "url": "https://sass-lang.com/documentation/file.SASS_REFERENCE.html#defining_a_mixin"
            }
          ],
          "codepen": "zMaBaj",
          "question": {
            "text": "Quel mot-clé, déconseillé car aboutissant trop rapidement à des situations confuses, permet d'étendre les propriétés appliquées à un sélecteur ? Par exemple, il permettrait de dire que l'élément <code>.subtitle</code>, en plus de toutes ses propriétés, hérite aussi des propriétés de <code>.title</code>.",
            "answer": "extend",
            "clue": "n"
          }
        },
        {
          "title": "Mixins avec paramètres",
          "theory": "Toute la puissance des mixins vient de leur capacité à accepter un ou plusieurs paramètres, ce qui permet de factoriser des comportement CSS mais en faisant varier les valeurs. On passe les paramètres comme pour une fonction, entre parenthèses, et on peut utiliser des valeurs par défaut.",
          "codes": {
            "scss": "@mixin absolute($top: 0,&nbsp;$left: 0) { position: absolute; top: $top; left: $left; } .menu { @include absolute(15px,&nbsp;50px); } .button { @include absolute; }"
          },
          "warning": "Malgré leur puissance, utilisez les mixins avec parcimonie, quand un ensemble de propriétés/valeurs se répètent dans la codebase sans qu'on puisse donner une classe commune aux éléments de manière logique. Par exemple, les éléments positionnés en <code>absolute</code> partagent souvent un ensemble de propriété communes (position, top, left...). Mais on ne va pas leur donner la classe non-sémantique <code>.absolute</code>, une mixin est donc un bon choix pour éviter les redondances. Continuez à utiliser des classes sémantiques quand c'est possible, cela reste le plus maintenable.",
          "links": [
            {
              "label": "Paramètres de mixins",
              "url": "https://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-arguments"
            }
          ],
          "codepen": "GwGjXm",
          "question": {
            "text": "Quel bloc permettant de déclarer une typographie pourrait fortement bénéficier de l'utilisation d'une mixin prenant en paramètres, entre autres, un chemin de fichier et un nom de <code>font-family</code> ? On aurait ainsi beaucoup moins de répétition.",
            "answer": "@font-face",
            "clue": "t"
          },
          "figure": {
            "src": "https://www.sodifrance.fr/blog/wp-content/uploads/2016/05/blog-mixin-info_bulle.png",
            "alt": "Plusieurs boîtes avec des styles différents",
            "caption": "Les mixins peuvent être un moyen très pratique de générer des variations sur un même modèle."
          }
        },
        {
          "title": "Media queries incluses dans les sélecteurs",
          "theory": "Jusqu'ici, nos media queries étaient reléguées en fin de fichier, ce qui voulait dire qu'un même élément pouvait être concerné par du CSS dispersé à deux, trois (voire plus !) endroits du fichier. Cela nous contraint à parcourir les fichiers de long en large pour retrouver le code concernant un élément et favorise les erreurs puisqu'on recopie chaque sélecteur pour chaque media query. SASS nous permet un changement de paradigme salvateur : ne plus inclure les sélecteurs dans les media queries, mais include les media queries dans les sélecteurs ! Ainsi, chaque sélecteur n'est écrit qu'une fois et tout le code concernant un élément se trouve au même endroit.",
          "codes": {
            "scss": ".menu { display: flex; flex-direction: column; @media (min-width: 800px) { flex-direction: row; } @media (min-width: 1200px) { justify-content: center; } li { margin-bottom: 15px; @media (min-width: 800px) { margin-bottom: 0; }}}"
          },
          "warning": "La syntaxe peut paraître un peu lourde pour l'instant, mais heureusement ce n'est pas sa forme finale. On voit cependant déjà que tout le code concernant un élément (<code>.menu</code>, <code>li</code>) est au même endroit, et qu'aucun sélecteur n'est répété.",
          "codepen": "JeZbEb",
          "question": {
            "text": "Vrai ou faux ? Grâce à SASS, on peut inclure une media query dans une autre pour combiner des conditions (<code>min-height</code> & <code>min-width</code> par exemple).",
            "answer": "vrai",
            "clue": "i"
          },
          "figure": {
            "src": "https://i.pinimg.com/originals/16/54/da/1654da2d9ddb6bcf4efa4099a98099f9.jpg",
            "alt": "Media queries utilisant des variables",
            "caption": "Et si on utilisait des variables pour ne pas répéter les conditions à chaque fois ? Nous allons faire encore mieux dès le prochain exercice."
          }
        },
        {
          "title": "Mixins & media queries",
          "theory": "Les mixins vont nous permettre d'utiliser le nouveau paradigme (media queries <em>dans</em> les sélecteurs) sans avoir à répéter à chaque fois les conditions. Grâce au mot clé <code>@content</code>, on peut écrire une mixin qui injectera un ensemble de déclarations dans une media query. On obtient ainsi un des meilleurs modèles disponibles pour gérer du CSS Mobile First. À appliquer dès aujourd'hui !",
          "codes": {
            "scss": "@mixin medium { @media (min-width: 768px) { @content; } } @mixin large { @media (min-width: 1280px) { @content; } } .menu { display: flex; flex-direction: column; @include medium { flex-direction: row; } @include large { justify-content: center; } li { margin-bottom: 15px; @include medium { margin-bottom: 0; }}}"
          },
          "info": "Voici donc la forme \"finale\" de notre CSS, la plus maintenable / solide / organisée possible. Quand on utilise <code>@include</code> avec les acollades, le contenu de la mixin est importé mais le mot-clé <code>@content</code> est remplacé par le contenu entre acollades, ce qui permet cette écriture.",
          "links": [
            {
              "label": "Write better media queries with SASS",
              "url": "https://davidwalsh.name/write-media-queries-sass"
            }
          ],
          "codepen": "yQEVGY",
          "question": {
            "text": "Avoir toutes les règles concernant un même élément au même endroit nous procurera l'avantage de pouvoir diviser plus facilement notre CSS en plusieurs fichiers. D'ailleurs, avec quelle instruction SASS pourra-t-on importer nos sous-fichiers dans un fichier principal ?",
            "answer": "import",
            "clue": "p"
          },
          "figure": {
            "src": "/img/media-queries.png",
            "alt": "Mixins de media queries utilisant des variables",
            "caption": "Pour des projets massifs utilisant un nombre de breakpoints plus important, la combinaison de tout cela avec des variables s'avère très intéressante."
          }
        },
        {
          "title": "Conditions @if",
          "theory": "Leur utilisation est clairement anecdotique à côté de tout le reste, mais il est possible avec SASS d'écrire des conditions, avec le mot clé <code>@if</code>. Cela permet, principalement dans les mixins, de faire varier le code en fonction d'une ou plusieurs valeurs. Si besoin, vous pouvez compléter avec un bloc <code>@else</code> pour décrire ce qui se passe dans l'autre cas.",
          "codes": {
            "scss": "@mixin background($color:&nbsp;black) { background-color: $color; @if ($color&nbsp;==&nbsp;black) { border: 3px&nbsp;solid&nbsp;white; } @else { border: 3px&nbsp;solid&nbsp;black; }}"
          },
          "warning": "Réservez l'emploi de conditions aux rares cas où une valeur d'une mixin dépend directement d'une autre. Pour la maintenabilité globale du code, les classes doivent rester le moyen par défaut d'introduire des variations, lorsque c'est possible.",
          "links": [
            {
              "label": "Conditions SASS",
              "url": "https://sass-lang.com/documentation/file.SASS_REFERENCE.html#if"
            }
          ],
          "codepen": "oQyWNY",
          "question": {
            "text": "Quel mot clé peut-on utiliser après un bloc <code>@if</code>, pour enchaîner plusieurs blocs <code>@else</code> ? (réponse sans espace)",
            "answer": "elseif",
            "clue": "l"
          },
          "figure": {
            "src": "https://image.slidesharecdn.com/sass-compass-141101111112-conversion-gate02/95/getting-started-with-sass-compass-65-638.jpg?cb=1414840419",
            "alt": "Implémentation de thèmes avec @if",
            "caption": "Exemple d'utilisation de <code>@if</code> en dehors d'une mixin, pour introduire le concept de thème à l'ensemble du site."
          }
        },
        {
          "title": "Boucles @for",
          "theory": "Également rares mais puissantes, les boucles SASS permettent généralement de faire varier une valeur par itération. Elles ressemblent à une boucle for en Javascript : le mot clé <code>@for</code>, puis une variable <code>i</code> qui varie entre deux bornes et est accessible avec une valeur différente à chaque itération de la boucle.",
          "codes": {
            "scss": "li { @for&nbsp;$i&nbsp;from&nbsp;1&nbsp;through&nbsp;10 { &:nth-child(#{$i}) { margin-left: $i&nbsp;*&nbsp;10px; }}}"
          },
          "info": "Le code d'exemple permet d'appliquer une <code>margin-left</code> différente pour chaque <code>li</code> : 10px, puis 20px, 30px, etc... Ce qui permet de donner un effet d'escalier.",
          "links": [
            {
              "label": "Boucles SASS",
              "url": "https://sass-lang.com/documentation/file.SASS_REFERENCE.html#for"
            }
          ],
          "codepen": "KremGK",
          "question": {
            "text": "Quelle instruction SASS permet de réaliser une itération sur les éléments d'une liste ?",
            "answer": "each",
            "clue": "e"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2016/08/start-stop1b.gif",
            "alt": "Une animation utilisant transition-delay sur de nombreux éléments",
            "caption": "Les boucles <code>@for</code> permettent d'éviter beaucoup de répétitions lorsqu'on souhaite faire varier une valeur (ici <code>transition-delay</code>)."
          }
        }
      ]
    },
    {
      "title": "Convention BEM",
      "description": "Utiliser la convention de nommage BEM pour écrire un CSS plus prédictible, maintenable et efficace.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vR8pTgz-g8QkdQuJa5elvgbolUAbLLxPBWcdDkNcBvjyWf7W0YV5ctUY-RAOB67yq5JY19qRdUcidnG/pub?start=false&loop=false&delayms=6000000",
      "puzzle": {
        "word": "scaling",
        "text": "Le <i>scaling</i> est la mise à l'échelle d'un projet. Pour qu'un code soit <i>scalable</i>, il faut qu'il soit organisé, et le CSS ne fait pas exception. BEM est une des méthodes permettant de coder seul ou à plusieurs sans se heurter à des incompréhensions. Il simplifie considérablement le nommage et l'organisation du CSS pour que les développeurs puissent se concentrer sur l'essentiel : les propriétés à utiliser et les valeurs à appliquer."
      },
      "correctionVideoYoutubeId": "tRdrod_3tlE",
      "concepts": [
        {
          "title": "Blocs BEM",
          "theory": "Le <em>bloc</em> est l'élément de base de la logique BEM. Un site est alors considéré comme un ensemble de blocs. Chaque bloc peut être ré-utilisé autant de fois que nécessaire (une des raisons pour lesquelles on utilise toujours des classes plutôt que des id). Bien que BEM n'ait pas de style d'écriture officiel, on utilisera désormais le <em>lowerCamelCase</em>. Chaque mot commence par une majuscule sauf le premier. On utilise pas de tirets ou d'underscores, qu'on réservera à d'autres aspects de BEM. Un grand bloc (ici <code>main</code>) peut contenir d'autres blocs (ici <code>company</code> et <code>contactForm</code>).",
          "codes": {
            "html": "<header class=\"header\">...</header><main class=\"main\"><section class=\"company\">...</section><form class=\"contactForm\">...</form></main><footer class=\"footer\">...</footer>"
          },
          "warning": "Évitez à partir de maintenant de baser votre code sur le nom des tag (<code>header</code>, <code>p</code>, etc) car ils peuvent parfois évoluer, contrairement au nom d'une classe qui est plus précis et durable. Soyez prévenus, en BEM il y a beaucoup de classes, et c'est pour le mieux !",
          "links": [
            {
              "label": "Conventions d'écriture",
              "url": "https://wprock.fr/blog/conventions-nommage-programmation/"
            }
          ],
          "codepen": "KrEEzm",
          "question": {
            "text": "On a décidé de se séparer de la convention d'écriture habituelle pour utiliser BEM de la façon la plus claire possible, en utilisant à la place le <em>lowerCamelCase</em>. Quelle était la convention que nous utilisions auparavant pour le CSS ?",
            "answer": "kebab-case",
            "clue": "c"
          },
          "figure": {
            "src": "/img/bem-blocks.png",
            "alt": "Identification des blocs BEM sur une page",
            "caption": "La première étape à la réception d'un design est d'en identifier les principaux blocs et de leur donner le nom le plus clair possible."
          }
        },
        {
          "title": "Modifier un bloc",
          "theory": "Les <em>modifiers</em> (prononcer à l'anglaise) sont un autre des concepts centraux de BEM. Il est fréquent que des blocs partagent des styles similaires, mais avec parfois quelques variations. Plutôt que de créer une classe différente avec beaucoup de redondances, les deux éléments garderont la classe du bloc de base, et les variations seront introduites par une seconde classe, appelée <em>modifier</em>. On utilisera alors le double tiret de cette façon : <code>bloc--modifier</code> (le double tiret n'a aucune valeur programmatique, c'est une convention). Un même bloc peut avoir aucune, une ou plusieurs variations, et ces variations peuvent même être combinées.",
          "codes": {
            "html": "<article class=\"product\"></article><article class=\"product product--new\"></article><article class=\"product product--soldOut\"></article><article class=\"product product--new product--soldOut\"></article>",
            "css": ".product { background-color: yellow; } .product--new { border: 3px&nbsp;solid&nbsp;red; } .product--soldOut { color: red; }"
          },
          "warning": "Notez bien que <em>tous</em> les blocs ont la classe <code>product</code>, et éventuellement un ou plusieurs <em>modifier</em>. Un élément ne peut jamais avoir un <em>modifier</em> sans posséder la classe de base, cela n'aurait pas de sens avec BEM. Pour le dire en français, un produit nouveau est aussi... un produit.",
          "codepen": "BGbEEq",
          "question": {
            "text": "Continuons notre apprentissage de l'anglais technique qui nous sera bien utile pour résoudre nos problèmes avec Google. Quel mot désigne le fameux \"tiret du 6\", utilisé pour écrire un <em>modifier</em> ?",
            "answer": "dash",
            "clue": "s"
          },
          "figure": {
            "src": "https://media.merixstudio.com/uploads/modifier2.png",
            "alt": "Boutons utilisant les modifier BEM",
            "caption": "Un bouton est souvent lui-même un bloc BEM (après tout, c'est un composant ré-utilisable régulièrement). L'application de <em>modifiers</em> est alors tout à fait appropriée."
          }
        },
        {
          "title": "Éléments BEM",
          "theory": "Au sein des blocs se trouvent des <em>éléments</em>, et c'est le troisième et dernier concept de BEM. Chaque élément est désigné par la classe la plus simple possible, préfixée par la classe du bloc suivie de deux underscores : <code>block__element</code>. La relation entre chaque bloc et ses éléments devient ainsi évidente, et deux éléments <code>title</code> ne pourront plus rentrer en conflit, puisqu'ils auront par exemple les classes <code>book__title</code> et <code>movie__title</code>.",
          "codes": {
            "html": "<article class=\"product\"><h2 class=\"product__title\">Lecteur Blu-Ray</h2><img class=\"product__picture\" src=\"product.jpg\" /><div class=\"product__price\">159€</div></article>",
            "css": ".product { background-color: yellow; } .product__title { font-size: 22px; } .product__picture { width: 200px; }"
          },
          "warning": "Bien que nous connaissions SASS, il serait dommage d'imbriquer <code>.product__title</code> dans <code>.product</code>. Les classes sont déjà \"imbriquées\" par la convention de nommage, ce qui a l'avantage de créer une spécificité la plus plate possible (tous les sélecteurs ont le même poids CSS), et donc la plus maintenable possible. BEM est partisan d'un CSS plat.",
          "codepen": "vQPqgo",
          "question": {
            "text": "Inspection d'élément ! Quelle classe, suivant la convention de nommage BEM, est utilisée pour styliser l'élément contenant le texte que vous êtes en train de lire ?",
            "answer": "question__text",
            "clue": "i"
          },
          "figure": {
            "src": "https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cb5574c7-13e3-45a3-acc5-1865ac270674/menu-items.png",
            "alt": "Un bloc BEM contenant plusieurs éléments identiques",
            "caption": "Les éléments d'un bloc ne sont pas forcément uniques : ils peuvent être présents plusieurs fois dans le bloc. Ici, on aurait par exemple 4 <code>.tabs__tab</code>."
          }
        },
        {
          "title": "Plusieurs niveaux de blocs",
          "theory": "Les règles de BEM sont épurées et strictes, et elles permettent ainsi d'imposer une certaine simplicité à notre code. Une des interdictions les plus formelles de BEM est d'avoir plusieurs niveaux de sous éléments : la classe <code>.product__gallery__picture</code> est donc <em>illégale</em>. Elle semble pourtant répondre à un besoin basique : comment faire, dans <code>product</code> pour gérer un élément <code>gallery</code> contenant plusieurs <code>picture</code> ? Pour rester dans la convention BEM et la simplicité maximale, soit on nomme les classes directement <code>product__gallery</code> et <code>product__picture</code> (exemple 1), soit on créé un nouveau bloc BEM <code>gallery</code>, qui contiendra des classes <code>gallery__picture</code> (exemple 2). Chaque bloc peut donc en contenir d'autres.",
          "codes": {
            "html": "<!-- 1ère possibilité, classes simples --><article class=\"product\"><h2 class=\"product__title\"></h2><div class=\"product__gallery\"><img class=\"product__picture\" src=\"image1.jpg\" /><img class=\"product__picture\" src=\"image2.jpg\" /></div></article><!-- 2e possibilité, sous-bloc --><article class=\"product\"><h2 class=\"product__title\"></h2><div class=\"product__gallery gallery\"><img class=\"gallery__picture\" src=\"image1.jpg\" /><img class=\"gallery__picture\" src=\"image2.jpg\" /></div></article>"
          },
          "info": "Dans la deuxième situation de l'exemple, <code>.product__gallery</code> est à la fois un élément de <code>.product</code> et un bloc <code>.gallery</code> à part entière. Comment savoir quelle solution choisir ? Fixez vous la limite de 100 lignes de CSS pour chaque fichier (et donc chaque bloc, puisqu'un bloc = un fichier). Si vous dépassez, c'est probablement que votre bloc pourrait être découpé en plusieurs sous-blocs.",
          "codepen": "rQbVOe",
          "question": {
            "text": "Inspection à nouveau : le bloc <code>question</code> qui vous est présenté ici est lui-même inclus dans un bloc plus vaste : lequel ?",
            "answer": "concept",
            "clue": "n"
          },
          "figure": {
            "src": "/img/bem-blocks.png",
            "alt": "Page web comprenant plusieurs niveaux de blocs",
            "caption": "En reprenant ce design d'exemple, il apparaît évident que les 4 éléments présentant les membres seront trop complexes pour ne pas être des blocs à part entière. Ils seront donc à la fois des <code>.group__member</code> et des <code>.member</code>, avec leurs propres enfants (<code>.member__name</code>...)."
          }
        },
        {
          "title": "Modifier un élément",
          "theory": "Certains blocs sont légèrement différents des autres, mais parfois c'est un élément qui est différent des autres. Le principe est alors le même : on peut lui appliquer un <em>modifier</em>, en plus de sa classe de base, pour lui appliquer des styles spécifiques. On atteint ici la forme la plus complexe possible avec BEM : <code>block__element--modifier</code>.",
          "codes": {
            "html": "<ul class=\"meals\"><li class=\"meals__meal\">Hamburger</li><li class=\"meals__meal\">Fish & Chips</li><li class=\"meals__meal meals__meal--veggie\">Veggie Burger</li></ul>",
            "css": ".meals__meal { font-size: 18px; } .meals__meal--veggie { color: green; }"
          },
          "warning": "Comme avec les modifiers de blocs, chaque élément possédant une classe <code>modifier</code> doit aussi obligatoirement posséder la classe de base. Si on reprend l'exemple en français : chaque plat végétarien est aussi un plat.",
          "links": [
            {
              "label": "Site non officiel BEM (variante de la syntaxe, sans camelCase)",
              "url": "https://en.bem.info/methodology/quick-start/"
            }
          ],
          "codepen": "OaGyKm",
          "question": {
            "text": "Lorsque vous répondez à une question, le champ correspondant à la lettre qui sera utilisée pour former le mot final est d'une couleur différente. Grâce à quel <code>modifier</code> ?",
            "answer": "clue",
            "clue": "l"
          },
          "figure": {
            "src": "https://cdn.1min30.com/wp-content/uploads/2018/06/be.png",
            "alt": "Les 4 sélecteurs BEM possibles",
            "caption": "Une des forces de BEM est sa simplicité et nous avons ici les 4 formes de sélecteur possibles : bloc, élément de bloc, élément de bloc modifié, bloc modifié. Ça ne va pas plus loin !"
          }
        },
        {
          "title": "Élément au sein d'un bloc modifié",
          "theory": "Lorsqu'un bloc possède un <code>modifier</code>, cela impacte ses styles, mais il est aussi possible que cela impacte les styles de ses éléments. Plutôt que d'ajouter un <code>modifier</code> à chacun d'entre eux, on va invoquer la puissance de SASS pour cibler l'élément à l'intérieur du bloc modifié.",
          "codes": {
            "html": "<div class=\"product product--new\"><h2 class=\"product__name\">Lecteur Blu-Ray</h2></div>",
            "scss": ".product--new { border: 3px&nbsp;solid&nbsp;red; .product__name { font-weight: bold; }} .product__name { font-size: 20px; }"
          },
          "info": "C'est la première fois dans cette exploration de BEM qu'imbriquer des styles a son intérêt : les éléments <code>.product__name</code> auront toujours une taille de 20px, et seront en plus en gras s'ils sont à l'intérieur d'un <code>.product--new</code>.",
          "links": [
            {
              "label": "Article CSS-Tricks sur BEM",
              "url": "https://css-tricks.com/bem-101/"
            }
          ],
          "codepen": "vQMXNK",
          "question": {
            "text": "Vrai ou faux ? Dans la convention BEM, un élément peut avoir à la fois la classe <code>.product--new</code> et la classe <code>.product__name</code>.",
            "answer": "faux",
            "clue": "a"
          },
          "figure": {
            "src": "https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2018/q10.jpg",
            "alt": "L'utilisation des différentes méthodologies CSS",
            "caption": "En 2018, BEM est la plus utilisée des conventions de nommages (les autres sur ce graphique étant Atomic Design, OOCSS, SMACSS, ITCSS et SUIT CSS). Attention, ce n'est pas parce que c'est populaire que c'est bien. Mais là, c'est bien."
          }
        },
        {
          "title": "Et SASS dans tout ça ?",
          "theory": "Peut-être l'absence quasi-totale de <code>scss</code> dans ce cours vous étonne-t-elle, mais ce langage va rester très utile. Pour cibler les éléments à l'intérieur de blocs modifiés, d'abord. Mais aussi pour tout ce qui ne concerne pas BEM : sélecteurs <code>nth-child</code>, <code>:hover</code>... et bien sûr, les variables, les mixins et les media queries imbriquées !",
          "info": "BEM nous permet de garder un CSS de base très plat, permettant une utilisation de SASS encore plus claire car les niveaux d'imbrication seront peu nombreux et lisibles. BEM + SASS = <3",
          "codepen": "zMXKgr",
          "figure": {
            "src": "https://cdn-images-1.medium.com/max/970/1*O0LXIvlRrhsXqHBBmibuhA.png",
            "alt": "Utilisation de l'esperluette pour écrire des sélecteurs BEM",
            "caption": "Vous croiserez peut-être ce genre de syntaxe, permise par SCSS. Malgré son élégance apparente, elle cause plus de problèmes qu'elle n'en résout ! En effet, les sélecteurs complets n'apparaissent plus et la lecture devient plus difficile."
          },
          "question": {
            "text": "BEM s'appliquent aux blocs de votre page, mais cette dernière peut aussi avoir des styles beaucoup plus globaux, qu'on mettra souvent dans un dossier <code>/global</code>. Par exemple, quelle est la classe de l'élément non BEM qui contient ici le header, le main et le footer ?",
            "answer": "page",
            "clue": "g"
          }
        }
      ]
    },
    {
      "title": "Effets CSS avancés",
      "description": "Créer des effets visuels avancés mêlant textes, images et animations grâce aux propriétés CSS.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vR4Bi1_6E6rN9-LnLi9WZCh3RTXZKGHn272tCUelyi-2RZFgKjAu_LSXBF2xHoowhJ735zfdNINlYPV/pub?start=true&loop=false&delayms=6000000",
      "correctionVideoYoutubeId": "LskT4TrAyJg",
      "puzzle": {
        "word": "engine",
        "text": "Un moteur de rendu, ou <em>browser engine</em> en anglais, est un composant essentiel de chaque navigateur, chargé de transformer le HTML et le CSS en une représentation visuelle interactive. Il peut être différent selon chaque navigateur, ce qui peut entraîner des différences de support pour certaines propriétés. Comme autres composants essentiels d'un navigateur, on trouve notamment le moteur JavaScript et l'interface utilisateur (barre de recherche, favoris...)."
      },
      "concepts": [
        {
          "title": "Dégradés CSS",
          "theory": "Commençons par quelque chose de simple et extrèmement courant : les dégradés CSS. La propriété <code>background</code>, en plus des couleurs et urls, peut prendre en valeur la fonction de dégradé. Les deux dégradés les plus courants sont <code>linear-gradient</code> (dégradé linéaire) et <code>radial-gradient</code> (dégradé radial). Il est alors possible de définir une couleur de départ, une couleur d'arrivée (et une direction pour les dégradés linéaires). Il est également possible de combiner plusieurs dégradés dans un même fond.",
          "codes": {
            "html": "<div class=\"linear-gradient\"></div><div class=\"radial-gradient\"></div>",
            "css": ".linear-gradient { background: linear-gradient(to&nbsp;right,&nbsp;red,&nbsp;yellow); } .radial-gradient { background: radial-gradient(blue&nbsp;30%,&nbsp;green); }"
          },
          "info": "Par défaut, le dégradé produit une transition entre deux couleurs ou plus, de façon linéaire. Il est possible de paramétrer la manière dont les couleurs sont réparties en ajoutant des valeurs en pourcentage derrière elles, ce qui permet \"d'étaler\" plus ou moins une couleur sur l'espace disponible.",
          "links": [
            {
              "label": "linear-gradient",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/linear-gradient"
            },
            {
              "label": "radial-gradient",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/radial-gradient"
            },
            {
              "label": "Générateur en ligne",
              "url": "http://www.colorzilla.com/gradient-editor/"
            }
          ],
          "codepen": "maKPYe",
          "figure": {
            "src": "https://bennettfeely.com/gradients/img/gradient_24.png",
            "alt": "Dégradé CSS à deux dimensions",
            "caption": "Ce dégradé bi-dimensionnel peut être réalisé grâce à plusieurs dégradés linéaires, à condition qu'ils aient des directions différentes et qu'ils se dissolvent les uns dans les autres en utilisant des couleurs d'arrivé transparentes type <code>rgba(154, 111, 18, 0)</code>."
          }
        },
        {
          "title": "Filtres CSS",
          "theory": "Les filtres CSS permettent de réaliser des effets très variés, du simple noir et blanc à des manipulations dignes de certains logiciels de retouche. Dans leur forme la plus simple, ils s'utilisent avec la propriété <code>filter</code>, qui prend en valeur une ou plusieurs fonctions de transformation.",
          "codes": {
            "html": "<img class=\"grayscale\" src=\"cat.jpg\" /><img class=\"sepia\" src=\"cat.jpg\" /><img class=\"blur\" src=\"cat.jpg\" />",
            "css": ".grayscale { filter: grayscale(100%); } .sepia { filter: sepia(100%); } .blur { filter: blur(5px); }"
          },
          "warning": "Beaucoup des effets CSS décrits dans ce cours ne sont pas compatibles avec certains navigateurs, notamment IE11. Cela ne doit pas nous empêcher de les utiliser, mais assurez-vous que votre contenu est toujours lisible et cohérent malgré leur absence.",
          "links": [
            {
              "label": "Doc MDN sur les filtres",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/filter"
            },
            {
              "label": "Testez les filtres dynamiquement",
              "url": "https://codepen.io/SitePoint/pen/KwmeJZ"
            }
          ],
          "codepen": "EGLPeb",
          "question": {
            "text": "Quel filtre CSS permet de modifier la teinte d'une image ?",
            "answer": "hue-rotate",
            "clue": "e"
          },
          "figure": {
            "src": "https://camo.githubusercontent.com/636a52b7216246cdcd121d15aaef95084cbee4c1/687474703a2f2f7777772e773363706c75732e636f6d2f73697465732f64656661756c742f66696c65732f626c6f67732f323031352f313530362f6373732d626c656e642d6d6f64652d352e676966",
            "alt": "Un filtre CSS animé au survol d'une image",
            "caption": "Comparé à une manipulation en amont dans un logiciel, un avantage majeur de CSS est le fait de pouvoir animer les filtres en question."
          }
        },
        {
          "title": "Filtres utilisant un SVG",
          "theory": "Certains effets sont trop complexes pour être réalisés avec les filtres CSS de base. Mais il est possible de définir un filtre plus complexe grâce à <code>SVG</code>. <code>SVG</code> est un format d'image vectoriel, qui a en commun avec le HTML sa syntaxe utilisant des balises (syntaxe <code>XML</code>). Ce format permet de définir des images, mais aussi des filtres, se présentant comme une suite d'opérations plus ou moins complexes. On donne un <code>id</code> au filtre, ce qui nous permettra d'appliquer le filtre en CSS.",
          "codes": {
            "html": "<svg><filter id=\"turbulence\"><feTurbulence type=\"turbulence\" baseFrequency=\"0.05\" numOctaves=\"2\" result=\"turbulence\" /> <feDisplacementMap in2=\"turbulence\" in=\"SourceGraphic\" scale=\"50\" xChannelSelector=\"R\" yChannelSelector=\"G\" /></filter></svg><main><img src=\"cat.jpg\" /></main>",
            "css": "img { filter: url(#turbulence); }"
          },
          "info": "Le code de l'exemple applique un effet de turbulence à l'image. La légende ne dit pas si certains êtres humains parviennent à écrire cela sans utiliser Google. N'ayez pas peur de faire jouer vos talents de recherche.",
          "links": [
            {
              "label": "Liste des filtres SVG",
              "url": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter#See_also"
            },
            {
              "label": "Démo interactives des filtres SVG",
              "url": "https://yoksel.github.io/svg-filters/#/"
            },
            {
              "label": "Les matrices de couleurs",
              "url": "https://alistapart.com/article/finessing-fecolormatrix"
            }
          ],
          "codepen": "XoqpML",
          "question": {
            "text": "Quel filtre SVG permet floutter une image ? On peut le faire avec <code>filter: blur</code>, mais utiliser un filtre SVG permettra des combinaisons plus complexes.",
            "answer": "feGaussianBlur",
            "clue": "n"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2017/12/svg-duotone-beforeafter.png",
            "alt": "Une photo modifiée grâce à un filtre SVG",
            "caption": "Même Instagram ne saurait rivaliser face aux filtres SVG."
          }
        },
        {
          "title": "Masques textuels",
          "theory": "Un effet courant est l'apparition d'une image au travers d'un texte, comme si le texte découpait l'écran. Cet effet peut être réalisé de nombreuses manières, certaines utilisant SVG, d'autres non. Dans sa forme la plus modeste, le code est assez simple. Il s'agit d'une part de limiter l'apparition du <code>background</code> à la zone définie par le texte, et d'autre part de définir la couleur de ce texte comme étant transparente.",
          "codes": {
            "html": "<p>Le fond de mon texte est une image !</p>",
            "css": "p { color: transparent; -webkit-background-clip: text; background-image: url(\"ocean.jpg\"); }"
          },
          "info": "Les navigateurs basés sur le moteur WebKit ou dérivés (Chrome, Safari...) ont besoin du préfixe <code>-webkit-</code> pour la propriété <code>background-clip</code> car elle est encore expérimentale. Firefox ignore le préfixe et comprend la propriété telle quelle.",
          "links": [
            {
              "label": "La propriété background-clip",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/background-clip"
            },
            {
              "label": "Les différentes techniques",
              "url": "https://css-tricks.com/how-to-do-knockout-text/"
            },
            {
              "label": "Quelques dérivés astucieux",
              "url": "https://codepen.io/Jintos/pen/crlxk"
            }
          ],
          "codepen": "aPGaNB",
          "question": {
            "text": "Quelle valeur donner à <code>background-clip</code> pour que le fond ne s'applique pas sur la zone de padding d'une boîte ? (uniquement sur le contenu, laissant ainsi une marge)",
            "answer": "content-box",
            "clue": "e"
          },
          "figure": {
            "src": "https://i.ytimg.com/vi/KsrX1qyQDRs/maxresdefault.jpg",
            "alt": "Un effet de masque textuel avec fond décalé",
            "caption": "En utilisant un masque textuel + la même image légèrement décalée, vous pouvez facilement obtenir cet effet."
          }
        },
        {
          "title": "Masque à partir d'une forme",
          "theory": "Comment faire apparaître seulement une partie d'un élément ? C'est possible grâce à la propriété <code>clip-path</code>, qui définit un chemin (rectangle, cercle ou polygone customisé) en dehors duquel l'élément ne sera pas visible.",
          "codes": {
            "html": "<img src=\"huge-image.jpg\">",
            "css": "img { clip-path: inset(100px&nbsp;100px); }"
          },
          "info": "Le code de l'exemple va faire disparaître 100px sur chaque bord de l'image. Firefox possède un excellent éditeur de <code>clip-path</code> au sein de son inspecteur d'élément, à essayer !",
          "links": [
            {
              "label": "clip-path sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/clip-path"
            },
            {
              "label": "Éditeur de path en ligne",
              "url": "https://bennettfeely.com/clippy/"
            }
          ],
          "codepen": "VqxEzO",
          "question": {
            "text": "À quelle forme géométrique correspond le code suivant ? <code>polygon(50% 0%, 75% 50%, 50% 100%, 25% 50%)</code>",
            "answer": "losange",
            "clue": "g"
          },
          "figure": {
            "src": "https://cdn.csswinner.com/images/winners/2017/may/51605166.jpg",
            "alt": "Une utilisation de clip-path pour un portefolio",
            "caption": "Les possibilités sont infinies, des plus discrètes aux plus inventives et osées."
          }
        },
        {
          "title": "Flux de texte autour d'une forme",
          "theory": "Si l'observation est votre point fort, vous avez peut-être remarqué que les images .jpg et .png sont toujours rectangulaires. Est-il alors possible de faire suivre à du texte les contours d'un objet représenté au sein d'une image ? La propriété <code>shape-outside</code> le permet. C'est la zone définie par cette dernière qui sera utilisée pour calculer la position du texte flottant autour, et non pas l'entièreté de l'image.",
          "codes": {
            "html": "<img src=\"baloon.jpg\" /><p>Ce texte flottera en suivant la forme circulaire du ballon et non pas la forme rectangulaire de l'image.</p>",
            "css": "img {float: left; shape-outside: circle(50%); }"
          },
          "info": "On retrouve ici l'intention de base derrière l'invention de la propriété <code>float</code> : faire flotter du texte autour d'une ou plusieurs images, comme dans le monde du print. L'usage de <code>float</code> fût longtemps également nécessaire pour gérer les mises en page (blocs en vis-à-vis, etc), jusqu'à ce que des propriétés dédiées telles que flexbox et grid prennent le relais.",
          "links": [
            {
              "label": "shape-outside sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/shape-outside"
            }
          ],
          "codepen": "ebrqKd",
          "question": {
            "text": "Quelle valeur peut-on donner à <code>shape-outside</code> pour faire suivre un dégradé aux éléments alentour ?",
            "answer": "linear-gradient",
            "clue": "i"
          },
          "figure": {
            "src": "http://razvancaliman.com/writing/css-shapes-editor-chrome/edit.gif",
            "alt": "L'éditeur de formes CSS sur Firefox",
            "caption": "Un éditeur de formes CSS tel que celui présenté dans l'inspecteur d'éléments Firefox peut nous procurer un grand confort."
          }
        },
        {
          "title": "Transformations 3D",
          "theory": "Une transformation 3D courante est la rotation sur elle-même d'une tuile afin de dévoiler son verso. La stratégie globale est la suivante : deux éléments, dont un a subi une rotation sur l'axe Y de 180 degrés (il est donc de dos). Au moment souhaité, on fait également subir au parent une rotation sur l'axe Y de 180 degrés, ce qui inverse les rôles : le verso devient le côté présenté. L'effet est renforcé en définissant une perspective sur la \"scène\" (un élément parent à tout cela).",
          "codes": {
            "html": "<div class=\"scene\"><div class=\"scene__card\"><div class=\"scene__side scene__side--front\"></div><div class=\"scene__side scene__side--back\"></div></div></div>",
            "css": ".scene { perspective: 500px; perspective-origin: 100px&nbsp;100px; } .scene__card { position: relative; transform-style: preserve-3d; width: 200px; height: 200px; transition: transform&nbsp;1s; } .scene__card:hover { transform: rotateY(180deg); } .scene__side { position: absolute; width: 100%; height: 100%; backface-visibility: hidden; } .scene__side--front { background-color: red; } .scene__side--back { transform: rotateY(180deg); background-color: yellow; }"
          },
          "info": "Le code d'exemple est long mais facile à décliner une fois qu'on en a compris la logique. N'hésitez pas à prendre le temps de le reproduire dans un CodePen pour le décortiquer.",
          "links": [
            {
              "label": "La propriété perspective",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/perspective"
            },
            {
              "label": "La propriété perspective-origin",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/perspective-origin"
            },
            {
              "label": "La propriété backface-visibility",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/backface-visibility"
            }
          ],
          "codepen": "OrZqrv",
          "figure": {
            "src": "https://codetea.com/content/images/2017/10/World-Places--CSS-3d-hover-.gif",
            "alt": "Un effet CSS 3d qui dévoile une carte",
            "caption": "Tout le reste n'est que déclinaison. Un habile mélange de <code>translate</code>, <code>rotate</code> et <code>perspective</code> permet de réaliser cet effet simplement."
          }
        },
        {
          "title": "Fusions de calques",
          "theory": "On peut obtenir grâce à la propriété <code>mix-blend-mode</code> ce qu'on pourrait apparenter à de la fusion de calques sur des logiciels de retouche. De nombreux algorithmes de combinaison des couleurs sont proposés, permettant une impressionante variété de résultats. Un calque peut être n'importe quel élément : image, texte ou autre.",
          "codes": {
            "html": "<img src=\"cat1.jpg\" /><img src=\"cat2.jpg\" />",
            "css": "img { mix-blend-mode: multiply; }"
          },
          "warning": "Réaliser ces effets en CSS procure l'avantage de pouvoir modifier des images qu'on ne connaît pas encore pendant le processus de développement (ajoutées plus tard comme sur un blog, par exemple), ou encore de réagir aux interactions (<code>:hover</code>, etc). Mais n'oubliez pas de toujours vérifier la compatibilité des effets que vous utilisez, par exemple sur <em>caniuse.com</em>.",
          "links": [
            {
              "label": "mix-blend-mode sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/mix-blend-mode"
            },
            {
              "label": "Un exemple poussé et puissant",
              "url": "https://codepen.io/danwilson/pen/dqZvmx"
            }
          ],
          "codepen": "BvxgZw",
          "question": {
            "text": "En colorimétrie, quel est le nom donné à l'intensité d'une couleur ou d'une teine ? C'est aussi une valeur possible pour <code>mix-blend-mode</code>",
            "answer": "saturation",
            "clue": "n"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2015/10/xoxo.jpg",
            "alt": "Un design utilisant mix-blend-mode",
            "caption": "Pas besoin de pousser la complexité à l'extrême pour obtenir des résultats visuellement intéressants."
          }
        }
      ]
    },
    {
      "title": "S'adapter au contexte",
      "description": "Bonnes pratiques et outils pour s'adapter aux capacités des écrans, des navigateurs et des utilisateurs.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vQ0mXT6ESa5oXsRi5nxs2poDkX9xDMImupSdMhNPOTpvFdZysXGjs2K9Fih6DkY3eZ-IAknE6yu7sL9/pub?start=true&loop=false&delayms=60000",
      "correctionVideoYoutubeId": "GJCh4LFAWdo",
      "puzzle": {
        "word": "capacite",
        "text": "Seules les capacités des appareils que nous ciblons devraient nous intéresser, pas les appareils eux-mêmes, l'immense variété de ces derniers empêchant toute prédiction. Les capacités (ou <i>features</i>), elles, peuvent être testées de manière quasi-déterministe, nous permettant de réaliser des sites solides se construisant selon la nature précise de chaque contexte."
      },
      "concepts": [
        {
          "title": "Image de background responsive",
          "theory": "Une immense économie de données et de temps peut être effectuée en changeant la source d'une image en fonction de la taille/densité de l'écran. Il serait absurde de fournir la même image sur une tablette de faible densité que sur un grand écran ultra HD. Les media queries nous permettent de modifier la propriété <code>background-image</code> en fonction du contexte. Ces techniques peuvent aisément diviser par 2, voire plus, le poids d'une page web.",
          "codes": {
            "html": "<div class=\"cat\" src=\"cat.jpg\"></div>",
            "scss": ".cat { width: 200px; height: 200px; background-image: url(\"cat-small.jpg\"); @media (min-width: 600px) { width: 500px; height: 500px; background-image: url(\"cat-medium.jpg\"); } @media (min-width: 1150px) { width: 800px; height: 800px; background-image: url(\"cat-large.jpg\"); @media (min-resolution: 192dpi) { background-image: url(\"cat-xlarge.jpg\"); }}}"
          },
          "info": "Un écran est dit HD (ou <i>Retina</i>, bien qu'il s'agisse d'un terme déposé par Apple), lorsque sa densité de pixels (dpi = <i>dot per inch</i>) est plus elevée que la normale. Elle varie pour chaque écran, allant de <code>96dpi</code> pour les écrans classiques à <code>568dpi</code> pour le Galaxy S8, parfois au-delà. On peut considérer qu'un écran au dessus de <code>192dpi</code> est HD. On parle aussi parfois de PPI (<i>pixel per inch</i>), mais la différence n'a d'importance que si on considère le print.",
          "links": [
            {
              "label": "La media query resolution",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/@media/resolution"
            },
            {
              "label": "Testez votre appareil",
              "url": "https://www.mydevice.io/"
            },
            {
              "label": "Liste des densités par appareil",
              "url": "http://dpi.lv/"
            }
          ],
          "codepen": "XoyZYm",
          "question": {
            "text": "Quelle valeur, à ne pas confondre avec la densité de pixels exprimée en <em>dpi</em>, représente le rapport entre le nombre de pixels CSS et le nombre de pixels réels ?",
            "answer": "pixel ratio",
            "clue": "a"
          },
          "figure": {
            "src": "http://teknosrc.com/wp-content/uploads/2013/12/Pixel-Density-Comparison-of-Displays-with-Different-Resolution.gif",
            "alt": "Zoom sur deux écrans de densité différente",
            "caption": "Plus il y a de pixels dans le même pouce (<i>inch</i> en anglais), plus la densité de pixels / points est elevée. En CSS, la notion de <em>pixel ratio</em> permet de définir deux éléments de même taille CSS qui auront une taille physique similaire sur tous les écrans malgré la différence de densité."
          }
        },
        {
          "title": "Balises img responsives avec srcset",
          "theory": "Nous pouvons rendre les images de background responsive, mais quid des balises <code>img</code> ? Grâce à l'attribut <code>srcset</code>, cela est encore plus simple qu'avec les media queries. En effet, nous n'allons plus décider nous-même de quand charger quoi, mais plutôt fournir une liste de ressources au navigateur, chaque ressource étant associée à sa largeur (avec l'unité <code>w</code>, pour <i>width</i>). Et c'est le navigateur qui sera maître de la décision en fonction du contexte : taille de l'écran, densité des pixels, qualité de la connexion... En plus de la simplicité d'écriture, l'avantage est majeur : le navigateur est bien mieux placé que nous pour savoir quelle est l'image la plus adaptée.",
          "codes": {
            "html": "<img src=\"cat-large.jpg\" srcset=\"cat-small.jpg 200w, cat-medium.jpg 500w, cat-large.jpg 800w, cat-xlarge.jpg 1600w\">"
          },
          "warning": "N'oubliez pas de laisser l'attribut <code>src</code> pour les navigateurs ne comprenant pas <code>srcset</code>.",
          "links": [
            {
              "label": "Images adaptatives sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Apprendre/HTML/Comment/Ajouter_des_images_adaptatives_%C3%A0_une_page_web"
            },
            {
              "label": "Support de la fonctionnalité",
              "url": "https://caniuse.com/#feat=picture"
            }
          ],
          "codepen": "ebQrwX",
          "question": {
            "text": "Quel élément HTML doit-on utiliser si on souhaite maîtriser avec exactitude quelle image sera chargée en fonction de la taille de l'écran, sans laisser le choix au navigateur ?",
            "answer": "picture",
            "clue": "c"
          },
          "figure": {
            "src": "https://designshack.net/wp-content/uploads/focalpoint-1.jpg",
            "alt": "Une image originale et sa version découpée",
            "caption": "Une image plus petite n'est pas forcément une réduction directe de l'image originale. Vous pouvez tirer parti des techniques responsives pour mettre en valeur le sujet sur des écrans plus petits, en recadrant l'image."
          }
        },
        {
          "title": "Prendre en compte la taille de l'image avec l'attribut sizes",
          "theory": "Lorsqu'on utilise <code>srcset</code>, le navigateur part du principe que l'image sera affichée avec la même largeur que le viewport pour décider quelle ressource charger. C'est souvent vrai sur mobile, beaucoup moins sur des écrans plus grands. On va donc informer le navigateur des dimensions appliquées aux images pour qu'il puisse faire le choix le plus optimisé possible. Il s'agit de retranscrire les dimensions définies dans le CSS grâce à l'attribut <code>sizes</code>. Chaque valeur dans cette liste est une condition (<code>max-width</code>) suivie d'une dimension en <code>vw</code> ou <code>px</code>. La dernière valeur n'a pas de condition, c'est la dimension de l'image sur les écrans les plus grands.",
          "codes": {
            "html": "<img src=\"cat-large.jpg\" srcset=\"cat-large.jpg 200w, cat-medium.jpg 500w, cat-large.jpg 800w, cat-xlarge.jpg 1600w\" sizes=\"(max-width: 767px) 100vw, (max-width: 1023px) 50vw, 800px\">",
            "scss": "img { width: 100vw; @media (min-width: 768px) { width: 50vw; } @media (min-width: 1024px) { width: 800px; }}"
          },
          "warning": "Contrairement à la stratégie Mobile First utilisant <code>min-width</code> dans le CSS, on utilise <code>max-width</code> dans l'attribut <code>sizes</code>, et c'est la première condition valable qui est prise en compte. C'est pour cela que les valeurs sont différentes d'un pixel : <code>min-width: 768px</code> équivaut à <code>max-width: 767px</code>. Malheureusement, le HTML ne peut pas \"deviner\" ces informations à partir du CSS, d'où la redondance.",
          "links": [
            {
              "label": "Images adaptatives sur MDN",
              "url": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"
            },
            {
              "label": "Un article poussé et interactif sur les sizes",
              "url": "https://beta.observablehq.com/@eeeps/w-descriptors-and-sizes-under-the-hood"
            }
          ],
          "codepen": "OraEBo",
          "question": {
            "text": "Si on définit <code>sizes=\"(max-width: 767px) 100vw, (max-width: 1023px) 50vw, 800px\"</code>, quelle sera la taille de l'image en pixels sur un écran de 850px ?",
            "answer": "425px",
            "clue": "p"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2014/05/sizes-attribute1.svg",
            "alt": "La syntaxe des attributs srcset et sizes",
            "caption": "La syntaxe peut sembler difficile au départ, mais la puissance qu'elle offre dans la gestion des images responsive en vaut chaque caractère."
          }
        },
        {
          "title": "Tester le viewport avec matchMedia",
          "theory": "Il est important que les fonctionnalités gérées par le JavaScript (slider, menu, scroll customisé...) soient tout aussi responsive que le CSS. Il est courant de vouloir désactiver certaines fonctionnalités selon la taille du viewport, en miroir avec les media queries utilisées dans le CSS. La fonction <code>matchMedia</code> permet de tester à un instant précis si le viewport satisfait la condition donnée.",
          "codes": {
            "html": "<header>Bienvenue !</header>",
            "scss": "header {@media (min-width: 800px) {position: fixed; }}",
            "js": "window.addEventListener('resize',&nbsp;function()&nbsp;{<br/>&nbsp;&nbsp;if&nbsp;(window.matchMedia('(min-width:&nbsp;800px)').matches)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Screen&nbsp;is&nbsp;wide,&nbsp;do&nbsp;special&nbsp;things&nbsp;!<br/>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Screen&nbsp;is&nbsp;small,&nbsp;do&nbsp;nothing<br/>&nbsp;&nbsp;}<br/>});"
          },
          "warning": "Faîtes en sorte que votre JavaScript ne contienne pas de \"valeurs magiques\". Si vous avez besoin d'une dimension pour faire des calculs par exemple, récupérez cette dimension en JavaScript en interrogeant directement l'élément CSS pour avoir les valeurs réelles. Mais attention à mettre à jour cette valeur et les calculs dès que la taille de l'écran est modifiée.",
          "links": [
            {
              "label": "matchMedia sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/API/Window/matchMedia"
            }
          ],
          "codepen": "MZZpQV",
          "question": {
            "text": "En JavaScript, quelle propriété d'un élément HTML permet de récupérer sa largeur, bordures incluses ?",
            "answer": "offsetWidth",
            "clue": "e"
          },
          "figure": {
            "src": "https://cdn.dribbble.com/users/688456/screenshots/2050775/dribbbleanim2.gif",
            "alt": "Un portefolio animé",
            "caption": "En parallèle de vos travaux d'animation JavaScript, posez-vous toujours la question de la \"responsivité\" de ces animations : comment devront-elles s'adapter sur mobile ?"
          }
        },
        {
          "title": "Feature query @supports",
          "theory": "Lorsqu'on veut implémenter une fonctionnalité avancée en termes de règles CSS, on risque parfois de laisser des navigateurs plus vieux (et donc des visiteurs) sur le bord de la route. Pour faire varier les règles en fonction du support navigateur, on peut utiliser la règle <code>@supports</code>. Comme les media query testant par exemple la taille d'un appareil, <code>@supports</code> permet d'appliquer du CSS seulement si il est compris par le navigateur.",
          "codes": {
            "html": "<main><section>Section 1</section><section>Section 2</section><section>Section 3</section><section>Section 4</section></main>",
            "scss": "main { @supports (display: grid) {display: grid; grid-template-rows: repeat(2,&nbsp;auto); grid-template-columns: repeat(2,&nbsp;auto); }} section { width: 200px; height: 200px; display: inline-block;  @supports (display: grid) { display: block; }}"
          },
          "warning": "Vous croiserez dans certaines documentation la syntaxe <code>@supports not</code>, permettant de cibler les navigateur ne comprenant <em>pas</em> la règle proposée. Mais il ne faut pas l'utiliser, car certains navigateurs ne comprennent simplement pas la règle <code>@supports</code> elle-même. Il faut donc écrire du code adapté à tous les navigateurs, et ensuite l'améliorer pour les navigateurs récents avec <code>@supports</code> (voir l'exemple ou les sections sont en <code>inline-block</code> par défaut, et passent en <code>grid</code> si possible).",
          "links": [
            {
              "label": "@supports sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/@supports"
            },
            {
              "label": "Comment l'utiliser correctement",
              "url": "https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/"
            },
            {
              "label": "Support... de @supports",
              "url": "https://caniuse.com/#feat=css-featurequeries"
            }
          ],
          "codepen": "pqqNOB",
          "question": {
            "text": "Avec quel mot clé peut-on tester si le navigateur comprend un sélecteur donné ?",
            "answer": "selector",
            "clue": "t"
          },
          "figure": {
            "src": "https://la-cascade.io/content/images/2017/02/css-shapes-supports-fallback.small-compressor.jpeg",
            "alt": "Un exemple de règle @supports",
            "caption": "La règle <code>@supports</code> vous permet d'éviter de rendre votre contenu innaccessible. Ici, l'image de fond n'est changée que si la propriété <code>background-blend-mode</code> est comprise. Sinon, on utilise la première, avec laquelle on sait que le texte sera lisible."
          }
        },
        {
          "title": "Tester un support CSS en JavaScript",
          "theory": "Il peut être parfois avantageux de savoir si une fonctionnalité CSS est disponible ou non dans le JavaScript, afin de ne pas exécuter un script qui n'aura aucun effet, ou au contraire de compenser l'absence de fonctionnalité avec un script de secours. Le mot clé <code>@supports</code> en CSS est transposé en JavaScript sous la forme d'une fonction <code>CSS.supports</code>, qui fonctionne de la même manière.",
          "codes": {
            "js": "if&nbsp;(CSS.supports('clip-path',&nbsp;'circle(50px)'))&nbsp;{<br/>&nbsp;&nbsp;//&nbsp;Do&nbsp;awesome&nbsp;things<br/>}&nbsp;else&nbsp;{<br/>&nbsp;&nbsp;//&nbsp;Provide&nbsp;fallback<br/>}"
          },
          "warning": "Comme <code>@supports</code>, la fonction <code>CSS.supports</code> n'est comprise que par certains navigateurs. Souvent, un navigateur ne comprenant pas <code>CSS.supports</code> ne comprendra pas la fonctionnalité en question, mais attention aux \"faux négatifs\". Par exemple, IE11 ne comprendrait pas <code>CSS.supports('display', 'flex')</code>, alors qu'il est capable d'utiliser flexbox. Il faut donc bien vérifier les supports respectifs et faire le bon choix.",
          "links": [
            {
              "label": "CSS.supports() sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/API/CSS/supports"
            },
            {
              "label": "Support navigateur",
              "url": "https://caniuse.com/#search=CSS.supports"
            }
          ],
          "codepen": "rooQyL",
          "question": {
            "text": "Petit rappel JavaScript : quel caractère doit-on utiliser devant <code>CSS.supports(...)</code> si on souhaite détecter que le navigateur ne supporte <em>pas</em> la fonctionnalité ?  Un...",
            "answer": "point d'exclamation",
            "clue": "i"
          },
          "figure": {
            "src": "https://www.sunshinesupport.com/Images/browser_not_supported.png",
            "alt": "Une page invitant à mettre à jour son navigateur",
            "caption": "Mauvaise pratique : bloquer la visite du site à un utilisateur possédant un navigateur trop vieux. Bonne pratique : offrir une version simple à tous et utilser l'amélioration progressive, en invitant les utilisateurs utilisant un vieux navigateur à le mettre à jour <em>s'ils le souhaitent</em>. Bien sûr, on attend pas le même support de la part d'un site gouvernemental, censé être accessible à tous, et d'un portefolio, ciblant plutôt les gens de la profession, souvent mieux équipés. Adaptez-vous !"
          }
        },
        {
          "title": "Feature query en JavaScript",
          "theory": "Nous savons détecter le support de fonctionnalités CSS, il serait évidemment intéressant de pouvoir faire de même pour les fonctionnalités JavaScript (géolocalisation, <i>device motion</i>, webcam...). Des outils comme <em>Modernizr</em> sont souvent utilisés. Ce dernier est capable de tester des centaines de fonctionnalités dans le navigateur. Selon la fonctionnalité à tester, il est parfois tout aussi pratique de le faire à la main. Le principe reste le même : on demande au navigateur s'il comprend l'instruction avant de l'utiliser, et de fournir une alternative si ce n'est pas le cas.",
          "codes": {
            "html": "<h1>Remuez votre téléphone !</h1>",
            "css": "h1 {display: none; } body.has-devicemotion { h1 { display: block; }}",
            "js": "if (window.ondevicemotion) {<br/>&nbsp;&nbsp;document.body.classList.add('has-devicemotion');<br/>&nbsp;&nbsp;// Do some motion detection<br/>} else {<br/>&nbsp;&nbsp;// Provide fallback<br/>}"
          },
          "info": "Le code de l'exemple teste la présence de la propriété <code>ondevicemotion</code> avant d'effectuer des opérations impliquant la position du téléphone. En plus, il ajoute une classe <code>has-devicemotion</code> au <code>body</code>, permettant au CSS de \"savoir\" que la fonctionnalité est disponible et de s'adapter.",
          "links": [
            {
              "label": "L'amélioration progressive",
              "url": "https://fr.wikipedia.org/wiki/Am%C3%A9lioration_progressive"
            },
            {
              "label": "La librairie Modernizr",
              "url": "https://modernizr.com/docs/"
            },
            {
              "label": "Testez votre navigateur",
              "url": "https://browserleaks.com/features"
            }
          ],
          "codepen": "roomzE",
          "question": {
            "text": "Quel est le nom, en anglais, donné à une solution de repli lorsque la fonctionnalité voulue n'est pas supportée ?",
            "answer": "fallback",
            "clue": "a"
          },
          "figure": {
            "src": "https://cdn.shopify.com/s/files/1/0533/2089/files/partners_blog_progressive_enhancement_hero_e1db29d2-6a0e-4df9-8ed9-5888d27940e0.gif?v=1487161323",
            "alt": "Allégorie comparant un gâteau à l'amélioration progressive",
            "caption": "Une allégorie de l'amélioration progressive : le gâteau est le HTML, accessible et universel. Le glaçage est le CSS, décoratif. Les bougies sont les fonctionnalités JavaScript avancées que vous allez proposer... à condition d'avoir ce qu'il faut pour allumer les bougies."
          }
        },
        {
          "title": "Adapter la taille des éléments avec rem",
          "theory": "La taille de base de police sur les navigateurs est souvent 16px, ce qui permet d'avoir un affichage relativement uniforme sur tous les appareils. Mais ce n'est pas toujours le cas. D'une part, certains appareils ou navigateurs peuvent proposer une taille de base plus petite ou plus grande, selon leur écran. Situation plus courante, les utilisateurs peuvent décider eux-même de modifier la taille de base dans les paramètres de leur navigateur (ce qui est une action différente de zoomer). Si on utilise les <code>px</code> pour dimensionner notre contenu, ces dimensions ne réagiront pas à un changement de contexte. <code>32px</code> par exemple, sont toujours égaux à <code>32px</code>... Mais si on utilise l'unité <code>rem</code>, le contenu réagit à ces changements ! <code>1rem</code> vaudra <code>16px</code> sur la plupart des appareils, mais vaudra plus sur un navigateur dont l'utilisateur a augmenté la taille de la police de base. Il est donc recommandé d'utiliser cette unité pour les <code>font-size</code>, ainsi que toutes les autres dimensions (<code>margin</code>, <code>width...</code>). Pas d'inquiétude, cette traduction <code>rem</code> -> <code>px</code> est souvent automatisée.",
          "codes": {
            "html": "<h1>Bienvenue !</h1><h2>Voici un beau site en rem</h2>",
            "css": "h1 { font-size: 2.5rem; margin-bottom: 1.2rem; } h2 { font-size: 1.8rem; width: 8.4rem; }"
          },
          "info": "Vous croiserez aussi l'unité <code>em</code>, relative à la taille du bloc parent. Par exemple, <code>font-size: 0.5em</code> dans un conteneur dont la taille de police est <code>20px</code> donnera une taille de <code>10px</code>. <code>rem</code> signifie <i><em>root</em> em</i> : c'est en effet le même principe qu'avec <em>em</em>, mais on se réfère toujours à la racine (la taille de police de l'élément <code>html</code>, définie par le navigateur), ce qui rend les calculs plus simples. <code>0.5rem</code> vaut bien <code>0.5rem</code> partout dans le code.",
          "links": [
            {
              "label": "REM calculator",
              "url": "https://offroadcode.com/rem-calculator/"
            },
            {
              "label": "Démo interactive",
              "url": "https://codepen.io/tutsplus/pen/bdxWbB"
            },
            {
              "label": "Pourquoi la taille de base peut changer",
              "url": "https://nicolas-hoizey.com/2016/03/people-don-t-change-the-default-16px-font-size-in-their-browser.html"
            }
          ],
          "codepen": "YddmEo",
          "question": {
            "text": "Quelle unité peut être utilisée avec <code>width</code> pour dimensionner un bloc non pas à partir d'une taille, mais en fonction du nombre approximatif de caractères qu'on souhaite présenter sur une seule ligne ? C'est une unité qui est équivalente à la largeur du chiffre 0 dans la fonte.",
            "answer": "ch",
            "clue": "c"
          },
          "figure": {
            "src": "https://imgflip.com/s/meme/Grandma-Finds-The-Internet.jpg",
            "alt": "Une grande-mère consultant une page web",
            "caption": "Bien que peu nombreuses, certaines études indiquent que 3% des utilisateurs ont une taille de police différente de 16px sur leur navigateur. Pensez à eux, ils vous le rendront bien."
          }
        }
      ]
    },
    {
      "title": "Le format d'image SVG",
      "description": "Intégrer, composer et animer des images utilisant SVG, un format d'image léger et responsive.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vQBKGcwQ1oSPzchoPY1A-g4d6on8SnmKwlgVoxOA4Sb1oNIZwng7XitNHytTUaYLVnm9aTThPNNrfMp/pub?start=true&loop=false&delayms=60000000",
      "correctionVideoYoutubeId": "e3mAFuMzrfQ",
      "puzzle": {
        "word": "scalable",
        "text": "La <em>scalabilité</em> désigne la capacité d'un système à s'adapter aux changement de grandeur. C'est un terme qui s'applique très bien aux images vectorielles, mais aussi par exemple à un système de serveurs qui serait capable de s'adapter rapidement à une demande intense de la part du réseau."
      },
      "concepts": [
        {
          "title": "Intégrer un SVG avec la balise img",
          "theory": "Vue de l'extérieur, une image SVG ne diffère en rien d'un JPEG ou d'un PNG. Il est possible de l'intégrer de la même façon, grâce à une balise <code>img</code>. Un gain immédiat et majeur est que la taille de l'image n'impactera pas sa qualité, faisant du SVG un format à privilégier lorsque le type d'image le permet (logo, graphique, dessin simple...).",
          "codes": {
            "html": "<img src=\"paris.svg\" alt=\"La carte de Paris\">"
          },
          "info": "Un SVG peut également être utilisé en tant que <code>background-image</code>.",
          "links": [
            {
              "label": "SVG sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/SVG"
            }
          ],
          "codepen": "NeQvML",
          "question": {
            "text": "Les images SVG ne perdent pas en qualité avec leur taille car il s'agit d'un format d'image <em>vectoriel</em>, composé d'opérations géométriques. À l'inverse, quel est le format d'une image constituéé de pixels en nombre précis ?",
            "answer": "matriciel",
            "clue": "a"
          },
          "figure": {
            "src": "https://img.pagecloud.com/wAegMZSQrxtIBtV-i7jBCW-Ho7Y=/1000x0/filters:no_upscale()/blogmerge/cf67f56e-00e6-48c0-a1a4-31a8e3baf0de.jpeg",
            "alt": "Comparaison des formats d'images sur le web.",
            "caption": "Comparaison des formats d'images. <i>Raster</i> désigne les images constituées de pixels. <i>Lossy</i> signifie que le format implique une perte d'information lors de la compression."
          }
        },
        {
          "title": "SVG inline, viewport & viewBox",
          "theory": "Si l'on peut inclure un SVG avec la balise <code>img</code>, pourquoi irions-nous en intégrer le code directement dans notre page à la place ? Cela présente plusieurs avantages explorés dans ce chapitre, le plus direct étant l'économie d'une requête http (chaque requête ayant un impact significatif sur la performance). Cela impose néamoins de comprendre qu'un svg ne se comporte plus comme une image classique une fois intégré. Les attributs <code>width</code> et <code>height</code> de la balise SVG (ou du CSS) définissent une fenêtre d'affichage appelée <em><i>viewport</i></em>, tandis que l'attribut <code>viewBox</code> détermine quelle partie du SVG sera affichée dans cette fenêtre d'affichage. Si la <code>viewBox</code> correspond aux dimensions du <i>viewport</i>, le SVG est affiché en entier. Des valeurs différentes permettent de \"zoomer\" sur une partie du SVG ou l'afficher en plus petit que la zone du <i>viewport</i>.",
          "codes": {
            "html": "<svg viewBox=\"0 0 100 100\"><circle cx=\"50\" cy=\"50\" r=\"50\" /></svg>",
            "css": "svg { width: 300px; height: 300px; }"
          },
          "info": "Il est difficile de savoir par quel bout aborder les dimensions en SVG. Quand vous intégrez un SVG dans une page, commencez par définir sa largeur et hauteur en CSS, éventuellement avec une bordure temporaire pour bien voir la zone définie (le <i>viewport</i>). Ensuite, appliquez ou modifiez l'attribut <code>viewBox</code> pour adapter le contenu du SVG au <i>viewport</i>. Dans le code de l'exemple, on souhaite afficher le SVG à une taille de <code>300px</code>, d'où le code CSS. Le svg définit un cercle de <code>50px</code> de rayon, donc <code>100px</code> de diamètre. Pour l'afficher en entier dans la zone définie par le CSS, on utilise donc <code>viewBox=\"0 0 100 100\"</code>. Le résultat est un cercle de <code>300px</code> de diamètre, mais rien ne nous interdit d'utiliser une dimension relative en CSS, telle que <code>50vw</code>.",
          "links": [
            {
              "label": "Comprendre le viewport et viewBox",
              "url": "https://webdesign.tutsplus.com/fr/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844"
            },
            {
              "label": "How to scale SVG",
              "url": "https://css-tricks.com/scale-svg/"
            }
          ],
          "codepen": "NeQJEj",
          "question": {
            "text": "Avez-vous bien compris <code>viewBox</code> ? Pour le savoir, imaginez un code svg décrivant en son sein un losange de 100 pixels de large et de 200 pixels de haut. Si l'on définit <code>viewBox=\"0 0 100 100\"</code>, quelle sera la forme géométrique réellement affichée ?",
            "answer": "triangle",
            "clue": "l"
          },
          "figure": {
            "src": "http://buildawesomewebsites.com/assets/uploads/viewbox_explained.svg",
            "alt": "L'attribut viewBox de la baslise svg.",
            "caption": "La balise <code>svg</code> définit des formes géométriques (ici, le cercle jaune) dans un repère infini. L'attribut <code>viewBox</code> permet de définir la zone effectivement présentée dans l'espace disponible."
          }
        },
        {
          "title": "L'attribut preserveAspectRatio",
          "theory": "Dans un monde responsive, la taille du <i>viewport</i> du SVG peut changer en fonction de la taille du <i>viewport</i> navigateur, notamment si on la définit en pourcentages. Que se passe t-il si la taille du <i>viewport</i> n'a plus le même ratio que la zone définie par l'attribut <code>viewBox</code>, par exemple si on se retrouve à afficher un cercle SVG dans un viewport n'étant pas carré ? Par défaut, l'image est reduite et le ratio est conservé, comme si on utilisait <code>background-size: contain</code> ou <code>object-fit: contain</code>. On peut obtenir d'autres comportements, et gérer la position du rognage si rognage il y a, grâce à l'attribut <code>preserveAspectRatio</code>.",
          "codes": {
            "html": "<svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMinYMid meet\"><circle cx=\"50\" cy=\"50\" r=\"50\" /></svg>",
            "css": "svg { width: 300px; height: 100px; }"
          },
          "info": "Dans l'exemple, le cercle (ratio 1:1) n'a pas le même ratio que ce qui est défini en CSS (3:1). L'attribut <code>preserveAspectRatio</code> est découpé en deux parties. La première, <code>xMinYMid</code>, définit que le contenu du svg devra se placer au début de l'espace disponible en X, au milieu en Y. La seconde, <code>meet</code>, est l'équivalent de <code>contain</code> en CSS, alors qu'un comportement équivalent à <code>cover</code> peut être obtenu avec <code>slice</code>.",
          "links": [
            {
              "label": "preserveAspectRatio sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/SVG/Attribute/preserveAspectRatio"
            },
            {
              "label": "Comprendre preserveAspectRatio",
              "url": "https://la-cascade.io/comprendre-svg-preserveaspectratio/"
            },
            {
              "label": "Démo interactive",
              "url": "https://codepen.io/giodif/pen/VYpaeo"
            }
          ],
          "codepen": "zygQKB",
          "question": {
            "text": "Quelle valeur peut-on donner à <code>preserveAspectRatio</code> pour forcer l'image à se déformer (équivalent de <code>background-size: 100% 100%</code>) ?",
            "answer": "none",
            "clue": "e"
          },
          "figure": {
            "src": "http://res.cloudinary.com/dno0vkynk/image/upload/v1475392871/SVGPreserveAspectRatio.png",
            "alt": "Schéma du fonctionnement de preserveAspectRatio",
            "caption": "<code>preserveAspectRatio</code> est la bouée de sauvetage du SVG dans un environnement responsive."
          }
        },
        {
          "title": "Formes simples",
          "theory": "Il est temps de ne plus seulement inclure du SVG, mais d'en écrire nous-même. Le format SVG fournit plusieurs balises pour produire des formes de base : <code>circle</code>, <code>ellipse</code>, <code>rect</code>... La balise <code>polygon</code> permet, elle, de définir une forme sur mesure. Pour chaque forme, on indiquera ses coordonnées en X et Y et ses propriétés spéciales : rayon, hauteur, largeur...",
          "codes": {
            "html": "<svg><circle cx=\"50\" cy=\"50\" r=\"50\" /><rect x=\"100\" y=\"100\" width=\"150\" height=\"200\" /><polygon points=\"100,80 20,80 20,40\" /></svg>"
          },
          "info": "C'est en réalité ce que font <i>Illustrator</i> ou tout autre logiciel de design vectoriel lorsque vous leur donnez des instructions. On ira guère plus loin en termes de code, ces outils se révélant quasi-indispensables dès que la situation se complexifie un peu.",
          "links": [
            {
              "label": "Formes de bases sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/SVG/Tutoriel/Formes_de_base"
            }
          ],
          "codepen": "aPegxX",
          "question": {
            "text": "Quelle forme géométrique, disponible en SVG, est caractérisée par deux rayons (un vertical et un horizontal) au lieu d'un seul pour un cercle ?",
            "answer": "ellipse",
            "clue": "l"
          },
          "figure": {
            "src": "https://cdn.mos.cms.futurecdn.net/NXYwnQd6sxs64HS8ErJjAP-650-80.jpg",
            "alt": "Le logiciel Illustrator",
            "caption": "Les logiciels vectoriels tels qu'<i>Illustrator</i> ne stockent pas des matrices de pixels, mais bien des instructions de formes et couleurs telles qu'on les retrouve en SVG. C'est pour cela que vous pouvez enregistrer un fichier <i>Illustrator</i> au format SVG, puis en copier/coller le contenu dans une page web."
          }
        },
        {
          "title": "Attributs des éléments SVG",
          "theory": "Outre leur taille et position, les éléments svg peuvent recevoir plusieurs attributs permettant de définir leur apparence : <code>stroke</code> pour la bordure, <code>fill</code> pour la couleur de remplissage, <code>opacity</code> pour la transparence, et bien d'autres !",
          "codes": {
            "html": "<svg><circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"red\" stroke=\"blue\" stroke-width=\"5\"/></svg>"
          },
          "info": "Ces propriétés peuvent très bien être appliquées en CSS. Il est cependant naturel de les placer directement au sein du svg, car elles font partie intégrante de l'image, contrairement au cas d'un document HTML où le style est séparé du contenu.",
          "links": [
            {
              "label": "Le remplissage et les bordures SVG",
              "url": "https://developer.mozilla.org/fr/docs/Web/SVG/Tutoriel/Fills_and_Strokes"
            }
          ],
          "codepen": "bzbGXR",
          "question": {
            "text": "Quel attribut permet de modifier l'apparence des terminaisons de ligne ? (pour arrondir les extrémités d'un trait, par exemple)",
            "answer": "stroke-linecap",
            "clue": "c"
          },
          "figure": {
            "src": "https://www.w3.org/TR/fill-stroke-3/images/stroke-align-intersecting-path.svg",
            "alt": "Différent types de remplissages et de bordures SVG",
            "caption": "De nombreuses stratégies de remplissage et de bordures sont possibles."
          }
        },
        {
          "title": "Animer un SVG en CSS",
          "theory": "Un grand avantage d'inclure directement le code SVG dans la page est que les balises qui le constituent se retrouve dans le <code>DOM</code> (<i>Document Object Model</i>), et sont par conséquent accessible en CSS. Ce dernier a donc le pouvoir de modifier les propriétés des éléments du SVG, ce qui ouvre la porte à de riches interactions avec l'utilisateur (puisqu'on peut utiliser transitions, animations, effets de survol...)",
          "codes": {
            "html": "<svg><circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"red\" stroke=\"blue\" stroke-width=\"5\"/></svg>",
            "css": "circle { transition: fill&nbsp;0.5s; } svg:hover&nbsp;circle { fill: green; }"
          },
          "info": "En tant qu'éléments du <i>DOM</i>, la balise <code>svg</code> ainsi que ses enfants peuvent prendre des <code>id</code> et des <code>class</code>. Corollaire : dire que le CSS sert à styliser le HTML est un abus de langage, car SVG est aussi concerné !",
          "links": [
            {
              "label": "Animer un SVG avec CSS",
              "url": "https://la-cascade.io/animer-un-svg-avec-css/"
            }
          ],
          "codepen": "wNwBqp",
          "question": {
            "text": "Quelle est la propriété à animer en CSS si l'on veut faire bouger les traits pointillés d'une ligne ou bordure SVG ?",
            "answer": "stroke-dashoffset",
            "clue": "a"
          },
          "figure": {
            "src": "https://reactjsexample.com/content/images/2017/09/City-Illustration.gif",
            "alt": "Des animations de survol en SVG",
            "caption": "Difficile d'envisager une telle animation sans un SVG intégré à la page."
          }
        },
        {
          "title": "Animation de ligne SVG",
          "theory": "Un effet courant en SVG est l'apparition progressive d'une ligne, comme si elle se dessinait. En réalité, elle ne se dessine pas et nous avons déjà tous les outils pour le faire. L'astuce est de définir une taille de pointillés si grande qu'un seul pointillé couvre toute la longueur de la ligne concernée, puis de faire \"glisser\" la position de départ des pointillés grâce à <code>stroke-dashoffset</code>. Le tour est joué !",
          "codes": {
            "html": "<svg viewBox=\"0 0 100 100\"><line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"100\" stroke=\"black\" /></svg>",
            "css": "@keyframes&nbsp;resetOffset { to { stroke-dashoffset: 0; } } line { stroke-dasharray: 144; stroke-dashoffset: 144; animation: resetOffset&nbsp;2s&nbsp;linear&nbsp;forwards; }"
          },
          "info": "La propriété <code>stroke-dasharray</code>, comme son nom l'indique (<i>array</i>), peut prendre plusieurs valeurs pour donner des pointillés de tailles variables.",
          "links": [
            {
              "label": "Comment réaliser l'effet",
              "url": "https://css-tricks.com/svg-line-animation-works/"
            }
          ],
          "codepen": "pGzjee",
          "question": {
            "text": "Quel format d'écriture peut-on utiliser si on souhaite définir l'attribut <code>stroke</code> selon 3 niveaux de couleur et une transparence ?",
            "answer": "rgba",
            "clue": "b"
          },
          "figure": {
            "src": "https://cdn-images-1.medium.com/max/1600/1*T480KKPWmIDxDD1KXPc-mQ.gif",
            "alt": "Des jauges se remplissant grâce à une animation de ligne SVG",
            "caption": "Une application pratique et courante."
          }
        },
        {
          "title": "Système d'icônes en SVG",
          "theory": "La plupart des sites utilisent un ensemble d'icônes parfois vaste pour enrichir l'interface : interactions, navigation, réseaux sociaux, logos...  Il serait dommageable de charger un fichier image pour chacune de ces icônes : cela engendrerait beaucoup de requêtes impactant la performance, et les images ne pourraient pas être modifiées en réponse aux actions de l'utilisateur. Une des solutions les plus optimisées pour faire face à cela est de définir en tête du HTML une liste de <code>symbol</code> SVG cachés, auxquels on pourra faire référence n'importe où par la suite. Pas de requêtes supplémentaires, des icônes vectoriels (donc scalables) et pouvant réagir au contexte et aux interactions !",
          "codes": {
            "html": "<svg style=\"position: absolute; width: 0; height: 0; overflow: hidden;\"><defs><symbol id=\"icon-facebook\" viewBox=\"0 0 32 32\"><title>facebook</title><path d=\"M19 -6h-5c-3.86 0-7 3.14-7 7v3h-4v6h4v16h6v-16h5l1-6h-6v-3c0-0.542 0.458-1 1-1z\"></path></symbol></defs></svg><main><p>Lien vers facebook : </p><a href=\"facebook.com\"><svg><use  xlink:href=\"#icon-facebook\"></use></svg></a></main>"
          },
          "info": "Une autre technique très en vogue est l'utilisation d'une police d'icônes : on génère un fichier <code>.woff</code> ne contenant non pas des lettres mais des symboles, et on utilise le CSS pour afficher le caractère correspondant à chaque symbole. Ces deux techniques se valent en termes d'avantages et d'incovénients.",
          "links": [
            {
              "label": "Banque d'icônes Icomoon",
              "url": "https://icomoon.io/app/#/select"
            }
          ],
          "codepen": "daboGz",
          "question": {
            "text": "Vous pouvez voir cette technique en action ici-même : quel est le nom de l'icône pour la loupe à gauche de chaque question ?",
            "answer": "search",
            "clue": "s"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2014/03/svg-shadow.png",
            "alt": "Utilisation du shadow-dom avec la balise use",
            "caption": "Lorsque vous utilisez la balise <code>use</code>, le navigateur utilise le <em>shadow DOM</em> pour faire référence à l'élément SVG défini plus haut dans le document. Pratique si vous avez besoin d'inclure cette icône à plusieurs endroits."
          }
        }
      ]
    },
    {
      "title": "Pot-pourri",
      "description": "Astuces, pièges et aspects méconnus du HTML et du CSS, langages pleins de surprises et à la puissance souvent sous-estimée.",
      "slidesUrl": "https://docs.google.com/presentation/d/e/2PACX-1vTfLU4bxeM0BpSuwE9a04ZlMTuAPXRqn8RVpN7toxoCC09-6ylM_saAP4_OEcgPPscFLQaKL7XC3Zuo/pub?start=false&loop=false&delayms=6000000",
      "correctionVideoYoutubeId": "",
      "puzzle": {
        "word": "curieux",
        "text": "L'être, c'est votre responsabilité de développeur. Quand vous avez l'impression de maîtriser un langage, un outil, un concept... Fouillez, car vous n'avez qu'égratiné la surface. Le plus passionant est à venir !"
      },
      "concepts": [
        {
          "title": "Sélecteurs nth-child avancés",
          "theory": "Combinés entre eux, la puissance des pseudo sélecteurs tels que <code>nth-child</code> et ses compagnons est remarquable. Il est par exemple possible d'appliquer un style à l'enfant d'un élément <em>uniquement</em> si l'élément en question contient un nombre spécifique d'enfants, et sans JavaScript ! Pour cela, on cherche un élément qui soit à la fois le premier enfant (<code>first-child</code>) mais aussi le n-ième enfant en partant de la fin (<code>nth-last-child(5)</code>, si on cherche une liste de 5 éléments). Si un élément satisfait ces deux conditions, il est logiquement dans une série de n enfants exactement. On peut alors le cibler, ainsi que les éléments suivant grâce au tilde (<code>~</code>). Cela permet d'appliquer des styles différents en fonction de la quantité d'éléments présents.",
          "codes": {
            "html": "<ul><li>One</li><li>Two</li><li>Three</li><li>Four</li><li>Five</li></ul>",
            "css": "li:nth-last-child(5):first-child,li:nth-last-child(5):first-child ~ li { color: red; }"
          },
          "warning": "Le caractère tilde (<code>~</code>) permet de sélectionner tous les éléments suivants mais pas l'élément lui-même, d'où la double sélection dans l'exemple. Par ailleurs, il n'existe actuellement aucune technique CSS pour cibler les éléments précédents.",
          "links": [
            {
              "label": "Useful nth-child recipes",
              "url": "https://css-tricks.com/useful-nth-child-recipies/"
            },
            {
              "label": "Compter des éléments avec nth-child",
              "url": "https://alistapart.com/article/quantity-queries-for-css"
            }
          ],
          "codepen": "zerPRY",
          "question": {
            "text": "Dans une liste contenant 6 éléments, combien d'entre-eux seront ciblés par le sélecteur <code>li:nth-child(2n+3)</code> ? N'hésitez pas à faire un petit schéma.",
            "answer": "deux",
            "clue": "x"
          },
          "figure": {
            "src": "https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_896,f_auto,q_auto/v1531520166/logical-styling-8_gegaqo.png",
            "alt": "Un slider changeant d'apparence en fonction du nombre d'éléments qu'il contient",
            "caption": "Compter les éléments en CSS pourrait permettre d'adapter un slider au nombre d'éléments qu'il contient. Idem avec une liste de liens, un menu..."
          }
        },
        {
          "title": "Pseudo-éléments ::after & ::before",
          "theory": "Comment ajouter des éléments décoratifs sans polluer notre HTML, afin de séparer au maximum présentation et style ? Chaque élément du DOM peut posséder deux pseudo-éléments&nbsp;: un <code>::before</code>, et un <code>::after</code>. Ils seront \"injectés\" dans la boîte de l'élément, respectivement au début et à la fin. Ces éléments ne seront pas visibles dans le DOM mais leur contenu et leur style pourra être défini en CSS. Il est même possible d'injecter dans le pseudo-élément un contenu provenant d'un attribut de la l'élément ciblé.",
          "codes": {
            "html": "<p data-line=\"1\">Première ligne</p><p data-line=\"2\">Deuxième ligne</p>",
            "css": "p::before { content: attr(data-line); opacity: 0.5; }"
          },
          "warning": "La syntaxe <code>:before</code> est également valable mais le doublement des points (<code>::before</code>) a été introduit avec CSS3 pour accentuer la différence entre les pseudo-éléments et les pseudo-classes (par exemple <code>:nth-child</code>). Dans l'exemple, on s'en sert pour numéroter des lignes sans devoir rajouter un <code>span</code>.  Le site sur lequel vous êtes actuellement en fait aussi usage : pour les petites flèches devant chaque titre, par exemple.",
          "links": [
            {
              "label": "Le pseudo-élémént ::before",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/::before"
            },
            {
              "label": "Explication détaillée",
              "url": "https://la-cascade.io/les-pseudo-elements-css-before-et-after/"
            }
          ],
          "codepen": "gqPNOL",
          "figure": {
            "src": "https://mohitvash.files.wordpress.com/2016/06/scheme.gif",
            "alt": "Un élément visuel utilisant les pseudo-éléments",
            "caption": "Même sans texte à l'intérieur, les pseudo-éléments sont très utilisés pour réaliser de petits effets visuels. Vous ne voudriez pas ajouter deux <code>span</code> vides à votre beau HTML pour réaliser cela, n'est-ce pas ?"
          }
        },
        {
          "title": "::first-letter & ::first-line",
          "theory": "Moins souvent utilisés, <code>::first-letter</code> et <code>::first-line</code> sont également des pseudo-éléments, permettant respectivement de cibler la première lettre et la première ligne d'une balise, sans avoir à ajouter d'élément dans le HTML (il serait de toute façon impossible de deviner quelle est la première ligne, puisqu'elle dépend de la taille du conteneur et de l'écran). On peut alors leur appliquer certaines propriétés CSS : font, background, shadow...",
          "codes": {
            "html": "<p>Ma première lettre sera en rouge, et ma première ligne sera soulignée</p>",
            "css": "p::first-letter{color: red; }p::first-line {text-decoration: underline; }"
          },
          "info": "Un autre pseudo-élément non abordé dans ce chapitre est <code>::selection</code>, permettant de styliser le texte actuellement sélectionné avec la souris, ce qui peut enrichir l'identité de votre site.",
          "links": [
            {
              "label": "::first-letter sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/::first-letter"
            },
            {
              "label": "::first-line sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/::first-line"
            }
          ],
          "codepen": "aXNYYo",
          "question": {
            "text": "Quel est le nom donné à une lettre entammant un paragraphe et stylistiquement mise en avant ?",
            "answer": "lettrine",
            "clue": "r"
          },
          "figure": {
            "src": "https://www.mediaforma.com/uneminuteparjour/html5/images/lettrine-1.jpg",
            "alt": "Une lettrine dans un vieux livre",
            "caption": "Comme souvent, le web s'inspire de la réalité, en l'occurence d'une très vieille réalité."
          }
        },
        {
          "title": "Colonnes CSS",
          "theory": "Moins récentes et moins connues que les stars <code>flex</code> et <code>grid</code>, les colonnes CSS permettent pourtant d'achever un effet inatteignable autrement : séparer du texte en plusieurs colonnes, dont la taille et le nombre peuvent être dynamiques. Un effet inspiré des journaux et très courant lorsqu'il s'agit de présenter du texte.",
          "codes": {
            "html": "<p>Un très long texte qui sera divisé en 4 colonnes séparées par 20px...</p>",
            "css": "p {column-count: 4; column-gap: 20px; }"
          },
          "info": "Le consensus pour la lisibilité optimale des textes sur le web suggère de limiter le nombre de caractères par ligne à 45-75, et un peu moins (40-50) si ce dernier est présenté sur plusieurs colonnes (webtypography.net). En effet, l'oeil a du mal à suivre une ligne continue pendant trop longtemps, et les retours à la ligne permettent de rythmer, et donc de faciliter la lecture.",
          "links": [
            {
              "label": "Colonnes CSS sur MDN",
              "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns/Basic_Concepts_of_Multicol"
            },
            {
              "label": "Mise en pratique",
              "url": "https://www.smashingmagazine.com/2019/01/css-multiple-column-layout-multicol/"
            }
          ],
          "codepen": "rPLKpw",
          "question": {
            "text": "Quelle propriété permet d'étendre l'enfant d'un contenu présenté en plusieurs colonnes sur l'ensemble des colonnes (par exemple un titre s'étalant sur toute la largeur) ?",
            "answer": "column-span",
            "clue": "u"
          },
          "figure": {
            "src": "https://s3-us-west-2.amazonaws.com/i.cdpn.io/43980.GoaRMd.6db8410a-06d2-4432-9d49-6e3c1ca43c23.png",
            "alt": "Un effet de briques grâce aux colonnes CSS",
            "caption": "Au-delà du texte, les colonnes CSS permettent aussi d'organiser différement les blocks (ici, un effet appelé <i>CSS Masonry</i> en référence aux briques constituant un mur)."
          }
        },
        {
          "title": "Sélecteurs d'attribut avancés",
          "theory": "Les attributs de chaque élément nous donnent beaucoup d'informations sur eux, et il est possible de cibler ces attributs de manière très fine, évitant parfois d'avoir à recourir à des classes supplémentaires. Il est ainsi possible de cibler tous les <code>input</code> d'un type particulier, tous les liens dont l'attribut <code>href</code> contient un mot clé spécifique, toutes les images ne possédant pas d'attribut <code>alt</code>... Ces techniques peuvent être utilisées pour styliser de manière globale l'interface du site.",
          "codes": {
            "html": "<input type=\"email\" type=\"email\" >",
            "css": "input[type=\"email\"] { border: 1px&nbsp;solid&nbsp;blue; }"
          },
          "info": "Il est possible de vérifier la simple présence d'un attribut, une valeur exacte, ou une valeur contenue au début, au milieu ou à la fin de l'attribut. Les combinaisons possibles sont nombreuses et permettent de déduire beaucoup de choses à partir des attributs.",
          "links": [
            {
              "label": "Les nombreuses syntaxes de sélection",
              "url": "https://www.w3schools.com/css/css_attribute_selectors.asp"
            },
            {
              "label": "Article explicatif et exemples",
              "url": "https://www.smashingmagazine.com/2018/10/attribute-selectors-splicing-html-dna-css/"
            }
          ],
          "codepen": "MLKMxM",
          "question": {
            "text": "Quel caractère permet de chercher une valeur à n'importe quelle position dans un attribut ?",
            "answer": "astérisque",
            "clue": "e"
          },
          "figure": {
            "src": "https://external-preview.redd.it/zc8Rn-ZsxHphwpR-8ArEkmhIBmCxbVPW-nTt5BNvTz4.jpg?width=900&height=471.204188482&auto=webp&s=02e9f6399c5f1c718caefb3bd446e30160a812ec",
            "alt": "Une règle CSS révélant les images n'ayant pas d'attribut alt",
            "caption": "Les sélecteurs d'attribut peuvent servir à débugger, par exemple à révéler les images ne possédant pas d'attribut <code>alt</code> ou dont l'attribut <code>alt</code> est vide."
          }
        },
        {
          "title": "La fusion de marges",
          "theory": "Lorsque deux éléments de type <code>block</code> se suivent verticalement, la <code>margin-bottom</code> du premier et la <code>margin-top</code> du second fusionnent. Cela signifie que s'ils ont respectivement des marges de <code>30px</code> et <code>10px</code>, la marge de <code>10px</code> sera \"absorbée\" dans la marge de <code>30px</code>. L'espace total entre les deux éléments sera donc <code>30px</code> et non pas <code>40px</code>, l'addition des deux. La connaissance de ce mécanisme est primodiable pour placer correctement les éléments.",
          "codes": {
            "html": "<div class=\"one\">Ces deux divs seront séparées...</div><div class=\"two\">...par seulement 30 pixels</div>",
            "css": ".one {margin-bottom: 30px; } .two {margin-top: 10px; }"
          },
          "info": "La fusion de marge peut même \"descendre\" dans le DOM. Cela signifie que la <code>margin-top</code> d'un élément peut fusionner avec la <code>margin-bottom</code> d'un autre qui n'est pas son frère précédent, mais un élément situé plus haut dans l'arborescence du DOM (un frère de son parent par exemple). Il faut donc utiliser les marges avec plus de précautions qu'on ne pourrait le penser.",
          "links": [
            {
              "label": "Fusion de marges sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/Mod%C3%A8le_de_bo%C3%AEte_CSS/Fusion_des_marges"
            },
            {
              "label": "Article explicatif",
              "url": "https://jonathan-harrell.com/whats-the-deal-with-margin-collapse/"
            }
          ],
          "codepen": "xMVKGj",
          "question": {
            "text": "En anglais, ce phénomène est appelé <i>margin...</i>",
            "answer": "collapsing",
            "clue": "c"
          },
          "figure": {
            "src": "https://i.stack.imgur.com/EXykq.png",
            "alt": "Un schéma de la fusion de marges",
            "caption": "Autrement dit, quand deux marges verticales se suivent, seule la plus grande est prise en compte. Notez que cela ne se produit pas pour les marges horizontales, ni si les éléments sont enfants d'un conteneur <code>flex</code>."
          }
        },
        {
          "title": "Réagir au clic d'un utilisateur avec le sélecteur :checked",
          "theory": "Les inputs ont des pouvoirs cachés (n'hésitez pas à vous rafraîchir la mémoire au sujet des inputs et des labels si nécessaire). Lorsqu'on créé un input de type <code>radio</code> ou <code>checkbox</code>, il est possible de les cibler quand ils sont sélectionnés / cochés grâce à la pseudo-classe <code>:checked</code>. Il est aussi possible de leur associer un élément <code>label</code>, qui permettra de les cocher \"à distance\". Contrairement aux inputs, les <code>label</code> peuvent ressembler et contenir ce que l'on souhaite. Si on cache l'input en CSS, on peut utiliser le label (texte, image, bouton...) pour activer l'input caché. On peut ensuite sélectionner les éléments voisins de l'input ayant la pseudo-classe <code>:checked</code>, et ainsi réagir à l'action de l'utilisateur. Comme si le label avait déclenché quelque chose, et sans JavaScript !",
          "codes": {
            "html": "<input type=\"checkbox\" id=\"menu\" /><label for=\"menu\">Ouvrir le menu</label><ul class=\"menu\">...</ul>",
            "css": "input {display: none; } .menu { display: none; }input:checked ~ .menu { display: block; }"
          },
          "info": "Le code de l'exemple permet de gérer l'ouverture d'un menu sans JavaScript. Par défaut, il est caché. Lorsque l'utilisateur clique sur le label \"Ouvrir le menu\", l'input correspondant, caché aussi, est activé. Le CSS permet ensuite d'afficher le menu lorsqu'il se trouve à la suite d'un input possédant la pseudo classe <code>:checked</code>.",
          "links": [
            {
              "label": "Cas pratiques d'utilisation",
              "url": "https://css-tricks.com/the-checkbox-hack/"
            },
            {
              "label": "Le concept poussé très, très loin",
              "url": "https://codepen.io/ashishkhuraishy/full/rqQxyX"
            }
          ],
          "codepen": "omxxQR",
          "question": {
            "text": "Quel est le nom du caractère permettant de sélectionner un ou plusieurs éléments à condition qu'ils suivent un autre élément précis ?",
            "answer": "tilde",
            "clue": "i"
          },
          "figure": {
            "src": "https://css-tricks.com/wp-content/uploads/2017/10/slider-5.gif",
            "alt": "Un slider en pur CSS",
            "caption": "Le \"<i>checkbox hack</i>\" est fonctionnellement très basique, mais il ouvre à des possibilités très vastes si l'on souhaite limiter notre emploi du JavaScript à ce qui est réellement indispensable. Attention cependant à l'accessibilité de vos pages, cette astuce fonctionne surtout avec des cas simples."
          }
        },
        {
          "title": "Compteurs CSS",
          "theory": "Une autre rare situation dans laquelle le CSS sort de son rôle purement présentationnel est celle des compteurs. Grâce à eux, il est possible de compter des éléments dans une page en CSS, et d'introduire cette valeur n'importe où (grâce aux pseudo-éléments). Plusieurs compteurs peuvent cohabiter dans une même page. Grâce à eux, il est possible de numéroter des éléments de manière bien plus fine qu'avec une liste ordonnée.",
          "codes": {
            "html": "<section>Section one</section><section>Section two</section><section>Section three</section>",
            "css": "body {counter-reset: sections; }section::before {counter-increment: sections; content: counter(sections); }"
          },
          "info": "C'est un comportement inhabituel en CSS, mais la logique est simple. On initialise un compteur en lui donnant le nom de notre choix (<code>counter-reset</code>). On l'incrémente à chaque fois que l'on rencontre les éléments qu'on souhaite compter (<code>counter-increment</code>), et on affiche la valeur avec la fonction <code>counter()</code>.",
          "links": [
            {
              "label": "Compteurs CSS sur MDN",
              "url": "https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Lists/Compteurs_CSS"
            },
            {
              "label": "Exemples simples et poussés",
              "url": "https://codersblock.com/blog/fun-times-with-css-counters/"
            }
          ],
          "codepen": "zeqRML",
          "question": {
            "text": "La fonction <code>counter()</code> prend un deuxième paramètre pour l'apparence du compteur. Quelle doit être sa valeur pour obtenir une lettre majuscule (A, B, C...) à la place des chiffres ?",
            "answer": "upper-alpha",
            "clue": "u"
          },
          "figure": {
            "src": "http://constructs.stampede-design.com/wp-content/uploads/2015/01/css-counter.jpg",
            "alt": "Une addition en pur CSS",
            "caption": "Il est également possible de controller la quantité s'ajoutant au compteur, permettant ainsi les calculs possibles en pur CSS !"
          }
        }
      ]
    }
  ],
  "videos": [
    {
      "title": "Git, Github & Netlify",
      "youtubeId": "07Kb-_TzVdU"
    },
    {
      "title": "Parallaxe avec Relax",
      "youtubeId": "y1pidXqv0Ic"
    },
    {
      "title": "Détection de scroll avec Waypoints",
      "youtubeId": "9Mq9ktRcrZs"
    },
    {
      "title": "Menu burger fullscreen & responsive",
      "youtubeId": "4y_GGOY035s"
    },
    {
      "title": "npm, Parcel & Sass",
      "youtubeId": "SH7R5QgKwfE"
    }
  ],
  "twitterAccounts": [
    {
      "name": "CSS-Tricks",
      "id": "css",
      "avatarUrl": "https://pbs.twimg.com/profile_images/1080202898372362240/akqRGyta_400x400.jpg"
    },
    {
      "name": "CodyHouse",
      "id": "CodyWebHouse",
      "avatarUrl": "https://pbs.twimg.com/profile_images/972778766782140417/DzxuGyE0_bigger.jpg"
    },
    {
      "name": "A List Apart",
      "id": "alistapart",
      "avatarUrl": "https://pbs.twimg.com/profile_images/478913945475235840/Jv1mMBOA_bigger.jpeg"
    },
    {
      "name": "Friday Front-End",
      "id": "fridayfrontend",
      "avatarUrl": "https://pbs.twimg.com/profile_images/975219464823226369/eCIsZNgo_bigger.jpg"
    },
    {
      "name": "Shashing Magazine",
      "id": "smashingmag",
      "avatarUrl": "https://pbs.twimg.com/profile_images/1057746497884880898/lyruNAFp_400x400.jpg"
    },
    {
      "name": "Luke Wroblewski",
      "id": "lukew",
      "avatarUrl": "https://pbs.twimg.com/profile_images/477610446917103616/_cjU3_ga_bigger.png"
    },
    {
      "name": "HTeuMeuLeu",
      "id": "HteuMeuLeu",
      "avatarUrl": "https://pbs.twimg.com/profile_images/876098522155712514/U5EX5vLT_bigger.jpg"
    },
    {
      "name": "Programming Wisdom",
      "id": "CodeWisdom",
      "avatarUrl": "https://pbs.twimg.com/profile_images/705003311083229184/qTBCIxpk_bigger.jpg"
    }
  ]
}
